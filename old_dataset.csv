Unnamed: 0,question,topic,content,answer
0,What is the purpose of the tutorial?,Write to Google Sheets,"In this tutorial, we’ll show how to use Modal to schedule a daily update of a dataset
from an analytics database to Google Sheets. ",The purpose of the tutorial is to show how to use Modal to schedule a daily update of a dataset from an analytics database to Google Sheets.
3,Which tool is used to schedule daily updates of a dataset in this tutorial?,Write to Google Sheets,"In this tutorial, we’ll show how to use Modal to schedule a daily update of a dataset
from an analytics database to Google Sheets. ",Modal is used to schedule daily updates of a dataset in this tutorial.
6,What kind of database is the dataset coming from for the daily updates?,Write to Google Sheets,"In this tutorial, we’ll show how to use Modal to schedule a daily update of a dataset
from an analytics database to Google Sheets. ",The dataset for the daily updates is coming from an analytics database.
0,What API is used to lookup the current weather for cities in the data?,Write to Google Sheets Applying Python logic,"For each city in our source data we’ll make an online lookup of the current weather using thehttp://openweathermap.orgAPI. To do this, we’ll add the API key to
another modal secret. We’ll use a custom secret called “weather” with the keyOPENWEATHER_API_KEYcontaining our API key for OpenWeatherMap. http://openweathermap.org OPENWEATHER_API_KEY requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label ""requests"" @stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),) image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""), ""weather-secret"" ""weather-secret"" def city_weather city import ""https://api.openweathermap.org/data/2.5/weather"" ""q"" ""appid"" ""OPENWEATHER_API_KEY"" ""weather"" 0 ""main"" return Copy Copy    Copy We’ll make use of Modal’s built-infunction.mapmethod to create our report.function.mapmakes it really easy to parallelise work by executing a function for a larger sequence of input
data. For this example we’ll make a simple count of rows per weather type, using Python’s
standard librarycollections.Counter. function.map function.map collections.Counter fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather from import @stub.function() def create_report cities # run city_weather for each city in parallel map return Copy Copy    Copy Let’s try to run this! To make it simple to trigger the function with some
predefined input data, we create a “local entrypoint”mainthat can be
easily triggered from the command line: main @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint() def main ""Stockholm,,Sweden"" ""New York,NY,USA"" ""Tokyo,,Japan"" print Copy Copy    Copy Running the local entrypoint usingmodal run db_to_sheet.pyshould print something like:dict_items([('Clouds', 3)]).
Note that since this file only has a single stub, and the stub has only one local entrypoint
we only have to specify the file to run - the function/entrypoint is inferred. modal run db_to_sheet.py dict_items([('Clouds', 3)]) In this case the logic is quite simple, but in a real world context you could have applied a
machine learning model or any other tool you could build into a container to transform the data. ","The API used is the OpenWeatherMap API, http://openweathermap.org API."
3,"What does the Python function ""city_weather"" do?",Write to Google Sheets Applying Python logic,"For each city in our source data we’ll make an online lookup of the current weather using thehttp://openweathermap.orgAPI. To do this, we’ll add the API key to
another modal secret. We’ll use a custom secret called “weather” with the keyOPENWEATHER_API_KEYcontaining our API key for OpenWeatherMap. http://openweathermap.org OPENWEATHER_API_KEY requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label ""requests"" @stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),) image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""), ""weather-secret"" ""weather-secret"" def city_weather city import ""https://api.openweathermap.org/data/2.5/weather"" ""q"" ""appid"" ""OPENWEATHER_API_KEY"" ""weather"" 0 ""main"" return Copy Copy    Copy We’ll make use of Modal’s built-infunction.mapmethod to create our report.function.mapmakes it really easy to parallelise work by executing a function for a larger sequence of input
data. For this example we’ll make a simple count of rows per weather type, using Python’s
standard librarycollections.Counter. function.map function.map collections.Counter fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather from import @stub.function() def create_report cities # run city_weather for each city in parallel map return Copy Copy    Copy Let’s try to run this! To make it simple to trigger the function with some
predefined input data, we create a “local entrypoint”mainthat can be
easily triggered from the command line: main @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint() def main ""Stockholm,,Sweden"" ""New York,NY,USA"" ""Tokyo,,Japan"" print Copy Copy    Copy Running the local entrypoint usingmodal run db_to_sheet.pyshould print something like:dict_items([('Clouds', 3)]).
Note that since this file only has a single stub, and the stub has only one local entrypoint
we only have to specify the file to run - the function/entrypoint is inferred. modal run db_to_sheet.py dict_items([('Clouds', 3)]) In this case the logic is quite simple, but in a real world context you could have applied a
machine learning model or any other tool you could build into a container to transform the data. ","The ""city_weather"" function makes a request to the OpenWeatherMap api to get the current weather for a specified city."
6,How do you trigger the function with some predefined input data?,Write to Google Sheets Applying Python logic,"For each city in our source data we’ll make an online lookup of the current weather using thehttp://openweathermap.orgAPI. To do this, we’ll add the API key to
another modal secret. We’ll use a custom secret called “weather” with the keyOPENWEATHER_API_KEYcontaining our API key for OpenWeatherMap. http://openweathermap.org OPENWEATHER_API_KEY requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_labelCopy requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label requests_image = modal.Image.debian_slim().pip_install(""requests"")@stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),)defcity_weather(city):importrequests

    url =""https://api.openweathermap.org/data/2.5/weather""params = {""q"": city,""appid"": os.environ[""OPENWEATHER_API_KEY""]}
    response = requests.get(url, params=params)
    weather_label = response.json()[""weather""][0][""main""]returnweather_label ""requests"" @stub.function(image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""),) image=requests_image,
    secret=modal.Secret.from_name(""weather-secret""), ""weather-secret"" ""weather-secret"" def city_weather city import ""https://api.openweathermap.org/data/2.5/weather"" ""q"" ""appid"" ""OPENWEATHER_API_KEY"" ""weather"" 0 ""main"" return Copy Copy    Copy We’ll make use of Modal’s built-infunction.mapmethod to create our report.function.mapmakes it really easy to parallelise work by executing a function for a larger sequence of input
data. For this example we’ll make a simple count of rows per weather type, using Python’s
standard librarycollections.Counter. function.map function.map collections.Counter fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weatherCopy fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather fromcollectionsimportCounter@stub.function()defcreate_report(cities):# run city_weather for each city in paralleluser_weather = city_weather.map(cities)
    users_by_weather = Counter(user_weather).items()returnusers_by_weather from import @stub.function() def create_report cities # run city_weather for each city in parallel map return Copy Copy    Copy Let’s try to run this! To make it simple to trigger the function with some
predefined input data, we create a “local entrypoint”mainthat can be
easily triggered from the command line: main @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities))Copy @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint()defmain():
    cities = [""Stockholm,,Sweden"",""New York,NY,USA"",""Tokyo,,Japan"",
    ]print(create_report.remote(cities)) @stub.local_entrypoint() def main ""Stockholm,,Sweden"" ""New York,NY,USA"" ""Tokyo,,Japan"" print Copy Copy    Copy Running the local entrypoint usingmodal run db_to_sheet.pyshould print something like:dict_items([('Clouds', 3)]).
Note that since this file only has a single stub, and the stub has only one local entrypoint
we only have to specify the file to run - the function/entrypoint is inferred. modal run db_to_sheet.py dict_items([('Clouds', 3)]) In this case the logic is quite simple, but in a real world context you could have applied a
machine learning model or any other tool you could build into a container to transform the data. ","To trigger the function with some predefined input data, a “local entrypoint” main is created that can be easily triggered from the command line."
0,What is the first step in sending a report to Google Sheets?,Write to Google Sheets Sending output to a Google Sheet,"We’ll set up a new Google Sheet to send our report to. Using the “Sharing” dialog in Google
Sheets, we make sure to share the document to the service account’s email address (the value of
theclient_emailfield in the json file) and make the service account an editor of the document. client_email The URL of a Google Sheet is something like:https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do. https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do We copy the part of the URL that comes after/d/- that is thekeyof the document which
we’ll refer to in our code. We’ll make use of thepygsheetspython package to authenticate with
Google Sheets and then update the spreadsheet with information from the report we just created: /d/ key pygsheets pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) ""pygsheets"" @stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),) image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""), ""gsheets-secret"" ""gsheets-secret"" def update_sheet_report rows import ""SERVICE_ACCOUNT_JSON"" ""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA"" ""A2"" ""A2"" list for in Copy Copy    Copy At this point, we have everything we need in order to run the full program. We can put it all together in
another Modal function, and add ascheduleargument so it runs every day automatically: schedule @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *"")) schedule=modal.Cron(""0 0 * * *"") ""0 0 * * *"" ""0 0 * * *"" def db_to_sheet print ""Updated sheet with new weather distribution"" for in print f""{weather}:{count}"" {weather} {count} Copy Copy    Copy This entire stub can now be deployed usingmodal deploy db_to_sheet.py. Theapps pageshows our cron job’s execution history and lets you navigate to each invocation’s logs.
To trigger a manual run from your local code during development, you can also trigger this function using the cli:modal run db_to_sheet.py::stub.db_to_sheet modal deploy db_to_sheet.py apps page modal run db_to_sheet.py::stub.db_to_sheet Note that all of the @stub.function() annotated functions above run remotely in isolated containers that are specified per
function, but they are called as seamlessly as using regular Python functions. This is a simple
showcase of how you can mix and match functions that use different environments and have them feed
into each other or even call each other as if they were all functions in the same local program. Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google Sheet Write to Google Sheets Entering credentials Database Google Sheets/GCP Applying Python logic Sending output to a Google Sheet Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy ",The first step is setting up a new Google Sheet to send the report to.
3,What part of the Google Sheets URL is used to refer to the document in the code?,Write to Google Sheets Sending output to a Google Sheet,"We’ll set up a new Google Sheet to send our report to. Using the “Sharing” dialog in Google
Sheets, we make sure to share the document to the service account’s email address (the value of
theclient_emailfield in the json file) and make the service account an editor of the document. client_email The URL of a Google Sheet is something like:https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do. https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do We copy the part of the URL that comes after/d/- that is thekeyof the document which
we’ll refer to in our code. We’ll make use of thepygsheetspython package to authenticate with
Google Sheets and then update the spreadsheet with information from the report we just created: /d/ key pygsheets pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) ""pygsheets"" @stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),) image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""), ""gsheets-secret"" ""gsheets-secret"" def update_sheet_report rows import ""SERVICE_ACCOUNT_JSON"" ""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA"" ""A2"" ""A2"" list for in Copy Copy    Copy At this point, we have everything we need in order to run the full program. We can put it all together in
another Modal function, and add ascheduleargument so it runs every day automatically: schedule @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *"")) schedule=modal.Cron(""0 0 * * *"") ""0 0 * * *"" ""0 0 * * *"" def db_to_sheet print ""Updated sheet with new weather distribution"" for in print f""{weather}:{count}"" {weather} {count} Copy Copy    Copy This entire stub can now be deployed usingmodal deploy db_to_sheet.py. Theapps pageshows our cron job’s execution history and lets you navigate to each invocation’s logs.
To trigger a manual run from your local code during development, you can also trigger this function using the cli:modal run db_to_sheet.py::stub.db_to_sheet modal deploy db_to_sheet.py apps page modal run db_to_sheet.py::stub.db_to_sheet Note that all of the @stub.function() annotated functions above run remotely in isolated containers that are specified per
function, but they are called as seamlessly as using regular Python functions. This is a simple
showcase of how you can mix and match functions that use different environments and have them feed
into each other or even call each other as if they were all functions in the same local program. Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google Sheet Write to Google Sheets Entering credentials Database Google Sheets/GCP Applying Python logic Sending output to a Google Sheet Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy ",The part of the URL that comes after /d/ is used to refer to the document in the code.
6,What function is used to update the Google sheet with information from the report created?,Write to Google Sheets Sending output to a Google Sheet,"We’ll set up a new Google Sheet to send our report to. Using the “Sharing” dialog in Google
Sheets, we make sure to share the document to the service account’s email address (the value of
theclient_emailfield in the json file) and make the service account an editor of the document. client_email The URL of a Google Sheet is something like:https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do. https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do We copy the part of the URL that comes after/d/- that is thekeyof the document which
we’ll refer to in our code. We’ll make use of thepygsheetspython package to authenticate with
Google Sheets and then update the spreadsheet with information from the report we just created: /d/ key pygsheets pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) ""pygsheets"" @stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),) image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""), ""gsheets-secret"" ""gsheets-secret"" def update_sheet_report rows import ""SERVICE_ACCOUNT_JSON"" ""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA"" ""A2"" ""A2"" list for in Copy Copy    Copy At this point, we have everything we need in order to run the full program. We can put it all together in
another Modal function, and add ascheduleargument so it runs every day automatically: schedule @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *"")) schedule=modal.Cron(""0 0 * * *"") ""0 0 * * *"" ""0 0 * * *"" def db_to_sheet print ""Updated sheet with new weather distribution"" for in print f""{weather}:{count}"" {weather} {count} Copy Copy    Copy This entire stub can now be deployed usingmodal deploy db_to_sheet.py. Theapps pageshows our cron job’s execution history and lets you navigate to each invocation’s logs.
To trigger a manual run from your local code during development, you can also trigger this function using the cli:modal run db_to_sheet.py::stub.db_to_sheet modal deploy db_to_sheet.py apps page modal run db_to_sheet.py::stub.db_to_sheet Note that all of the @stub.function() annotated functions above run remotely in isolated containers that are specified per
function, but they are called as seamlessly as using regular Python functions. This is a simple
showcase of how you can mix and match functions that use different environments and have them feed
into each other or even call each other as if they were all functions in the same local program. Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google Sheet Write to Google Sheets Entering credentials Database Google Sheets/GCP Applying Python logic Sending output to a Google Sheet Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy ",The function 'update_sheet_report' is used to update the Google sheet with information from the report created.
0,What is the process to send a report to Google Sheets?,Write to Google Sheets Sending output to a Google Sheet,"We’ll set up a new Google Sheet to send our report to. Using the “Sharing” dialog in Google
Sheets, we make sure to share the document to the service account’s email address (the value of
theclient_emailfield in the json file) and make the service account an editor of the document. client_email The URL of a Google Sheet is something like:https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do. https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do We copy the part of the URL that comes after/d/- that is thekeyof the document which
we’ll refer to in our code. We’ll make use of thepygsheetspython package to authenticate with
Google Sheets and then update the spreadsheet with information from the report we just created: /d/ key pygsheets pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) ""pygsheets"" @stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),) image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""), ""gsheets-secret"" ""gsheets-secret"" def update_sheet_report rows import ""SERVICE_ACCOUNT_JSON"" ""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA"" ""A2"" ""A2"" list for in Copy Copy    Copy At this point, we have everything we need in order to run the full program. We can put it all together in
another Modal function, and add ascheduleargument so it runs every day automatically: schedule @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *"")) schedule=modal.Cron(""0 0 * * *"") ""0 0 * * *"" ""0 0 * * *"" def db_to_sheet print ""Updated sheet with new weather distribution"" for in print f""{weather}:{count}"" {weather} {count} Copy Copy    Copy This entire stub can now be deployed usingmodal deploy db_to_sheet.py. Theapps pageshows our cron job’s execution history and lets you navigate to each invocation’s logs.
To trigger a manual run from your local code during development, you can also trigger this function using the cli:modal run db_to_sheet.py::stub.db_to_sheet modal deploy db_to_sheet.py apps page modal run db_to_sheet.py::stub.db_to_sheet Note that all of the @stub.function() annotated functions above run remotely in isolated containers that are specified per
function, but they are called as seamlessly as using regular Python functions. This is a simple
showcase of how you can mix and match functions that use different environments and have them feed
into each other or even call each other as if they were all functions in the same local program. Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google Sheet Write to Google Sheets Entering credentials Database Google Sheets/GCP Applying Python logic Sending output to a Google Sheet Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 04_secrets/db_to_sheet.py $ modal run 04_secrets/db_to_sheet.py modal run 04_secrets/db_to_sheet.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The process involves setting up a new Google Sheet to send the report to, using the ""Sharing"" dialog in Google Sheets to share the document to the service account's email address, making the service account an editor, then executing a Python script to update the spreadsheet with the report data. "
3,What is the role of the Python package 'pygsheets' in the mentioned code?,Write to Google Sheets Sending output to a Google Sheet,"We’ll set up a new Google Sheet to send our report to. Using the “Sharing” dialog in Google
Sheets, we make sure to share the document to the service account’s email address (the value of
theclient_emailfield in the json file) and make the service account an editor of the document. client_email The URL of a Google Sheet is something like:https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do. https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do We copy the part of the URL that comes after/d/- that is thekeyof the document which
we’ll refer to in our code. We’ll make use of thepygsheetspython package to authenticate with
Google Sheets and then update the spreadsheet with information from the report we just created: /d/ key pygsheets pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) ""pygsheets"" @stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),) image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""), ""gsheets-secret"" ""gsheets-secret"" def update_sheet_report rows import ""SERVICE_ACCOUNT_JSON"" ""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA"" ""A2"" ""A2"" list for in Copy Copy    Copy At this point, we have everything we need in order to run the full program. We can put it all together in
another Modal function, and add ascheduleargument so it runs every day automatically: schedule @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *"")) schedule=modal.Cron(""0 0 * * *"") ""0 0 * * *"" ""0 0 * * *"" def db_to_sheet print ""Updated sheet with new weather distribution"" for in print f""{weather}:{count}"" {weather} {count} Copy Copy    Copy This entire stub can now be deployed usingmodal deploy db_to_sheet.py. Theapps pageshows our cron job’s execution history and lets you navigate to each invocation’s logs.
To trigger a manual run from your local code during development, you can also trigger this function using the cli:modal run db_to_sheet.py::stub.db_to_sheet modal deploy db_to_sheet.py apps page modal run db_to_sheet.py::stub.db_to_sheet Note that all of the @stub.function() annotated functions above run remotely in isolated containers that are specified per
function, but they are called as seamlessly as using regular Python functions. This is a simple
showcase of how you can mix and match functions that use different environments and have them feed
into each other or even call each other as if they were all functions in the same local program. Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google Sheet Write to Google Sheets Entering credentials Database Google Sheets/GCP Applying Python logic Sending output to a Google Sheet Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 04_secrets/db_to_sheet.py $ modal run 04_secrets/db_to_sheet.py modal run 04_secrets/db_to_sheet.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'pygsheets' Python package is used to authenticate with Google Sheets and then update the spreadsheet with information from the report.
6,What is the process to manually trigger a run from local code during development?,Write to Google Sheets Sending output to a Google Sheet,"We’ll set up a new Google Sheet to send our report to. Using the “Sharing” dialog in Google
Sheets, we make sure to share the document to the service account’s email address (the value of
theclient_emailfield in the json file) and make the service account an editor of the document. client_email The URL of a Google Sheet is something like:https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do. https://docs.google.com/spreadsheets/d/1wOktal......IJR77jD8Do We copy the part of the URL that comes after/d/- that is thekeyof the document which
we’ll refer to in our code. We’ll make use of thepygsheetspython package to authenticate with
Google Sheets and then update the spreadsheet with information from the report we just created: /d/ key pygsheets pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows])Copy pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) pygsheets_image = modal.Image.debian_slim().pip_install(""pygsheets"")@stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),)defupdate_sheet_report(rows):importpygsheets

    gc = pygsheets.authorize(service_account_env_var=""SERVICE_ACCOUNT_JSON"")
    document_key =""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA""sh = gc.open_by_key(document_key)
    worksheet = sh.sheet1
    worksheet.clear(""A2"")

    worksheet.update_values(""A2"", [list(row)forrowinrows]) ""pygsheets"" @stub.function(image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""),) image=pygsheets_image,
    secret=modal.Secret.from_name(""gsheets-secret""), ""gsheets-secret"" ""gsheets-secret"" def update_sheet_report rows import ""SERVICE_ACCOUNT_JSON"" ""1RqQrJ6Ikf611adKunm8tmL1mKzHLjNwLWm_T7mfXSYA"" ""A2"" ""A2"" list for in Copy Copy    Copy At this point, we have everything we need in order to run the full program. We can put it all together in
another Modal function, and add ascheduleargument so it runs every day automatically: schedule @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"")Copy @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *""))defdb_to_sheet():
    rows = get_db_rows.remote()
    report = create_report.remote(rows)
    update_sheet_report.remote(report)print(""Updated sheet with new weather distribution"")forweather, countinreport:print(f""{weather}:{count}"") @stub.function(schedule=modal.Cron(""0 0 * * *"")) schedule=modal.Cron(""0 0 * * *"") ""0 0 * * *"" ""0 0 * * *"" def db_to_sheet print ""Updated sheet with new weather distribution"" for in print f""{weather}:{count}"" {weather} {count} Copy Copy    Copy This entire stub can now be deployed usingmodal deploy db_to_sheet.py. Theapps pageshows our cron job’s execution history and lets you navigate to each invocation’s logs.
To trigger a manual run from your local code during development, you can also trigger this function using the cli:modal run db_to_sheet.py::stub.db_to_sheet modal deploy db_to_sheet.py apps page modal run db_to_sheet.py::stub.db_to_sheet Note that all of the @stub.function() annotated functions above run remotely in isolated containers that are specified per
function, but they are called as seamlessly as using regular Python functions. This is a simple
showcase of how you can mix and match functions that use different environments and have them feed
into each other or even call each other as if they were all functions in the same local program. Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google SheetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Write to Google SheetsEntering credentialsDatabaseGoogle Sheets/GCPApplying Python logicSending output to a Google Sheet Write to Google Sheets Entering credentials Database Google Sheets/GCP Applying Python logic Sending output to a Google Sheet Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 04_secrets/db_to_sheet.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 04_secrets/db_to_sheet.py $ modal run 04_secrets/db_to_sheet.py modal run 04_secrets/db_to_sheet.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","To trigger a manual run from local code during development, the user can trigger the function using the command line interface (CLI) with the syntax 'modal run db_to_sheet.py::stub.db_to_sheet'."
0,What function does Modal provide for pulling common images from public registries?,Private registries,"Modal provides theImage.from_registryfunction, which pulls most common images available from public registries, like
Docker Hub and GitHub Container Registry. Image.from_registry Image.from_registry We also support private image registries, starting withAWS Elastic Container Registry (ECR)andGCP Artifact Registry. AWS Elastic Container Registry (ECR) GCP Artifact Registry ",Modal provides the Image.from_registry function.
3,"Besides public registries, what other types of registries does Modal support?",Private registries,"Modal provides theImage.from_registryfunction, which pulls most common images available from public registries, like
Docker Hub and GitHub Container Registry. Image.from_registry Image.from_registry We also support private image registries, starting withAWS Elastic Container Registry (ECR)andGCP Artifact Registry. AWS Elastic Container Registry (ECR) GCP Artifact Registry ",Modal also supports private image registries.
6,What are some of the common images available from public registries that Modal's Image.from_registry can pull?,Private registries,"Modal provides theImage.from_registryfunction, which pulls most common images available from public registries, like
Docker Hub and GitHub Container Registry. Image.from_registry Image.from_registry We also support private image registries, starting withAWS Elastic Container Registry (ECR)andGCP Artifact Registry. AWS Elastic Container Registry (ECR) GCP Artifact Registry ",The content does not provide specific examples of the common images that Modal's Image.from_registry can pull.
0,What is the code for specifying the full image URI to pull images from an AWS ECR account?,Private registries Elastic Container Registry ECR,"You can pull images from your AWS ECR account by specifying the full image URI
as follows: aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) ""my-aws-secret"" ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"" ""torch"" ""huggingface"" Copy Copy    Copy As shown above, you also need to use aModal Secretcontaining the environment variablesAWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, andAWS_REGION. The AWS IAM user account associated
with those keys must have access to the private registry you want to access. Modal Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The user needs to have the following read-only policies: {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} { ""Version"" : ""2012-10-17"" , ""Statement"" : [ { ""Action"" : [ ""ecr:GetAuthorizationToken"" ] , ""Effect"" : ""Allow"" , ""Resource"" : ""*"" } , { ""Effect"" : ""Allow"" , ""Action"" : [ ""ecr:BatchCheckLayerAvailability"" , ""ecr:GetDownloadUrlForLayer"" , ""ecr:GetRepositoryPolicy"" , ""ecr:DescribeRepositories"" , ""ecr:ListImages"" , ""ecr:DescribeImages"" , ""ecr:BatchGetImage"" , ""ecr:GetLifecyclePolicy"" , ""ecr:GetLifecyclePolicyPreview"" , ""ecr:ListTagsForResource"" , ""ecr:DescribeImageScanFindings"" ] , ""Resource"" : ""<MY-REGISTRY-ARN>"" } ] } Copy Copy    Copy You can use the IAM configuration above as a template for creating an IAM user.
You can thengenerate an access keyand create a Modal Secret using the AWS integration option. Modal will use your
access keys to generate an ephemeral ECR token. That token is only used to pull
image layers at the time a new image is built. We don’t store this token but
will cache the image once it has been pulled. generate an access key Images on ECR must be private and followimage configuration requirements. image configuration requirements Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR) Private registries Elastic Container Registry (ECR) See it in actionRegistry image for Algolia indexing See it in actionRegistry image for Algolia indexing See it in action Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The full image URI can be specified using the following code:
2,image = (,Private registries Elastic Container Registry ECR,"You can pull images from your AWS ECR account by specifying the full image URI
as follows: aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) ""my-aws-secret"" ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"" ""torch"" ""huggingface"" Copy Copy    Copy As shown above, you also need to use aModal Secretcontaining the environment variablesAWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, andAWS_REGION. The AWS IAM user account associated
with those keys must have access to the private registry you want to access. Modal Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The user needs to have the following read-only policies: {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} { ""Version"" : ""2012-10-17"" , ""Statement"" : [ { ""Action"" : [ ""ecr:GetAuthorizationToken"" ] , ""Effect"" : ""Allow"" , ""Resource"" : ""*"" } , { ""Effect"" : ""Allow"" , ""Action"" : [ ""ecr:BatchCheckLayerAvailability"" , ""ecr:GetDownloadUrlForLayer"" , ""ecr:GetRepositoryPolicy"" , ""ecr:DescribeRepositories"" , ""ecr:ListImages"" , ""ecr:DescribeImages"" , ""ecr:BatchGetImage"" , ""ecr:GetLifecyclePolicy"" , ""ecr:GetLifecyclePolicyPreview"" , ""ecr:ListTagsForResource"" , ""ecr:DescribeImageScanFindings"" ] , ""Resource"" : ""<MY-REGISTRY-ARN>"" } ] } Copy Copy    Copy You can use the IAM configuration above as a template for creating an IAM user.
You can thengenerate an access keyand create a Modal Secret using the AWS integration option. Modal will use your
access keys to generate an ephemeral ECR token. That token is only used to pull
image layers at the time a new image is built. We don’t store this token but
will cache the image once it has been pulled. generate an access key Images on ECR must be private and followimage configuration requirements. image configuration requirements Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR) Private registries Elastic Container Registry (ECR) See it in actionRegistry image for Algolia indexing See it in actionRegistry image for Algolia indexing See it in action Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",    modal.Image
3,"        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"", secret=aws_secret)",Private registries Elastic Container Registry ECR,"You can pull images from your AWS ECR account by specifying the full image URI
as follows: aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) ""my-aws-secret"" ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"" ""torch"" ""huggingface"" Copy Copy    Copy As shown above, you also need to use aModal Secretcontaining the environment variablesAWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, andAWS_REGION. The AWS IAM user account associated
with those keys must have access to the private registry you want to access. Modal Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The user needs to have the following read-only policies: {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} { ""Version"" : ""2012-10-17"" , ""Statement"" : [ { ""Action"" : [ ""ecr:GetAuthorizationToken"" ] , ""Effect"" : ""Allow"" , ""Resource"" : ""*"" } , { ""Effect"" : ""Allow"" , ""Action"" : [ ""ecr:BatchCheckLayerAvailability"" , ""ecr:GetDownloadUrlForLayer"" , ""ecr:GetRepositoryPolicy"" , ""ecr:DescribeRepositories"" , ""ecr:ListImages"" , ""ecr:DescribeImages"" , ""ecr:BatchGetImage"" , ""ecr:GetLifecyclePolicy"" , ""ecr:GetLifecyclePolicyPreview"" , ""ecr:ListTagsForResource"" , ""ecr:DescribeImageScanFindings"" ] , ""Resource"" : ""<MY-REGISTRY-ARN>"" } ] } Copy Copy    Copy You can use the IAM configuration above as a template for creating an IAM user.
You can thengenerate an access keyand create a Modal Secret using the AWS integration option. Modal will use your
access keys to generate an ephemeral ECR token. That token is only used to pull
image layers at the time a new image is built. We don’t store this token but
will cache the image once it has been pulled. generate an access key Images on ECR must be private and followimage configuration requirements. image configuration requirements Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR) Private registries Elastic Container Registry (ECR) See it in actionRegistry image for Algolia indexing See it in actionRegistry image for Algolia indexing See it in action Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","        .pip_install(""torch"",""huggingface"")"
4,),Private registries Elastic Container Registry ECR,"You can pull images from your AWS ECR account by specifying the full image URI
as follows: aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) ""my-aws-secret"" ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"" ""torch"" ""huggingface"" Copy Copy    Copy As shown above, you also need to use aModal Secretcontaining the environment variablesAWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, andAWS_REGION. The AWS IAM user account associated
with those keys must have access to the private registry you want to access. Modal Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The user needs to have the following read-only policies: {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} { ""Version"" : ""2012-10-17"" , ""Statement"" : [ { ""Action"" : [ ""ecr:GetAuthorizationToken"" ] , ""Effect"" : ""Allow"" , ""Resource"" : ""*"" } , { ""Effect"" : ""Allow"" , ""Action"" : [ ""ecr:BatchCheckLayerAvailability"" , ""ecr:GetDownloadUrlForLayer"" , ""ecr:GetRepositoryPolicy"" , ""ecr:DescribeRepositories"" , ""ecr:ListImages"" , ""ecr:DescribeImages"" , ""ecr:BatchGetImage"" , ""ecr:GetLifecyclePolicy"" , ""ecr:GetLifecyclePolicyPreview"" , ""ecr:ListTagsForResource"" , ""ecr:DescribeImageScanFindings"" ] , ""Resource"" : ""<MY-REGISTRY-ARN>"" } ] } Copy Copy    Copy You can use the IAM configuration above as a template for creating an IAM user.
You can thengenerate an access keyand create a Modal Secret using the AWS integration option. Modal will use your
access keys to generate an ephemeral ECR token. That token is only used to pull
image layers at the time a new image is built. We don’t store this token but
will cache the image once it has been pulled. generate an access key Images on ECR must be private and followimage configuration requirements. image configuration requirements Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR) Private registries Elastic Container Registry (ECR) See it in actionRegistry image for Algolia indexing See it in actionRegistry image for Algolia indexing See it in action Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",```
7,Which read-only policies should the AWS IAM user account have?,Private registries Elastic Container Registry ECR,"You can pull images from your AWS ECR account by specifying the full image URI
as follows: aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) ""my-aws-secret"" ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"" ""torch"" ""huggingface"" Copy Copy    Copy As shown above, you also need to use aModal Secretcontaining the environment variablesAWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, andAWS_REGION. The AWS IAM user account associated
with those keys must have access to the private registry you want to access. Modal Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The user needs to have the following read-only policies: {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} { ""Version"" : ""2012-10-17"" , ""Statement"" : [ { ""Action"" : [ ""ecr:GetAuthorizationToken"" ] , ""Effect"" : ""Allow"" , ""Resource"" : ""*"" } , { ""Effect"" : ""Allow"" , ""Action"" : [ ""ecr:BatchCheckLayerAvailability"" , ""ecr:GetDownloadUrlForLayer"" , ""ecr:GetRepositoryPolicy"" , ""ecr:DescribeRepositories"" , ""ecr:ListImages"" , ""ecr:DescribeImages"" , ""ecr:BatchGetImage"" , ""ecr:GetLifecyclePolicy"" , ""ecr:GetLifecyclePolicyPreview"" , ""ecr:ListTagsForResource"" , ""ecr:DescribeImageScanFindings"" ] , ""Resource"" : ""<MY-REGISTRY-ARN>"" } ] } Copy Copy    Copy You can use the IAM configuration above as a template for creating an IAM user.
You can thengenerate an access keyand create a Modal Secret using the AWS integration option. Modal will use your
access keys to generate an ephemeral ECR token. That token is only used to pull
image layers at the time a new image is built. We don’t store this token but
will cache the image once it has been pulled. generate an access key Images on ECR must be private and followimage configuration requirements. image configuration requirements Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR) Private registries Elastic Container Registry (ECR) See it in actionRegistry image for Algolia indexing See it in actionRegistry image for Algolia indexing See it in action Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The AWS IAM user account must have the following read-only policies: [""ecr:GetAuthorizationToken"", ""ecr:BatchCheckLayerAvailability"", ""ecr:GetDownloadUrlForLayer"", ""ecr:GetRepositoryPolicy"", ""ecr:DescribeRepositories"", ""ecr:ListImages"", ""ecr:DescribeImages"", ""ecr:BatchGetImage"", ""ecr:GetLifecyclePolicy"", ""ecr:GetLifecyclePolicyPreview"", ""ecr:ListTagsForResource"", ""ecr:DescribeImageScanFindings""]."
10,What are the requirements for images on the ECR?,Private registries Elastic Container Registry ECR,"You can pull images from your AWS ECR account by specifying the full image URI
as follows: aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image)Copy aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) aws_secret = modal.Secret.from_name(""my-aws-secret"")
image = (
    modal.Image
        .from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"",
            secret=aws_secret)
        .pip_install(""torch"",""huggingface"")
)

stub = modal.Stub(image=image) ""my-aws-secret"" ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:latest"" ""torch"" ""huggingface"" Copy Copy    Copy As shown above, you also need to use aModal Secretcontaining the environment variablesAWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, andAWS_REGION. The AWS IAM user account associated
with those keys must have access to the private registry you want to access. Modal Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The user needs to have the following read-only policies: {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]}Copy {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} {""Version"":""2012-10-17"",""Statement"":[{""Action"":[""ecr:GetAuthorizationToken""],""Effect"":""Allow"",""Resource"":""*""},{""Effect"":""Allow"",""Action"":[""ecr:BatchCheckLayerAvailability"",""ecr:GetDownloadUrlForLayer"",""ecr:GetRepositoryPolicy"",""ecr:DescribeRepositories"",""ecr:ListImages"",""ecr:DescribeImages"",""ecr:BatchGetImage"",""ecr:GetLifecyclePolicy"",""ecr:GetLifecyclePolicyPreview"",""ecr:ListTagsForResource"",""ecr:DescribeImageScanFindings""],""Resource"":""<MY-REGISTRY-ARN>""}]} { ""Version"" : ""2012-10-17"" , ""Statement"" : [ { ""Action"" : [ ""ecr:GetAuthorizationToken"" ] , ""Effect"" : ""Allow"" , ""Resource"" : ""*"" } , { ""Effect"" : ""Allow"" , ""Action"" : [ ""ecr:BatchCheckLayerAvailability"" , ""ecr:GetDownloadUrlForLayer"" , ""ecr:GetRepositoryPolicy"" , ""ecr:DescribeRepositories"" , ""ecr:ListImages"" , ""ecr:DescribeImages"" , ""ecr:BatchGetImage"" , ""ecr:GetLifecyclePolicy"" , ""ecr:GetLifecyclePolicyPreview"" , ""ecr:ListTagsForResource"" , ""ecr:DescribeImageScanFindings"" ] , ""Resource"" : ""<MY-REGISTRY-ARN>"" } ] } Copy Copy    Copy You can use the IAM configuration above as a template for creating an IAM user.
You can thengenerate an access keyand create a Modal Secret using the AWS integration option. Modal will use your
access keys to generate an ephemeral ECR token. That token is only used to pull
image layers at the time a new image is built. We don’t store this token but
will cache the image once it has been pulled. generate an access key Images on ECR must be private and followimage configuration requirements. image configuration requirements Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR)See it in actionRegistry image for Algolia indexing Private registriesElastic Container Registry (ECR) Private registries Elastic Container Registry (ECR) See it in actionRegistry image for Algolia indexing See it in actionRegistry image for Algolia indexing See it in action Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Images on the ECR must be private and follow specific image configuration requirements.
0,What is the function of aStub in Modal?,Apps stubs and entrypoints,"Every object in Modal is attached to aStub. This includes things like
functions, secrets, and images. AStubis a description of how to construct anApp. When yourunordeployaStub, it creates an ephemeral or a
deployedApp, respectively. Stub Stub Stub App App run run deploy deploy Stub App You can view a list of all currently running Apps on theappspage. apps ","In Modal, aStub is a description of how to construct anApp. It contains objects like functions, secrets, and images."
3,What types of objects are attached to a Stub in Modal?,Apps stubs and entrypoints,"Every object in Modal is attached to aStub. This includes things like
functions, secrets, and images. AStubis a description of how to construct anApp. When yourunordeployaStub, it creates an ephemeral or a
deployedApp, respectively. Stub Stub Stub App App run run deploy deploy Stub App You can view a list of all currently running Apps on theappspage. apps ","Every object in Modal, including things like functions, secrets, and images, is attached to aStub."
6,What does a Stub create when deployed?,Apps stubs and entrypoints,"Every object in Modal is attached to aStub. This includes things like
functions, secrets, and images. AStubis a description of how to construct anApp. When yourunordeployaStub, it creates an ephemeral or a
deployedApp, respectively. Stub Stub Stub App App run run deploy deploy Stub App You can view a list of all currently running Apps on theappspage. apps ","When deployed, a Stub creates a deployed App."
0,What is the function of 'modal deploy' command in the given context?,Apps stubs and entrypoints Deployed apps,"A deployed app is created using themodal deployCLI command. The app is persisted indefinitely until you delete it from theweb UI. Functions in a deployed app that have an attachedschedulewill be run on a schedule. Otherwise, you can
invoke them manually usingweb endpoints or Python. modal deploy modal deploy web UI schedule web endpoints or Python Deployed apps are named via theStubconstructor. Re-deploying an existingApp(based on the name) will update it
in place. Stub Stub App ",The 'modal deploy' command is used to create a deployed app.
3,What triggers the functions of a deployed app?,Apps stubs and entrypoints Deployed apps,"A deployed app is created using themodal deployCLI command. The app is persisted indefinitely until you delete it from theweb UI. Functions in a deployed app that have an attachedschedulewill be run on a schedule. Otherwise, you can
invoke them manually usingweb endpoints or Python. modal deploy modal deploy web UI schedule web endpoints or Python Deployed apps are named via theStubconstructor. Re-deploying an existingApp(based on the name) will update it
in place. Stub Stub App ","Functions in a deployed app are triggered on a schedule if they have an attached schedule, or they can be manually invoked using web endpoints or Python."
6,What happens when you re-deploy an existing App according to the text?,Apps stubs and entrypoints Deployed apps,"A deployed app is created using themodal deployCLI command. The app is persisted indefinitely until you delete it from theweb UI. Functions in a deployed app that have an attachedschedulewill be run on a schedule. Otherwise, you can
invoke them manually usingweb endpoints or Python. modal deploy modal deploy web UI schedule web endpoints or Python Deployed apps are named via theStubconstructor. Re-deploying an existingApp(based on the name) will update it
in place. Stub Stub App ","Re-deploying an existing App, based on its name, will update it in place."
0,What is an entrypoint in the context of ephemeral apps?,Apps stubs and entrypoints Entrypoints for ephemeral apps,"The code that runs first when youmodal runan app is called the entrypoint. modal run You can register a local entrypoint using the@stub.local_entrypoint()decorator. You can also use a regular Modal function as an entrypoint, in which
case only the code in global scope is executed locally. @stub.local_entrypoint() @stub.local_entrypoint() Argument parsing If your entrypoint function take arguments with primitive types,modal runautomatically parses them as CLI options. For example, the following function
can be called withmodal run script.py --foo 1 --bar ""hello"": modal run modal run script.py --foo 1 --bar ""hello"" # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Manually specifying an entrypoint If there is only onelocal_entrypointregistered,modal run script.pywill automatically use it. If
you have no entrypoint specified, and just one decorated Modal function, that
will be used as a remote entrypoint instead. Otherwise, you can directmodal runto use a specific entrypoint. local_entrypoint modal run script.py modal run script.py modal run For example, if you have a function decorated with@stub.function()in your file: @stub.function() @stub.function() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py @stub.function() def f print ""Hello world!"" @stub.function() def g print ""Goodbye world!"" @stub.local_entrypoint() def main Copy Copy    Copy Runningmodal run script.pywill execute themainfunction locally, which would call theffunction remotely. However you can
instead runmodal run script.py::stub.formodal run script.py::stub.gto
executeforgdirectly. modal run script.py modal run script.py main f modal run script.py::stub.f modal run script.py::stub.g f g Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypoints Ephemeral apps Deployed apps Entrypoints for ephemeral apps Argument parsing Manually specifying an entrypoint CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",An entrypoint is the code that runs first when an app is executed. 
3,What does modal run do with arguments in an entrypoint function?,Apps stubs and entrypoints Entrypoints for ephemeral apps,"The code that runs first when youmodal runan app is called the entrypoint. modal run You can register a local entrypoint using the@stub.local_entrypoint()decorator. You can also use a regular Modal function as an entrypoint, in which
case only the code in global scope is executed locally. @stub.local_entrypoint() @stub.local_entrypoint() Argument parsing If your entrypoint function take arguments with primitive types,modal runautomatically parses them as CLI options. For example, the following function
can be called withmodal run script.py --foo 1 --bar ""hello"": modal run modal run script.py --foo 1 --bar ""hello"" # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Manually specifying an entrypoint If there is only onelocal_entrypointregistered,modal run script.pywill automatically use it. If
you have no entrypoint specified, and just one decorated Modal function, that
will be used as a remote entrypoint instead. Otherwise, you can directmodal runto use a specific entrypoint. local_entrypoint modal run script.py modal run script.py modal run For example, if you have a function decorated with@stub.function()in your file: @stub.function() @stub.function() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py @stub.function() def f print ""Hello world!"" @stub.function() def g print ""Goodbye world!"" @stub.local_entrypoint() def main Copy Copy    Copy Runningmodal run script.pywill execute themainfunction locally, which would call theffunction remotely. However you can
instead runmodal run script.py::stub.formodal run script.py::stub.gto
executeforgdirectly. modal run script.py modal run script.py main f modal run script.py::stub.f modal run script.py::stub.g f g Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypoints Ephemeral apps Deployed apps Entrypoints for ephemeral apps Argument parsing Manually specifying an entrypoint CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If your entrypoint function takes arguments with primitive types, modal run automatically parses them as CLI options."
6,What happens when you run modal run script.py?,Apps stubs and entrypoints Entrypoints for ephemeral apps,"The code that runs first when youmodal runan app is called the entrypoint. modal run You can register a local entrypoint using the@stub.local_entrypoint()decorator. You can also use a regular Modal function as an entrypoint, in which
case only the code in global scope is executed locally. @stub.local_entrypoint() @stub.local_entrypoint() Argument parsing If your entrypoint function take arguments with primitive types,modal runautomatically parses them as CLI options. For example, the following function
can be called withmodal run script.py --foo 1 --bar ""hello"": modal run modal run script.py --foo 1 --bar ""hello"" # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Manually specifying an entrypoint If there is only onelocal_entrypointregistered,modal run script.pywill automatically use it. If
you have no entrypoint specified, and just one decorated Modal function, that
will be used as a remote entrypoint instead. Otherwise, you can directmodal runto use a specific entrypoint. local_entrypoint modal run script.py modal run script.py modal run For example, if you have a function decorated with@stub.function()in your file: @stub.function() @stub.function() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py @stub.function() def f print ""Hello world!"" @stub.function() def g print ""Goodbye world!"" @stub.local_entrypoint() def main Copy Copy    Copy Runningmodal run script.pywill execute themainfunction locally, which would call theffunction remotely. However you can
instead runmodal run script.py::stub.formodal run script.py::stub.gto
executeforgdirectly. modal run script.py modal run script.py main f modal run script.py::stub.f modal run script.py::stub.g f g Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypoints Ephemeral apps Deployed apps Entrypoints for ephemeral apps Argument parsing Manually specifying an entrypoint CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Running modal run script.py will execute the main function locally, which could call a function remotely depending on your script."
0,What is the entrypoint in code for ephemeral apps?,Apps stubs and entrypoints Entrypoints for ephemeral apps,"The code that runs first when youmodal runan app is called the entrypoint. modal run You can register a local entrypoint using the@stub.local_entrypoint()decorator. You can also use a regular Modal function as an entrypoint, in which
case only the code in global scope is executed locally. @stub.local_entrypoint() @stub.local_entrypoint() Argument parsing If your entrypoint function take arguments with primitive types,modal runautomatically parses them as CLI options. For example, the following function
can be called withmodal run script.py --foo 1 --bar ""hello"": modal run modal run script.py --foo 1 --bar ""hello"" # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Manually specifying an entrypoint If there is only onelocal_entrypointregistered,modal run script.pywill automatically use it. If
you have no entrypoint specified, and just one decorated Modal function, that
will be used as a remote entrypoint instead. Otherwise, you can directmodal runto use a specific entrypoint. local_entrypoint modal run script.py modal run script.py modal run For example, if you have a function decorated with@stub.function()in your file: @stub.function() @stub.function() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py @stub.function() def f print ""Hello world!"" @stub.function() def g print ""Goodbye world!"" @stub.local_entrypoint() def main Copy Copy    Copy Runningmodal run script.pywill execute themainfunction locally, which would call theffunction remotely. However you can
instead runmodal run script.py::stub.formodal run script.py::stub.gto
executeforgdirectly. modal run script.py modal run script.py main f modal run script.py::stub.f modal run script.py::stub.g f g Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypoints Ephemeral apps Deployed apps Entrypoints for ephemeral apps Argument parsing Manually specifying an entrypoint CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The entrypoint is the code that runs first when you run an app.
3,What happens if an entrypoint function takes arguments with primitive types?,Apps stubs and entrypoints Entrypoints for ephemeral apps,"The code that runs first when youmodal runan app is called the entrypoint. modal run You can register a local entrypoint using the@stub.local_entrypoint()decorator. You can also use a regular Modal function as an entrypoint, in which
case only the code in global scope is executed locally. @stub.local_entrypoint() @stub.local_entrypoint() Argument parsing If your entrypoint function take arguments with primitive types,modal runautomatically parses them as CLI options. For example, the following function
can be called withmodal run script.py --foo 1 --bar ""hello"": modal run modal run script.py --foo 1 --bar ""hello"" # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Manually specifying an entrypoint If there is only onelocal_entrypointregistered,modal run script.pywill automatically use it. If
you have no entrypoint specified, and just one decorated Modal function, that
will be used as a remote entrypoint instead. Otherwise, you can directmodal runto use a specific entrypoint. local_entrypoint modal run script.py modal run script.py modal run For example, if you have a function decorated with@stub.function()in your file: @stub.function() @stub.function() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py @stub.function() def f print ""Hello world!"" @stub.function() def g print ""Goodbye world!"" @stub.local_entrypoint() def main Copy Copy    Copy Runningmodal run script.pywill execute themainfunction locally, which would call theffunction remotely. However you can
instead runmodal run script.py::stub.formodal run script.py::stub.gto
executeforgdirectly. modal run script.py modal run script.py main f modal run script.py::stub.f modal run script.py::stub.g f g Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypoints Ephemeral apps Deployed apps Entrypoints for ephemeral apps Argument parsing Manually specifying an entrypoint CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If your entrypoint function takes arguments with primitive types, modal run automatically parses them as CLI options."
6,How can you direct modal run to use a specific entrypoint?,Apps stubs and entrypoints Entrypoints for ephemeral apps,"The code that runs first when youmodal runan app is called the entrypoint. modal run You can register a local entrypoint using the@stub.local_entrypoint()decorator. You can also use a regular Modal function as an entrypoint, in which
case only the code in global scope is executed locally. @stub.local_entrypoint() @stub.local_entrypoint() Argument parsing If your entrypoint function take arguments with primitive types,modal runautomatically parses them as CLI options. For example, the following function
can be called withmodal run script.py --foo 1 --bar ""hello"": modal run modal run script.py --foo 1 --bar ""hello"" # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py@stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) # script.py @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Manually specifying an entrypoint If there is only onelocal_entrypointregistered,modal run script.pywill automatically use it. If
you have no entrypoint specified, and just one decorated Modal function, that
will be used as a remote entrypoint instead. Otherwise, you can directmodal runto use a specific entrypoint. local_entrypoint modal run script.py modal run script.py modal run For example, if you have a function decorated with@stub.function()in your file: @stub.function() @stub.function() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call()Copy # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py@stub.function()deff():print(""Hello world!"")@stub.function()defg():print(""Goodbye world!"")@stub.local_entrypoint()defmain():
    f.call() # script.py @stub.function() def f print ""Hello world!"" @stub.function() def g print ""Goodbye world!"" @stub.local_entrypoint() def main Copy Copy    Copy Runningmodal run script.pywill execute themainfunction locally, which would call theffunction remotely. However you can
instead runmodal run script.py::stub.formodal run script.py::stub.gto
executeforgdirectly. modal run script.py modal run script.py main f modal run script.py::stub.f modal run script.py::stub.g f g Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypointsEphemeral appsDeployed appsEntrypoints for ephemeral appsArgument parsingManually specifying an entrypoint Apps, stubs, and entrypoints Ephemeral apps Deployed apps Entrypoints for ephemeral apps Argument parsing Manually specifying an entrypoint CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can direct modal run to use a specific entrypoint by manually specifying it.
0,What commission posts datasets with all trips in New York City?,Use DuckDB to analyze lots of datasets in parallel,"The Taxi and Limousine Commission of NYC postsdatasetswith all trips in New York City.
They are all Parquet files, which are very well suited forDuckDBwhich has excellentParquet support.
In fact, DuckDB lets us query remote Parquet dataover HTTPwhich is excellent for what we want to do here. datasets DuckDB Parquet support over HTTP Running this script should generate a plot like this in just 10-20 seconds,
processing a few gigabytes of data:   ",The Taxi and Limousine Commission of NYC.
3,Which platform has excellent support for Parquet files?,Use DuckDB to analyze lots of datasets in parallel,"The Taxi and Limousine Commission of NYC postsdatasetswith all trips in New York City.
They are all Parquet files, which are very well suited forDuckDBwhich has excellentParquet support.
In fact, DuckDB lets us query remote Parquet dataover HTTPwhich is excellent for what we want to do here. datasets DuckDB Parquet support over HTTP Running this script should generate a plot like this in just 10-20 seconds,
processing a few gigabytes of data:   ",DuckDB has excellent Parquet support.
6,What is the expected outcome of running the DuckDB script?,Use DuckDB to analyze lots of datasets in parallel,"The Taxi and Limousine Commission of NYC postsdatasetswith all trips in New York City.
They are all Parquet files, which are very well suited forDuckDBwhich has excellentParquet support.
In fact, DuckDB lets us query remote Parquet dataover HTTPwhich is excellent for what we want to do here. datasets DuckDB Parquet support over HTTP Running this script should generate a plot like this in just 10-20 seconds,
processing a few gigabytes of data:   ","Running this script should generate a plot in just 10-20 seconds, processing a few gigabytes of data."
0,What does the DuckDB get_data function do?,Use DuckDB to analyze lots of datasets in parallel DuckDB Modal function,"Defining the function that queries the data.
This lets us run a SQL query against a remote Parquet file over HTTP
Our query is pretty simple: it just aggregates total count numbers by date,
but we also have some filters that remove garbage data (days that are outside
the range). @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function() def get_data year, month import f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet"" {year:04d} {month:02d} print ""processing"" ""..."" "":memory:"" ""install httpfs"" #TODO:bake into the image TODO: ""load httpfs"" """"""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """""" return list Copy Copy    Copy ","It analyzes a dataset from a specified url based on the given year and month, filtering out inappropriate data, and returning a list of collected data."
3,What is the output of the get_data function?,Use DuckDB to analyze lots of datasets in parallel DuckDB Modal function,"Defining the function that queries the data.
This lets us run a SQL query against a remote Parquet file over HTTP
Our query is pretty simple: it just aggregates total count numbers by date,
but we also have some filters that remove garbage data (days that are outside
the range). @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function() def get_data year, month import f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet"" {year:04d} {month:02d} print ""processing"" ""..."" "":memory:"" ""install httpfs"" #TODO:bake into the image TODO: ""load httpfs"" """"""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """""" return list Copy Copy    Copy ",The output of the get_data function is a list of aggregated total count numbers by date.
6,What kind of file is read through the get_data function?,Use DuckDB to analyze lots of datasets in parallel DuckDB Modal function,"Defining the function that queries the data.
This lets us run a SQL query against a remote Parquet file over HTTP
Our query is pretty simple: it just aggregates total count numbers by date,
but we also have some filters that remove garbage data (days that are outside
the range). @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall())Copy @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function()defget_data(year, month):importduckdb

    url =f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet""print(""processing"", url,""..."")

    con = duckdb.connect(database="":memory:"")
    con.execute(""install httpfs"")#TODO:bake into the imagecon.execute(""load httpfs"")
    q =""""""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """"""con.execute(q, (url, year, month))returnlist(con.fetchall()) @stub.function() def get_data year, month import f""https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year:04d}-{month:02d}.parquet"" {year:04d} {month:02d} print ""processing"" ""..."" "":memory:"" ""install httpfs"" #TODO:bake into the image TODO: ""load httpfs"" """"""
    with sub as (
        select tpep_pickup_datetime::date d, count(1) c
        from read_parquet(?)
        group by 1
    )
    select d, c from sub
    where date_part('year', d) = ?  -- filter out garbage
    and date_part('month', d) = ?   -- same
    """""" return list Copy Copy    Copy ",A Parquet file is read through the get_data function.
0,What function is used to analyze lots of datasets in parallel and plot the results?,Use DuckDB to analyze lots of datasets in parallel Plot results,"Let’s define a separate function which: Parallelizes over all files and dispatches calls to the previous functionAggregate the data and plot the result Parallelizes over all files and dispatches calls to the previous function Aggregate the data and plot the result @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function() def create_plot from import # Map over all inputs and combine the data for in range 2018 2023 for in range 1 13 if 2022 6 list list tuple int for in range 7 # Initialize a list for every weekday for in for in # Initialize plotting ""ggplot"" 16 9 # For each weekday, plot for in enumerate ""Mon"" ""Tue"" ""Wed"" ""Thu"" ""Fri"" ""Sat"" ""Sun"" for in for in 3 0.8 # Plot annotations ""Number of NYC yellow taxi trips by weekday, 2018-2022"" ""Number of daily trips"" # Dump PNG and return with as format ""png"" 300 return Copy Copy    Copy ",The function create_plot() is used to analyze lots of datasets in parallel and plot the results.
3,What are the weekdays used for the plot labels?,Use DuckDB to analyze lots of datasets in parallel Plot results,"Let’s define a separate function which: Parallelizes over all files and dispatches calls to the previous functionAggregate the data and plot the result Parallelizes over all files and dispatches calls to the previous function Aggregate the data and plot the result @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function() def create_plot from import # Map over all inputs and combine the data for in range 2018 2023 for in range 1 13 if 2022 6 list list tuple int for in range 7 # Initialize a list for every weekday for in for in # Initialize plotting ""ggplot"" 16 9 # For each weekday, plot for in enumerate ""Mon"" ""Tue"" ""Wed"" ""Thu"" ""Fri"" ""Sat"" ""Sun"" for in for in 3 0.8 # Plot annotations ""Number of NYC yellow taxi trips by weekday, 2018-2022"" ""Number of daily trips"" # Dump PNG and return with as format ""png"" 300 return Copy Copy    Copy ","The weekdays used for the plot labels are ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun""."
6,In what format and resolution is the plot saved?,Use DuckDB to analyze lots of datasets in parallel Plot results,"Let’s define a separate function which: Parallelizes over all files and dispatches calls to the previous functionAggregate the data and plot the result Parallelizes over all files and dispatches calls to the previous function Aggregate the data and plot the result @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defcreate_plot():frommatplotlibimportpyplot# Map over all inputs and combine the datainputs = [
        (year, month)foryearinrange(2018,2023)formonthinrange(1,13)if(year, month) <= (2022,6)
    ]
    data:list[list[tuple[datetime,int]]] = [
        []foriinrange(7)
    ]# Initialize a list for every weekdayforringet_data.starmap(inputs):ford, cinr:
            data[d.weekday()].append((d, c))# Initialize plottingpyplot.style.use(""ggplot"")
    pyplot.figure(figsize=(16,9))# For each weekday, plotfori, weekdayinenumerate(
        [""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat"",""Sun""]
    ):
        data[i].sort()
        dates = [dford, _indata[i]]
        counts = [cfor_, cindata[i]]
        pyplot.plot(dates, counts, linewidth=3, alpha=0.8, label=weekday)# Plot annotationspyplot.title(""Number of NYC yellow taxi trips by weekday, 2018-2022"")
    pyplot.ylabel(""Number of daily trips"")
    pyplot.legend()
    pyplot.tight_layout()# Dump PNG and returnwithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function() def create_plot from import # Map over all inputs and combine the data for in range 2018 2023 for in range 1 13 if 2022 6 list list tuple int for in range 7 # Initialize a list for every weekday for in for in # Initialize plotting ""ggplot"" 16 9 # For each weekday, plot for in enumerate ""Mon"" ""Tue"" ""Wed"" ""Thu"" ""Fri"" ""Sat"" ""Sun"" for in for in 3 0.8 # Plot annotations ""Number of NYC yellow taxi trips by weekday, 2018-2022"" ""Number of daily trips"" # Dump PNG and return with as format ""png"" 300 return Copy Copy    Copy ",The plot is saved in PNG format with a resolution of 300 dpi.
0,What is the purpose of the code presented in the content?,Use DuckDB to analyze lots of datasets in parallel Entrypoint,"Finally, we have some simple entrypoint code that kicks everything off.
Note that the plotting function returns raw PNG data that we store locally. Run this local entrypoint withmodal run. modal run @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint() def main ""/tmp/nyc"" True ""nyc_taxi_chart.png"" with open ""wb"" as print f""wrote output to{fn}"" {fn} Copy Copy    Copy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypoint Use DuckDB to analyze lots of datasets in parallel Basic setup DuckDB Modal function Plot results Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy ","The purpose of the code is to create a plot of a dataset analysis, save it as a PNG file, and store it locally in a specified directory."
3,Where is the resulting PNG file stored?,Use DuckDB to analyze lots of datasets in parallel Entrypoint,"Finally, we have some simple entrypoint code that kicks everything off.
Note that the plotting function returns raw PNG data that we store locally. Run this local entrypoint withmodal run. modal run @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint() def main ""/tmp/nyc"" True ""nyc_taxi_chart.png"" with open ""wb"" as print f""wrote output to{fn}"" {fn} Copy Copy    Copy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypoint Use DuckDB to analyze lots of datasets in parallel Basic setup DuckDB Modal function Plot results Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy ","The PNG file is stored in the directory ""/tmp/nyc"" under the filename ""nyc_taxi_chart.png""."
6,"What does the command ""$modal setup"" do based on the provided context?",Use DuckDB to analyze lots of datasets in parallel Entrypoint,"Finally, we have some simple entrypoint code that kicks everything off.
Note that the plotting function returns raw PNG data that we store locally. Run this local entrypoint withmodal run. modal run @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint() def main ""/tmp/nyc"" True ""nyc_taxi_chart.png"" with open ""wb"" as print f""wrote output to{fn}"" {fn} Copy Copy    Copy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypoint Use DuckDB to analyze lots of datasets in parallel Basic setup DuckDB Modal function Plot results Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy ","Based on the context, the command ""$modal setup"" probably sets up or configures Modal, likely as part of its installation process."
0,What is DuckDB used for in this context?,Use DuckDB to analyze lots of datasets in parallel Entrypoint,"Finally, we have some simple entrypoint code that kicks everything off.
Note that the plotting function returns raw PNG data that we store locally. Run this local entrypoint withmodal run. modal run @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint() def main ""/tmp/nyc"" True ""nyc_taxi_chart.png"" with open ""wb"" as print f""wrote output to{fn}"" {fn} Copy Copy    Copy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypoint Use DuckDB to analyze lots of datasets in parallel Basic setup DuckDB Modal function Plot results Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/duckdb_nyc_taxi.py $ modal run 10_integrations/duckdb_nyc_taxi.py modal run 10_integrations/duckdb_nyc_taxi.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",DuckDB is used to analyze lots of datasets in parallel.
3,How can one run this locally?,Use DuckDB to analyze lots of datasets in parallel Entrypoint,"Finally, we have some simple entrypoint code that kicks everything off.
Note that the plotting function returns raw PNG data that we store locally. Run this local entrypoint withmodal run. modal run @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint() def main ""/tmp/nyc"" True ""nyc_taxi_chart.png"" with open ""wb"" as print f""wrote output to{fn}"" {fn} Copy Copy    Copy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypoint Use DuckDB to analyze lots of datasets in parallel Basic setup DuckDB Modal function Plot results Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/duckdb_nyc_taxi.py $ modal run 10_integrations/duckdb_nyc_taxi.py modal run 10_integrations/duckdb_nyc_taxi.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",One can run this locally by using the command 'modal run'.
6,What does the repository 'modal-examples' contain?,Use DuckDB to analyze lots of datasets in parallel Entrypoint,"Finally, we have some simple entrypoint code that kicks everything off.
Note that the plotting function returns raw PNG data that we store locally. Run this local entrypoint withmodal run. modal run @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"")Copy @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint()defmain():
    output_dir =""/tmp/nyc""os.makedirs(output_dir, exist_ok=True)

    fn = os.path.join(output_dir,""nyc_taxi_chart.png"")
    png_data = create_plot.remote()withopen(fn,""wb"")asf:
        f.write(png_data)print(f""wrote output to{fn}"") @stub.local_entrypoint() def main ""/tmp/nyc"" True ""nyc_taxi_chart.png"" with open ""wb"" as print f""wrote output to{fn}"" {fn} Copy Copy    Copy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Use DuckDB to analyze lots of datasets in parallelBasic setupDuckDB Modal functionPlot resultsEntrypoint Use DuckDB to analyze lots of datasets in parallel Basic setup DuckDB Modal function Plot results Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/duckdb_nyc_taxi.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/duckdb_nyc_taxi.py $ modal run 10_integrations/duckdb_nyc_taxi.py modal run 10_integrations/duckdb_nyc_taxi.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'modal-examples' repository contains the necessary code and examples to run the DuckDB analysis and modal setup.
0,What does this tutorial teach you how to use Modal for?,Document OCR web app,"This tutorial shows you how to use Modal to deploy a fully serverlessReact+FastAPIapplication.
We’re going to build a simple “Receipt Parser” web app that submits OCR transcription
tasks to a separate Modal app defined in theJob Queue
tutorial, polls until the task is completed, and displays
the results. Try it out for yourselfhere. React FastAPI Job Queue
tutorial here   ",This tutorial teaches how to use Modal to deploy a fully serverless React+FastAPI application.
3,What happens after the OCR transcription task is submitted to the separate Modal app?,Document OCR web app,"This tutorial shows you how to use Modal to deploy a fully serverlessReact+FastAPIapplication.
We’re going to build a simple “Receipt Parser” web app that submits OCR transcription
tasks to a separate Modal app defined in theJob Queue
tutorial, polls until the task is completed, and displays
the results. Try it out for yourselfhere. React FastAPI Job Queue
tutorial here   ","After the OCR transcription task is submitted to the separate Modal app, the tutorial instructs to poll until the task is completed and then display the results."
6,What is the Job Queue tutorial in the context of the React FastAPI application?,Document OCR web app,"This tutorial shows you how to use Modal to deploy a fully serverlessReact+FastAPIapplication.
We’re going to build a simple “Receipt Parser” web app that submits OCR transcription
tasks to a separate Modal app defined in theJob Queue
tutorial, polls until the task is completed, and displays
the results. Try it out for yourselfhere. React FastAPI Job Queue
tutorial here   ",The job queue tutorial is the guide followed in order to define a separate Modal app for submitting OCR transcription tasks.
0,What is the purpose of the two endpoints in Document OCR web app?,Document OCR web app Define endpoints,"We need two endpoints: one to accept an image and submit it to the Modal job queue,
and another to poll for the results of the job. Inparse, we’re going to submit tasks to the function defined in theJob
Queue tutorial, so we import it first usingFunction.lookup. parse Job
Queue tutorial Function.lookup Function.lookup We call.spawn()on the function handle
we imported above, to kick off our function without blocking on the results.spawnreturns
a unique ID for the function call, that we can use later to poll for its result. .spawn() .spawn() spawn @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"") ""/parse"" ""/parse"" async def parse request: fastapi.Request ""example-doc-ocr-jobs"" ""parse_receipt"" await await ""receipt"" # type: ignore return ""call_id"" Copy Copy    Copy /resultuses the providedcall_idto instantiate amodal.FunctionCallobject, and attempt
to get its result. If the call hasn’t finished yet, we return a202status code, which indicates
that the server is still working on the job. /result call_id modal.FunctionCall 202 @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str from import try 0 except return """" 202 return Copy Copy    Copy Finally, we mount the static files for our front-end. We’ve madea simple React
appthat hits the two endpoints defined above. To package these files with our app, first
we get the local assets path, and then create a modalMountthat mounts this directory at/assetsinside our container. Then, we instruct FastAPI toserve
this static file directoryat our root path. a simple React
app Mount Mount /assets serve
this static file directory assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app ""doc_ocr_frontend"" @stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")]) mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")] assets_path, remote_path=""/assets"" ""/assets"" @asgi_app() def wrapper ""/"" ""/assets"" True return Copy Copy    Copy ","One is to accept an image and submit it to the Modal job queue, and another is to poll for the results of the job."
3,What is the purpose of the .spawn() method in the Document OCR web app?,Document OCR web app Define endpoints,"We need two endpoints: one to accept an image and submit it to the Modal job queue,
and another to poll for the results of the job. Inparse, we’re going to submit tasks to the function defined in theJob
Queue tutorial, so we import it first usingFunction.lookup. parse Job
Queue tutorial Function.lookup Function.lookup We call.spawn()on the function handle
we imported above, to kick off our function without blocking on the results.spawnreturns
a unique ID for the function call, that we can use later to poll for its result. .spawn() .spawn() spawn @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"") ""/parse"" ""/parse"" async def parse request: fastapi.Request ""example-doc-ocr-jobs"" ""parse_receipt"" await await ""receipt"" # type: ignore return ""call_id"" Copy Copy    Copy /resultuses the providedcall_idto instantiate amodal.FunctionCallobject, and attempt
to get its result. If the call hasn’t finished yet, we return a202status code, which indicates
that the server is still working on the job. /result call_id modal.FunctionCall 202 @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str from import try 0 except return """" 202 return Copy Copy    Copy Finally, we mount the static files for our front-end. We’ve madea simple React
appthat hits the two endpoints defined above. To package these files with our app, first
we get the local assets path, and then create a modalMountthat mounts this directory at/assetsinside our container. Then, we instruct FastAPI toserve
this static file directoryat our root path. a simple React
app Mount Mount /assets serve
this static file directory assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app ""doc_ocr_frontend"" @stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")]) mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")] assets_path, remote_path=""/assets"" ""/assets"" @asgi_app() def wrapper ""/"" ""/assets"" True return Copy Copy    Copy ",The .spawn() method is used to kick off a function without blocking on the results and it returns a unique ID for the function call
6,How does the Document OCR web app serve the front-end static files?,Document OCR web app Define endpoints,"We need two endpoints: one to accept an image and submit it to the Modal job queue,
and another to poll for the results of the job. Inparse, we’re going to submit tasks to the function defined in theJob
Queue tutorial, so we import it first usingFunction.lookup. parse Job
Queue tutorial Function.lookup Function.lookup We call.spawn()on the function handle
we imported above, to kick off our function without blocking on the results.spawnreturns
a unique ID for the function call, that we can use later to poll for its result. .spawn() .spawn() spawn @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id}Copy @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"")asyncdefparse(request: fastapi.Request):
    parse_receipt = Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")

    form =awaitrequest.form()
    receipt =awaitform[""receipt""].read()# type: ignorecall = parse_receipt.spawn(receipt)return{""call_id"": call.object_id} @web_app.post(""/parse"") ""/parse"" ""/parse"" async def parse request: fastapi.Request ""example-doc-ocr-jobs"" ""parse_receipt"" await await ""receipt"" # type: ignore return ""call_id"" Copy Copy    Copy /resultuses the providedcall_idto instantiate amodal.FunctionCallobject, and attempt
to get its result. If the call hasn’t finished yet, we return a202status code, which indicates
that the server is still working on the job. /result call_id modal.FunctionCall 202 @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresultCopy @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):frommodal.functionsimportFunctionCall

    function_call = FunctionCall.from_id(call_id)try:
        result = function_call.get(timeout=0)exceptTimeoutError:returnfastapi.responses.JSONResponse(content="""", status_code=202)returnresult @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str from import try 0 except return """" 202 return Copy Copy    Copy Finally, we mount the static files for our front-end. We’ve madea simple React
appthat hits the two endpoints defined above. To package these files with our app, first
we get the local assets path, and then create a modalMountthat mounts this directory at/assetsinside our container. Then, we instruct FastAPI toserve
this static file directoryat our root path. a simple React
app Mount Mount /assets serve
this static file directory assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app assets_path = Path(__file__).parent /""doc_ocr_frontend""@stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")])@asgi_app()defwrapper():
    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app ""doc_ocr_frontend"" @stub.function(mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")]) mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")] assets_path, remote_path=""/assets"" ""/assets"" @asgi_app() def wrapper ""/"" ""/assets"" True return Copy Copy    Copy ","First, it gets the local assets path, then creates a modal Mount that mounts this directory at /assets inside the container. Next, FastAPI is instructed to serve this static file directory at the root path."
0,What is the command needed to run the Document OCR web app?,Document OCR web app Running,"You can run this as an ephemeral app, by running the command modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.py modal serve doc_ocr_webapp.py modal serve doc_ocr_webapp.py Copy Copy    Copy ","The command needed is ""modal serve doc_ocr_webapp.py""."
3,What is the nature of the Document OCR web app?,Document OCR web app Running,"You can run this as an ephemeral app, by running the command modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.py modal serve doc_ocr_webapp.py modal serve doc_ocr_webapp.py Copy Copy    Copy ",The Document OCR web app is ephemeral.
6,Can the command to run the Document OCR web app be copied?,Document OCR web app Running,"You can run this as an ephemeral app, by running the command modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.pyCopy modal serve doc_ocr_webapp.py modal serve doc_ocr_webapp.py modal serve doc_ocr_webapp.py Copy Copy    Copy ","Yes, the command ""modal serve doc_ocr_webapp.py"" can be copied."
0,What is the command to deploy the document OCR web app?,Document OCR web app Deploy,"That’s all! To deploy your application, run modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.py modal deploy doc_ocr_webapp.py modal deploy doc_ocr_webapp.py Copy Copy    Copy If successful, this will print a URL for your app, that you can navigate to from
your browser 🎉 .   ",The command is 'modal deploy doc_ocr_webapp.py'
3,What can you do after obtaining the URL for your newly deployed OCR web app?,Document OCR web app Deploy,"That’s all! To deploy your application, run modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.py modal deploy doc_ocr_webapp.py modal deploy doc_ocr_webapp.py Copy Copy    Copy If successful, this will print a URL for your app, that you can navigate to from
your browser 🎉 .   ",You can navigate to this URL from your browser.
6,What does 'OCR' in Doc OCR Web App stand for?,Document OCR web app Deploy,"That’s all! To deploy your application, run modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.pyCopy modal deploy doc_ocr_webapp.py modal deploy doc_ocr_webapp.py modal deploy doc_ocr_webapp.py Copy Copy    Copy If successful, this will print a URL for your app, that you can navigate to from
your browser 🎉 .   ",'OCR' stands for Optical Character Recognition.
0,What is the main function of the Document OCR web app?,Document OCR web app Developing,"If desired, instead of deploying, we canserveour app ephemerally. In this case, Modal watches all the mounted files, and updates
the app if anything changes. serve Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDeveloping Document OCR web app Basic setup Define endpoints Running Deploy Developing Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy ",The main function of the Document OCR web app is to serve and update the app based on changes made to the mounted files.
3,What needs to be done to run the example on Modal?,Document OCR web app Developing,"If desired, instead of deploying, we canserveour app ephemerally. In this case, Modal watches all the mounted files, and updates
the app if anything changes. serve Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDeveloping Document OCR web app Basic setup Define endpoints Running Deploy Developing Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy ","To run the example on Modal, first create a free account, install the Modal Python package, and create an API token."
6,Which repository should be cloned to run the web app?,Document OCR web app Developing,"If desired, instead of deploying, we canserveour app ephemerally. In this case, Modal watches all the mounted files, and updates
the app if anything changes. serve Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDeveloping Document OCR web app Basic setup Define endpoints Running Deploy Developing Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy ","To run the web app, clone the ""modal-examples"" repository from GitHub."
0,What can be watched in the Document OCR web app development?,Document OCR web app Developing,"If desired, instead of deploying, we canserveour app ephemerally. In this case, Modal watches all the mounted files, and updates
the app if anything changes. serve Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDeveloping Document OCR web app Basic setup Define endpoints Running Deploy Developing Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 09_job_queues/doc_ocr_webapp.py $ modal run 09_job_queues/doc_ocr_webapp.py modal run 09_job_queues/doc_ocr_webapp.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",All the mounted files can be watched in the Document OCR web app development.
3,What is needed to start working with Modal?,Document OCR web app Developing,"If desired, instead of deploying, we canserveour app ephemerally. In this case, Modal watches all the mounted files, and updates
the app if anything changes. serve Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDeveloping Document OCR web app Basic setup Define endpoints Running Deploy Developing Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 09_job_queues/doc_ocr_webapp.py $ modal run 09_job_queues/doc_ocr_webapp.py modal run 09_job_queues/doc_ocr_webapp.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","To start working with Modal, one must first create a free account, install the Modal Python package, and create an API token."
6,"What are the contents present on the webpage of 'Modal Labs, Inc. '?",Document OCR web app Developing,"If desired, instead of deploying, we canserveour app ephemerally. In this case, Modal watches all the mounted files, and updates
the app if anything changes. serve Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDevelopingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Document OCR web appBasic setupDefine endpointsRunningDeployDeveloping Document OCR web app Basic setup Define endpoints Running Deploy Developing Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_webapp.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 09_job_queues/doc_ocr_webapp.py $ modal run 09_job_queues/doc_ocr_webapp.py modal run 09_job_queues/doc_ocr_webapp.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","Some of the contents present on the webpage of 'Modal Labs, Inc. ' include the company's examples, documentation, pricing and legal information."
0,What does Modal do if a preemption event interrupts a running function?,Preemption,"All Modal functions are subject to preemption. If a preemption event interrupts
a running function, Modal will gracefully terminate the function and restart it
on the same input. Preemptions are rare, but it is always possible that your function is
interrupted. Long-running functions such as model training functions should take
particular care tolerate interruptions as likelihood of interruption increases
with function runtime. ",Modal will gracefully terminate the function and restart it on the same input.
3,What type of functions should be especially wary of interruptions?,Preemption,"All Modal functions are subject to preemption. If a preemption event interrupts
a running function, Modal will gracefully terminate the function and restart it
on the same input. Preemptions are rare, but it is always possible that your function is
interrupted. Long-running functions such as model training functions should take
particular care tolerate interruptions as likelihood of interruption increases
with function runtime. ",Long-running functions such as model training functions should take particular care to tolerate interruptions.
6,What increases the likelihood of function interruption?,Preemption,"All Modal functions are subject to preemption. If a preemption event interrupts
a running function, Modal will gracefully terminate the function and restart it
on the same input. Preemptions are rare, but it is always possible that your function is
interrupted. Long-running functions such as model training functions should take
particular care tolerate interruptions as likelihood of interruption increases
with function runtime. ",The likelihood of interruption increases with function runtime.
0,What feature is currently being planned for functions?,Preemption Running uninterruptible functions,"We currently don’t have a way for functions to avoid the possibility of
interruption, but it’s a planned feature. If you require functions guaranteed to
run without interruption, please reach out! PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions Preemption Preparing for interruptions Running uninterruptible functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",A feature to avoid the possibility of interruption. 
3,"What is © 2023 Modal Labs, Inc. related to?",Preemption Running uninterruptible functions,"We currently don’t have a way for functions to avoid the possibility of
interruption, but it’s a planned feature. If you require functions guaranteed to
run without interruption, please reach out! PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions Preemption Preparing for interruptions Running uninterruptible functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","This is the copyright notice for Modal Labs, Inc."
6,What does the script do at the end of the content?,Preemption Running uninterruptible functions,"We currently don’t have a way for functions to avoid the possibility of
interruption, but it’s a planned feature. If you require functions guaranteed to
run without interruption, please reach out! PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions Preemption Preparing for interruptions Running uninterruptible functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The script imports a couple of modules from ""../../_app/immutable/entry/"" and then calls the start function with the imported app module, element, and some other parameters."
0,What is currently lacking in the way functions are run according to the text?,Preemption Running uninterruptible functions,"We currently don’t have a way for functions to avoid the possibility of
interruption, but it’s a planned feature. If you require functions guaranteed to
run without interruption, please reach out! PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions Preemption Preparing for interruptions Running uninterruptible functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The current system lacks a way for functions to avoid the possibility of interruption.
3,What should one do if they require functions guaranteed to run without interruption?,Preemption Running uninterruptible functions,"We currently don’t have a way for functions to avoid the possibility of
interruption, but it’s a planned feature. If you require functions guaranteed to
run without interruption, please reach out! PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions Preemption Preparing for interruptions Running uninterruptible functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",They should reach out to the relevant authorities or support.
6,"When is the copyright year of Modal Labs, Inc. according to the text?",Preemption Running uninterruptible functions,"We currently don’t have a way for functions to avoid the possibility of
interruption, but it’s a planned feature. If you require functions guaranteed to
run without interruption, please reach out! PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions PreemptionPreparing for interruptionsRunning uninterruptible functions Preemption Preparing for interruptions Running uninterruptible functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The copyright year is 2023.
0,What is the procedure if one needs to expose functions as web endpoints in Modal?,Web endpoints,"Modal gives you a few ways to expose functions as web endpoints. You canturn any Modal function into a web endpointwith a single line
of code, or you canserve a full appusing a
framework like FastAPI, Django, or Flask. turn any Modal function into a web endpoint serve a full app →All web endpoints on Modal have a limit of100 requests per second
(rps).Get in touchif you need higher limits. → 100 requests per second
(rps) Get in touch Note that if you wish to invoke a Modal function from another Python
application, you can deploy andinvoke the functiondirectly with our
client library. Note that if you wish to invoke a Modal function from another Python
application, you can deploy andinvoke the functiondirectly with our
client library. invoke the function ","You can turn any Modal function into a web endpoint with a single line of code, or you can serve a full app using a framework like FastAPI, Django, or Flask."
3,What is one supposed to do if they need higher limits on Modal's web endpoints?,Web endpoints,"Modal gives you a few ways to expose functions as web endpoints. You canturn any Modal function into a web endpointwith a single line
of code, or you canserve a full appusing a
framework like FastAPI, Django, or Flask. turn any Modal function into a web endpoint serve a full app →All web endpoints on Modal have a limit of100 requests per second
(rps).Get in touchif you need higher limits. → 100 requests per second
(rps) Get in touch Note that if you wish to invoke a Modal function from another Python
application, you can deploy andinvoke the functiondirectly with our
client library. Note that if you wish to invoke a Modal function from another Python
application, you can deploy andinvoke the functiondirectly with our
client library. invoke the function ",You should get in touch with Modal if you need higher limits.
6,Are there any specific frameworks recommended for serving a full app in Modal?,Web endpoints,"Modal gives you a few ways to expose functions as web endpoints. You canturn any Modal function into a web endpointwith a single line
of code, or you canserve a full appusing a
framework like FastAPI, Django, or Flask. turn any Modal function into a web endpoint serve a full app →All web endpoints on Modal have a limit of100 requests per second
(rps).Get in touchif you need higher limits. → 100 requests per second
(rps) Get in touch Note that if you wish to invoke a Modal function from another Python
application, you can deploy andinvoke the functiondirectly with our
client library. Note that if you wish to invoke a Modal function from another Python
application, you can deploy andinvoke the functiondirectly with our
client library. invoke the function ","Yes, you can serve a full app using frameworks like FastAPI, Django, or Flask."
0,What command can you run to create an ephemeral app?,Web endpoints Developing with modal serve,"modal serve You can run this code as an ephemeral app, by running the command modal serve server_script.pyCopy modal serve server_script.pyCopy modal serve server_script.pyCopy modal serve server_script.py modal serve server_script.py modal serve server_script.py Copy Copy    Copy Whereserver_script.pyis the file name of your code. This will create an
ephemeral app for the duration of your script (until you hit Ctrl-C to stop it).
It creates a temporary URL that you can use like any other REST endpoint. This
URL is on the public internet. server_script.py Theservecommand (which you can also call programmatically usingstub.serve(), will live update an app when any of the supporting files change. serve stub.serve() Live updating is particularly useful when working with apps containing web
endpoints, as any changes made to web endpoint handlers will show up almost
immediately, without requiring a manual restart of the app. ",You can run the command 'modal serve server_script.py' to create an ephemeral app.
3,"In this context, what does the 'serve' command do?",Web endpoints Developing with modal serve,"modal serve You can run this code as an ephemeral app, by running the command modal serve server_script.pyCopy modal serve server_script.pyCopy modal serve server_script.pyCopy modal serve server_script.py modal serve server_script.py modal serve server_script.py Copy Copy    Copy Whereserver_script.pyis the file name of your code. This will create an
ephemeral app for the duration of your script (until you hit Ctrl-C to stop it).
It creates a temporary URL that you can use like any other REST endpoint. This
URL is on the public internet. server_script.py Theservecommand (which you can also call programmatically usingstub.serve(), will live update an app when any of the supporting files change. serve stub.serve() Live updating is particularly useful when working with apps containing web
endpoints, as any changes made to web endpoint handlers will show up almost
immediately, without requiring a manual restart of the app. ","The 'serve' command, which can also be called programmatically using 'stub.serve()', live updates an app when any of the supporting files change."
6,What file does the command 'modal serve server_script.py' specifically refer to?,Web endpoints Developing with modal serve,"modal serve You can run this code as an ephemeral app, by running the command modal serve server_script.pyCopy modal serve server_script.pyCopy modal serve server_script.pyCopy modal serve server_script.py modal serve server_script.py modal serve server_script.py Copy Copy    Copy Whereserver_script.pyis the file name of your code. This will create an
ephemeral app for the duration of your script (until you hit Ctrl-C to stop it).
It creates a temporary URL that you can use like any other REST endpoint. This
URL is on the public internet. server_script.py Theservecommand (which you can also call programmatically usingstub.serve(), will live update an app when any of the supporting files change. serve stub.serve() Live updating is particularly useful when working with apps containing web
endpoints, as any changes made to web endpoint handlers will show up almost
immediately, without requiring a manual restart of the app. ",The 'modal serve server_script.py' command refers to the 'server_script.py' as the file name of your code.
0,How can I deploy my app and create a persistent web endpoint in the cloud?,Web endpoints Deploying a web server,"You can also deploy your app and create a persistent web endpoint in the cloud
by runningmodal deploy: modal deploy  ",By runningmodal deploy: modal deploy
1,What command do I use to deploy my app and create a persistent web endpoint in the cloud?,Web endpoints Deploying a web server,"You can also deploy your app and create a persistent web endpoint in the cloud
by runningmodal deploy: modal deploy  ",Run: modal deploy: modal deploy
2,What is the operation to create a persistent web endpoint in the cloud for my app?,Web endpoints Deploying a web server,"You can also deploy your app and create a persistent web endpoint in the cloud
by runningmodal deploy: modal deploy  ",The operation is runningmodal deploy: modal deploy
3,What method should I use to publish my app on a web server?,Web endpoints Deploying a web server,"You can also deploy your app and create a persistent web endpoint in the cloud
by runningmodal deploy: modal deploy  ",You should use the runningmodal deploy: modal deploy method.
4,What does running 'modal deploy: modal deploy' do?,Web endpoints Deploying a web server,"You can also deploy your app and create a persistent web endpoint in the cloud
by runningmodal deploy: modal deploy  ",It deploys your app and creates a persistent web endpoint in the cloud.
0,What is the purpose of @web_endpoint decorator?,Web endpoints Passing arguments to web endpoints,"When using@web_endpoint, you can usequery parameters just like in FastAPIwhich will be passed to your function as arguments. For instance @web_endpoint query parameters just like in FastAPI frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} from import @stub.function() @web_endpoint() def square x:int int return ""square"" 2 Copy Copy    Copy If you hit this with an urlencoded query string with the “x” param present, it
will send that to the function: % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} Copy Copy    Copy If you want to use aPOSTrequest, you can use themethodargument to@web_endpointto set the HTTP verb. To accept any valid JSON, you canuseDictas your type annotationand FastAPI will handle the rest. POST method @web_endpoint useDictas your type annotation Dict fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} from import Dict from import @stub.function() @web_endpoint(method=""POST"") method=""POST"" ""POST"" def square item:Dict Dict return ""square"" 'x' 2 Copy Copy    Copy This now creates an endpoint that lets us hit it using JSON: % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} Copy Copy    Copy This is often the easiest way to get started, but note that FastAPI recommends
that you usetyped Pydantic modelsin order to
get automatic validation and documentation. FastAPI also lets you pass data to
web endpoints in other ways, for instance asform dataandfile uploads. typed Pydantic models form data file uploads ",The @web_endpoint decorator is used to pass arguments to your function through query parameters. 
3,How can you set the HTTP verb for a POST request in FastAPI?,Web endpoints Passing arguments to web endpoints,"When using@web_endpoint, you can usequery parameters just like in FastAPIwhich will be passed to your function as arguments. For instance @web_endpoint query parameters just like in FastAPI frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} from import @stub.function() @web_endpoint() def square x:int int return ""square"" 2 Copy Copy    Copy If you hit this with an urlencoded query string with the “x” param present, it
will send that to the function: % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} Copy Copy    Copy If you want to use aPOSTrequest, you can use themethodargument to@web_endpointto set the HTTP verb. To accept any valid JSON, you canuseDictas your type annotationand FastAPI will handle the rest. POST method @web_endpoint useDictas your type annotation Dict fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} from import Dict from import @stub.function() @web_endpoint(method=""POST"") method=""POST"" ""POST"" def square item:Dict Dict return ""square"" 'x' 2 Copy Copy    Copy This now creates an endpoint that lets us hit it using JSON: % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} Copy Copy    Copy This is often the easiest way to get started, but note that FastAPI recommends
that you usetyped Pydantic modelsin order to
get automatic validation and documentation. FastAPI also lets you pass data to
web endpoints in other ways, for instance asform dataandfile uploads. typed Pydantic models form data file uploads ",You can use the 'method' argument to @web_endpoint to set the HTTP verb for a POST request.
6,What does the @stub.function() decorator do in this context?,Web endpoints Passing arguments to web endpoints,"When using@web_endpoint, you can usequery parameters just like in FastAPIwhich will be passed to your function as arguments. For instance @web_endpoint query parameters just like in FastAPI frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()defsquare(x:int):return{""square"": x**2} from import @stub.function() @web_endpoint() def square x:int int return ""square"" 2 Copy Copy    Copy If you hit this with an urlencoded query string with the “x” param present, it
will send that to the function: % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-get-py-square-erikbern-dev.modal.run?x=42'
{""square"":1764} Copy Copy    Copy If you want to use aPOSTrequest, you can use themethodargument to@web_endpointto set the HTTP verb. To accept any valid JSON, you canuseDictas your type annotationand FastAPI will handle the rest. POST method @web_endpoint useDictas your type annotation Dict fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2}Copy fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} fromtypingimportDictfrommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint(method=""POST"")defsquare(item:Dict):return{""square"": item['x']**2} from import Dict from import @stub.function() @web_endpoint(method=""POST"") method=""POST"" ""POST"" def square item:Dict Dict return ""square"" 'x' 2 Copy Copy    Copy This now creates an endpoint that lets us hit it using JSON: % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764}Copy % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} % curl 'https://modal-labs--web-endpoint-post-py-square-erikbern-dev.modal.run' -X POST -H 'Content-Type: application/json' -d '{""x"": 42}'
{""square"":1764} Copy Copy    Copy This is often the easiest way to get started, but note that FastAPI recommends
that you usetyped Pydantic modelsin order to
get automatic validation and documentation. FastAPI also lets you pass data to
web endpoints in other ways, for instance asform dataandfile uploads. typed Pydantic models form data file uploads ",The @stub.function() decorator defines a function that will be used with @web_endpoint for processing requests.
0,What are web endpoints in the context of Modal and how do they run?,Web endpoints How do web endpoints run in the cloud,"Note that web endpoints, like everything else on Modal, only run when they need
to. When you hit the web endpoint the first time, it will boot up the container,
which might take a few seconds. Modal keeps the container alive for a short
period in case there are subsequent requests. If there are a lot of requests,
Modal might create more containers running in parallel. Under the hood, Modal wraps your function in aFastAPIapplication, and so functions you write
need to follow the same request and responsesemantics. This also means you can use
all of FastAPI’s powerful features, such as Pydantic models for automatic
validation, typed query and path parameters, and response types. FastAPI semantics For long running web endpoints (taking more than 150s to complete), Modal by
default uses chains of HTTP redirects to keep each request reasonably short
lived. For more information seeWeb endpoint timeouts. Web endpoint timeouts ","Web endpoints in Modal only run when they need to. They boot up the container when hit the first time and keep it alive for a brief period. If many requests come in, Modal might create more containers running parallel."
3,What software is used to wrap functions in Modal and what features does it provide?,Web endpoints How do web endpoints run in the cloud,"Note that web endpoints, like everything else on Modal, only run when they need
to. When you hit the web endpoint the first time, it will boot up the container,
which might take a few seconds. Modal keeps the container alive for a short
period in case there are subsequent requests. If there are a lot of requests,
Modal might create more containers running in parallel. Under the hood, Modal wraps your function in aFastAPIapplication, and so functions you write
need to follow the same request and responsesemantics. This also means you can use
all of FastAPI’s powerful features, such as Pydantic models for automatic
validation, typed query and path parameters, and response types. FastAPI semantics For long running web endpoints (taking more than 150s to complete), Modal by
default uses chains of HTTP redirects to keep each request reasonably short
lived. For more information seeWeb endpoint timeouts. Web endpoint timeouts ","Modal wraps your function in a FastAPI application, this software provides features like automatic validation (with Pydantic models), typed queries and path parameters, and response types."
6,How does Modal handle long running web endpoints?,Web endpoints How do web endpoints run in the cloud,"Note that web endpoints, like everything else on Modal, only run when they need
to. When you hit the web endpoint the first time, it will boot up the container,
which might take a few seconds. Modal keeps the container alive for a short
period in case there are subsequent requests. If there are a lot of requests,
Modal might create more containers running in parallel. Under the hood, Modal wraps your function in aFastAPIapplication, and so functions you write
need to follow the same request and responsesemantics. This also means you can use
all of FastAPI’s powerful features, such as Pydantic models for automatic
validation, typed query and path parameters, and response types. FastAPI semantics For long running web endpoints (taking more than 150s to complete), Modal by
default uses chains of HTTP redirects to keep each request reasonably short
lived. For more information seeWeb endpoint timeouts. Web endpoint timeouts ","For long running web endpoints, Modal by default uses chains of HTTP redirects to keep each request reasonably short-lived, in order to avoid exceeding web endpoint timeouts."
0,What is a web endpoint in the context of this code?,Web endpoints More complex example,"Here’s everything together, combining Modal’s abilities to run functions in
user-defined containers with the expressivity of FastAPI: frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") from import from import from import ""boto3"" class Item BaseModel str int 42 @stub.function() @web_endpoint(method=""POST"") method=""POST"" ""POST"" def f item: Item import # do things with boto3... return f""<html>Hello,{item.name}!</html>"" {item.name} Copy Copy    Copy This endpoint definition would be called like so: curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run '{""name"": ""Erik"", ""qty"": 10}' ""Content-Type: application/json"" Copy Copy    Copy Or in Python with therequestslibrary: requests requests importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) import ""name"" ""Erik"" ""qty"" 10 ""https://ecorp--web-demo-f-dev.modal.run"" 10.0 Copy Copy    Copy ","A web endpoint is a specific URL where a web application or service can be accessed. In this code, the web_endpoint decorator is used to indicate the URL that triggers the execution of the function 'f'."
3,What is the role of the 'Image' class in this code?,Web endpoints More complex example,"Here’s everything together, combining Modal’s abilities to run functions in
user-defined containers with the expressivity of FastAPI: frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") from import from import from import ""boto3"" class Item BaseModel str int 42 @stub.function() @web_endpoint(method=""POST"") method=""POST"" ""POST"" def f item: Item import # do things with boto3... return f""<html>Hello,{item.name}!</html>"" {item.name} Copy Copy    Copy This endpoint definition would be called like so: curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run '{""name"": ""Erik"", ""qty"": 10}' ""Content-Type: application/json"" Copy Copy    Copy Or in Python with therequestslibrary: requests requests importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) import ""name"" ""Erik"" ""qty"" 10 ""https://ecorp--web-demo-f-dev.modal.run"" 10.0 Copy Copy    Copy ","In this code, the 'Image' class is used to define a specific environment, 'debian_slim', in which the function will be run. The 'pip_install(""boto3"")' method is used to add additional software to this environment."
6,What does the function 'f' return?,Web endpoints More complex example,"Here’s everything together, combining Modal’s abilities to run functions in
user-defined containers with the expressivity of FastAPI: frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"")Copy frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") frompydanticimportBaseModelfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, web_endpoint

image = Image.debian_slim().pip_install(""boto3"")
stub = Stub(image=image)classItem(BaseModel):
    name:strqty:int=42@stub.function()@web_endpoint(method=""POST"")deff(item: Item):importboto3# do things with boto3...returnHTMLResponse(f""<html>Hello,{item.name}!</html>"") from import from import from import ""boto3"" class Item BaseModel str int 42 @stub.function() @web_endpoint(method=""POST"") method=""POST"" ""POST"" def f item: Item import # do things with boto3... return f""<html>Hello,{item.name}!</html>"" {item.name} Copy Copy    Copy This endpoint definition would be called like so: curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.runCopy curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run curl -d'{""name"": ""Erik"", ""qty"": 10}'\
    -H""Content-Type: application/json""\
    -X POST https://ecorp--web-demo-f-dev.modal.run '{""name"": ""Erik"", ""qty"": 10}' ""Content-Type: application/json"" Copy Copy    Copy Or in Python with therequestslibrary: requests requests importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0)Copy importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) importrequests

data = {""name"":""Erik"",""qty"":10}
requests.post(""https://ecorp--web-demo-f-dev.modal.run"", json=data, timeout=10.0) import ""name"" ""Erik"" ""qty"" 10 ""https://ecorp--web-demo-f-dev.modal.run"" 10.0 Copy Copy    Copy ","The function 'f' returns an HTMLResponse that includes a greeting and the name passed in the 'Item'. The HTML response would look like ""<html>Hello,{item.name}!</html>""."
0,What is the difference between ASGI and WSGI apps?,Web endpoints Serving ASGI and WSGI apps,"You can also serve any app written in anASGIorWSGIcompatible
web application framework on Modal. ASGI WSGI ASGI provides support for async web applications. WSGI provides support for
synchronous web applications. ASGI For ASGI apps, you can create a function decorated with@modal.asgi_appthat returns a reference to
your web app: @modal.asgi_app @modal.asgi_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app from import from import from import ""boto3"" @web_app.post(""/foo"") ""/foo"" ""/foo"" async def foo request: Request await return @web_app.get(""/bar"") ""/bar"" ""/bar"" async def bar arg=""world"" ""world"" return f""<h1>Hello Fast{arg}!</h1>"" {arg} @stub.function(image=image) image=image @asgi_app() def fastapi_app return Copy Copy    Copy Now, as before, when you deploy this script as a modal app, you get a URL for
your app that you can use:  WSGI You can serve WSGI apps using the@modal.wsgi_appdecorator: @modal.wsgi_app @modal.wsgi_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app from import ""flask"" @stub.function(image=image) image=image @wsgi_app() def flask_app from import @web_app.get(""/"") ""/"" ""/"" def home return ""Hello Flask World!"" @web_app.post(""/echo"") ""/echo"" ""/echo"" def echo return return Copy Copy    Copy SeeFlask’s docsfor more information on using Flask as a WSGI app. Flask’s docs ",ASGI provides support for async web applications whereas WSGI provides support for synchronous web applications.
3,What is the role of @modal.wsgi_app decorator in WSGI apps?,Web endpoints Serving ASGI and WSGI apps,"You can also serve any app written in anASGIorWSGIcompatible
web application framework on Modal. ASGI WSGI ASGI provides support for async web applications. WSGI provides support for
synchronous web applications. ASGI For ASGI apps, you can create a function decorated with@modal.asgi_appthat returns a reference to
your web app: @modal.asgi_app @modal.asgi_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app from import from import from import ""boto3"" @web_app.post(""/foo"") ""/foo"" ""/foo"" async def foo request: Request await return @web_app.get(""/bar"") ""/bar"" ""/bar"" async def bar arg=""world"" ""world"" return f""<h1>Hello Fast{arg}!</h1>"" {arg} @stub.function(image=image) image=image @asgi_app() def fastapi_app return Copy Copy    Copy Now, as before, when you deploy this script as a modal app, you get a URL for
your app that you can use:  WSGI You can serve WSGI apps using the@modal.wsgi_appdecorator: @modal.wsgi_app @modal.wsgi_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app from import ""flask"" @stub.function(image=image) image=image @wsgi_app() def flask_app from import @web_app.get(""/"") ""/"" ""/"" def home return ""Hello Flask World!"" @web_app.post(""/echo"") ""/echo"" ""/echo"" def echo return return Copy Copy    Copy SeeFlask’s docsfor more information on using Flask as a WSGI app. Flask’s docs ",You can serve WSGI apps using the @modal.wsgi_app decorator.
6,What happens when the script is deployed as a modal app? ,Web endpoints Serving ASGI and WSGI apps,"You can also serve any app written in anASGIorWSGIcompatible
web application framework on Modal. ASGI WSGI ASGI provides support for async web applications. WSGI provides support for
synchronous web applications. ASGI For ASGI apps, you can create a function decorated with@modal.asgi_appthat returns a reference to
your web app: @modal.asgi_app @modal.asgi_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_appCopy fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app fromfastapiimportFastAPI, Requestfromfastapi.responsesimportHTMLResponsefrommodalimportImage, Stub, asgi_app

web_app = FastAPI()
stub = Stub()

image = Image.debian_slim().pip_install(""boto3"")@web_app.post(""/foo"")asyncdeffoo(request: Request):
    body =awaitrequest.json()returnbody@web_app.get(""/bar"")asyncdefbar(arg=""world""):returnHTMLResponse(f""<h1>Hello Fast{arg}!</h1>"")@stub.function(image=image)@asgi_app()deffastapi_app():returnweb_app from import from import from import ""boto3"" @web_app.post(""/foo"") ""/foo"" ""/foo"" async def foo request: Request await return @web_app.get(""/bar"") ""/bar"" ""/bar"" async def bar arg=""world"" ""world"" return f""<h1>Hello Fast{arg}!</h1>"" {arg} @stub.function(image=image) image=image @asgi_app() def fastapi_app return Copy Copy    Copy Now, as before, when you deploy this script as a modal app, you get a URL for
your app that you can use:  WSGI You can serve WSGI apps using the@modal.wsgi_appdecorator: @modal.wsgi_app @modal.wsgi_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_appCopy frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app frommodalimportImage, Stub, wsgi_app

stub = Stub()
image = Image.debian_slim().pip_install(""flask"")@stub.function(image=image)@wsgi_app()defflask_app():fromflaskimportFlask, request

    web_app = Flask(__name__)@web_app.get(""/"")defhome():return""Hello Flask World!""@web_app.post(""/echo"")defecho():returnrequest.jsonreturnweb_app from import ""flask"" @stub.function(image=image) image=image @wsgi_app() def flask_app from import @web_app.get(""/"") ""/"" ""/"" def home return ""Hello Flask World!"" @web_app.post(""/echo"") ""/echo"" ""/echo"" def echo return return Copy Copy    Copy SeeFlask’s docsfor more information on using Flask as a WSGI app. Flask’s docs ","When you deploy this script as a modal app, you get a URL for your app that you can use."
0,What is cold start performance?,Web endpoints Cold start performance,"Consult the guide page oncold start performancefor
more information on when functions incur cold start penalties, and how to
mitigate the impact of them. cold start performance ","Cold start performance refers to the situation when functions incur penalties, particularly in web endpoints."
3,What can the guide page provide about cold start performance?,Web endpoints Cold start performance,"Consult the guide page oncold start performancefor
more information on when functions incur cold start penalties, and how to
mitigate the impact of them. cold start performance ","The guide page can provide more information on when functions incur cold start penalties, and how to mitigate the impact of them."
6,When do functions incur cold start penalties?,Web endpoints Cold start performance,"Consult the guide page oncold start performancefor
more information on when functions incur cold start penalties, and how to
mitigate the impact of them. cold start performance ","Functions generally incur cold start penalties when they are invoked after being idle, the exact scenarios can be found in the guide page on cold start performance."
0,What is the suggested method to add authentication to web endpoints according to the content?,Web endpoints Authentication,"Modal doesn’t have an first class way to add authentication to web endpoints
yet. However, we support standard techniques for securing web servers. Token-based authentication This is easy to implement in whichever framework you’re using. For example, if
you’re using@modal.web_endpointor@modal.asgi_appwith FastAPI, you can
validate a Bearer token like this: @modal.web_endpoint @modal.asgi_app fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" from import from import from import ""auth-example"" @stub.function(secret=Secret.from_name(""my-web-auth-token"")) secret=Secret.from_name(""my-web-auth-token"") ""my-web-auth-token"" ""my-web-auth-token"" @web_endpoint() async def f request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme) auth_scheme import print ""AUTH_TOKEN"" if ""AUTH_TOKEN"" raise ""Incorrect bearer token"" ""WWW-Authenticate"" ""Bearer"" # Function body return ""success!"" Copy Copy    Copy This assumes you have aModal secretnamedmy-web-auth-tokencreated, with contents{AUTH_TOKEN: secret-random-token}.
Now, your endpoint will return a 401 status code except when you hit it with the
correctAuthorizationheader set (note that you have to prefix the token withBearer): Modal secret my-web-auth-token {AUTH_TOKEN: secret-random-token} Authorization Bearer curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run ""Authorization: Bearer secret-random-token"" Copy Copy    Copy Client IP address You can access the IP address of the client making the request. This can be used
for geolocation, whitelists, blacklists, and rate limits. frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" from import from import @stub.function() @web_endpoint() def get_ip_address request: Request return f""Your IP address is{request.client.host}"" {request.client.host} Copy Copy    Copy ",The content suggests using token-based authentication to secure web endpoints.
3,What does the endpoint return when it is hit with an incorrect authorization header?,Web endpoints Authentication,"Modal doesn’t have an first class way to add authentication to web endpoints
yet. However, we support standard techniques for securing web servers. Token-based authentication This is easy to implement in whichever framework you’re using. For example, if
you’re using@modal.web_endpointor@modal.asgi_appwith FastAPI, you can
validate a Bearer token like this: @modal.web_endpoint @modal.asgi_app fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" from import from import from import ""auth-example"" @stub.function(secret=Secret.from_name(""my-web-auth-token"")) secret=Secret.from_name(""my-web-auth-token"") ""my-web-auth-token"" ""my-web-auth-token"" @web_endpoint() async def f request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme) auth_scheme import print ""AUTH_TOKEN"" if ""AUTH_TOKEN"" raise ""Incorrect bearer token"" ""WWW-Authenticate"" ""Bearer"" # Function body return ""success!"" Copy Copy    Copy This assumes you have aModal secretnamedmy-web-auth-tokencreated, with contents{AUTH_TOKEN: secret-random-token}.
Now, your endpoint will return a 401 status code except when you hit it with the
correctAuthorizationheader set (note that you have to prefix the token withBearer): Modal secret my-web-auth-token {AUTH_TOKEN: secret-random-token} Authorization Bearer curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run ""Authorization: Bearer secret-random-token"" Copy Copy    Copy Client IP address You can access the IP address of the client making the request. This can be used
for geolocation, whitelists, blacklists, and rate limits. frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" from import from import @stub.function() @web_endpoint() def get_ip_address request: Request return f""Your IP address is{request.client.host}"" {request.client.host} Copy Copy    Copy ","The endpoint raises an HTTPException with a status code of 401 (Unauthorized), details saying ""Incorrect bearer token"", and headers stating ""WWW-Authenticate"":""Bearer""."
6,What are the potential applications of the client IP address in web development?,Web endpoints Authentication,"Modal doesn’t have an first class way to add authentication to web endpoints
yet. However, we support standard techniques for securing web servers. Token-based authentication This is easy to implement in whichever framework you’re using. For example, if
you’re using@modal.web_endpointor@modal.asgi_appwith FastAPI, you can
validate a Bearer token like this: @modal.web_endpoint @modal.asgi_app fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!""Copy fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" fromfastapiimportDepends, HTTPException, status, Requestfromfastapi.securityimportHTTPBearer, HTTPAuthorizationCredentialsfrommodalimportSecret, Stub, web_endpoint


stub = Stub(""auth-example"")

auth_scheme = HTTPBearer()@stub.function(secret=Secret.from_name(""my-web-auth-token""))@web_endpoint()asyncdeff(request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme)):importosprint(os.environ[""AUTH_TOKEN""])iftoken.credentials != os.environ[""AUTH_TOKEN""]:raiseHTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=""Incorrect bearer token"",
            headers={""WWW-Authenticate"":""Bearer""},
        )# Function bodyreturn""success!"" from import from import from import ""auth-example"" @stub.function(secret=Secret.from_name(""my-web-auth-token"")) secret=Secret.from_name(""my-web-auth-token"") ""my-web-auth-token"" ""my-web-auth-token"" @web_endpoint() async def f request: Request, token: HTTPAuthorizationCredentials = Depends(auth_scheme) auth_scheme import print ""AUTH_TOKEN"" if ""AUTH_TOKEN"" raise ""Incorrect bearer token"" ""WWW-Authenticate"" ""Bearer"" # Function body return ""success!"" Copy Copy    Copy This assumes you have aModal secretnamedmy-web-auth-tokencreated, with contents{AUTH_TOKEN: secret-random-token}.
Now, your endpoint will return a 401 status code except when you hit it with the
correctAuthorizationheader set (note that you have to prefix the token withBearer): Modal secret my-web-auth-token {AUTH_TOKEN: secret-random-token} Authorization Bearer curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.runCopy curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run curl --header""Authorization: Bearer secret-random-token""https://modal-labs--auth-example-f.modal.run ""Authorization: Bearer secret-random-token"" Copy Copy    Copy Client IP address You can access the IP address of the client making the request. This can be used
for geolocation, whitelists, blacklists, and rate limits. frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}""Copy frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" frommodalimportStub, web_endpointfromfastapiimportRequest

stub = Stub()@stub.function()@web_endpoint()defget_ip_address(request: Request):returnf""Your IP address is{request.client.host}"" from import from import @stub.function() @web_endpoint() def get_ip_address request: Request return f""Your IP address is{request.client.host}"" {request.client.host} Copy Copy    Copy ","Possible applications of the client's IP address include geolocation, whitelists, blacklists, and rate limits."
0,What are the types of domains that can be used with Modal?,Web endpoints Custom domains,"Custom domains are available on ourOrganization and Enterprise plans. Custom domains are available on ourOrganization and Enterprise plans. Organization and Enterprise plans You can use your own domain names with Modal web endpoints. If yourplansupports custom domains, visit theDomains tabin your workspace settings to add a domain name
to your workspace. plan Domains tab You can use three kinds of domains with Modal: Apex:root domain names likeexample.comSubdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc.Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Apex:root domain names likeexample.com Apex: example.com Subdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc. Subdomain: my-app.example.com api.example.com Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Wildcard domain: *.example.com *.modal.example.com You’ll be asked to update your domain DNS records with your domain name
registrar and then validate the configuration in Modal. Once the records have
been properly updated and propagated, your custom domain will be ready to use. You can assign any Modal web endpoint to any registered domain in your workspace
with thecustom_domainsargument. custom_domains frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example"" @stub.function() @web_endpoint(custom_domains=[""api.example.com""]) custom_domains=[""api.example.com""] ""api.example.com"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy You can then runmodal serveormodal deployto put your web endpoint
online, live. modal serve modal deploy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $ curl -s https://api.example.com?message=world Copy Copy    Copy Note that Modal automatically generates and renews TLS certificates for your
custom domains. Since we do this when your domain is first accessed, there may
be an additional 1-2s latency on the first request. Additional requests use a
cached certificate. You can also register multiple domain names and associate them with the same web
endpoint. frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example-2"" @stub.function() @web_endpoint(custom_domains=[""api.example.com"",""api.example.net""]) custom_domains=[""api.example.com"",""api.example.net""] ""api.example.com"" ""api.example.net"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy ForWildcarddomains, Modal will automatically resolve arbitrary custom
endpoints (and issue TLS certificates). For example, if you add the wildcard
domain*.example.com, then you can create any custom domains underexample.com: Wildcard *.example.com example.com importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} import from import ""custom-domains-example-2"" range 10 @stub.function() @web_endpoint(custom_domains=[f""{random_domain_name}.example.com""]) custom_domains=[f""{random_domain_name}.example.com""] f""{random_domain_name}.example.com"" {random_domain_name} def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy Custom domains can also be used withASGIorWSGIapps using the samecustom_domainsargument. ASGI WSGI custom_domains Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domains Web endpoints @web_endpoint Developing with modal serve Deploying a web server Passing arguments to web endpoints How do web endpoints run in the cloud? More complex example Serving ASGI and WSGI apps ASGI WSGI Cold start performance Authentication Token-based authentication Client IP address Custom domains Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web apps LLM Voice Chat (React) LLM Voice Chat (React) LLM Voice Chat (React)     Stable Diffusion (Alpine) Stable Diffusion (Alpine) Stable Diffusion (Alpine)     Music Generation (React) Music Generation (React) Music Generation (React)     Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React)     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","You can use Apex or root domain names, Subdomain entries, and Wildcard domains with Modal."
3,What is required to verify your custom domain in Modal?,Web endpoints Custom domains,"Custom domains are available on ourOrganization and Enterprise plans. Custom domains are available on ourOrganization and Enterprise plans. Organization and Enterprise plans You can use your own domain names with Modal web endpoints. If yourplansupports custom domains, visit theDomains tabin your workspace settings to add a domain name
to your workspace. plan Domains tab You can use three kinds of domains with Modal: Apex:root domain names likeexample.comSubdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc.Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Apex:root domain names likeexample.com Apex: example.com Subdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc. Subdomain: my-app.example.com api.example.com Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Wildcard domain: *.example.com *.modal.example.com You’ll be asked to update your domain DNS records with your domain name
registrar and then validate the configuration in Modal. Once the records have
been properly updated and propagated, your custom domain will be ready to use. You can assign any Modal web endpoint to any registered domain in your workspace
with thecustom_domainsargument. custom_domains frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example"" @stub.function() @web_endpoint(custom_domains=[""api.example.com""]) custom_domains=[""api.example.com""] ""api.example.com"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy You can then runmodal serveormodal deployto put your web endpoint
online, live. modal serve modal deploy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $ curl -s https://api.example.com?message=world Copy Copy    Copy Note that Modal automatically generates and renews TLS certificates for your
custom domains. Since we do this when your domain is first accessed, there may
be an additional 1-2s latency on the first request. Additional requests use a
cached certificate. You can also register multiple domain names and associate them with the same web
endpoint. frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example-2"" @stub.function() @web_endpoint(custom_domains=[""api.example.com"",""api.example.net""]) custom_domains=[""api.example.com"",""api.example.net""] ""api.example.com"" ""api.example.net"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy ForWildcarddomains, Modal will automatically resolve arbitrary custom
endpoints (and issue TLS certificates). For example, if you add the wildcard
domain*.example.com, then you can create any custom domains underexample.com: Wildcard *.example.com example.com importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} import from import ""custom-domains-example-2"" range 10 @stub.function() @web_endpoint(custom_domains=[f""{random_domain_name}.example.com""]) custom_domains=[f""{random_domain_name}.example.com""] f""{random_domain_name}.example.com"" {random_domain_name} def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy Custom domains can also be used withASGIorWSGIapps using the samecustom_domainsargument. ASGI WSGI custom_domains Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domains Web endpoints @web_endpoint Developing with modal serve Deploying a web server Passing arguments to web endpoints How do web endpoints run in the cloud? More complex example Serving ASGI and WSGI apps ASGI WSGI Cold start performance Authentication Token-based authentication Client IP address Custom domains Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web apps LLM Voice Chat (React) LLM Voice Chat (React) LLM Voice Chat (React)     Stable Diffusion (Alpine) Stable Diffusion (Alpine) Stable Diffusion (Alpine)     Music Generation (React) Music Generation (React) Music Generation (React)     Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React)     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You need to update your domain DNS records with your domain name registrar and then validate the configuration in Modal.
6,Can you associate multiple domain names with the same web endpoint in Modal?,Web endpoints Custom domains,"Custom domains are available on ourOrganization and Enterprise plans. Custom domains are available on ourOrganization and Enterprise plans. Organization and Enterprise plans You can use your own domain names with Modal web endpoints. If yourplansupports custom domains, visit theDomains tabin your workspace settings to add a domain name
to your workspace. plan Domains tab You can use three kinds of domains with Modal: Apex:root domain names likeexample.comSubdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc.Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Apex:root domain names likeexample.com Apex: example.com Subdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc. Subdomain: my-app.example.com api.example.com Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Wildcard domain: *.example.com *.modal.example.com You’ll be asked to update your domain DNS records with your domain name
registrar and then validate the configuration in Modal. Once the records have
been properly updated and propagated, your custom domain will be ready to use. You can assign any Modal web endpoint to any registered domain in your workspace
with thecustom_domainsargument. custom_domains frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example"" @stub.function() @web_endpoint(custom_domains=[""api.example.com""]) custom_domains=[""api.example.com""] ""api.example.com"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy You can then runmodal serveormodal deployto put your web endpoint
online, live. modal serve modal deploy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $ curl -s https://api.example.com?message=world Copy Copy    Copy Note that Modal automatically generates and renews TLS certificates for your
custom domains. Since we do this when your domain is first accessed, there may
be an additional 1-2s latency on the first request. Additional requests use a
cached certificate. You can also register multiple domain names and associate them with the same web
endpoint. frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example-2"" @stub.function() @web_endpoint(custom_domains=[""api.example.com"",""api.example.net""]) custom_domains=[""api.example.com"",""api.example.net""] ""api.example.com"" ""api.example.net"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy ForWildcarddomains, Modal will automatically resolve arbitrary custom
endpoints (and issue TLS certificates). For example, if you add the wildcard
domain*.example.com, then you can create any custom domains underexample.com: Wildcard *.example.com example.com importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} import from import ""custom-domains-example-2"" range 10 @stub.function() @web_endpoint(custom_domains=[f""{random_domain_name}.example.com""]) custom_domains=[f""{random_domain_name}.example.com""] f""{random_domain_name}.example.com"" {random_domain_name} def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy Custom domains can also be used withASGIorWSGIapps using the samecustom_domainsargument. ASGI WSGI custom_domains Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domains Web endpoints @web_endpoint Developing with modal serve Deploying a web server Passing arguments to web endpoints How do web endpoints run in the cloud? More complex example Serving ASGI and WSGI apps ASGI WSGI Cold start performance Authentication Token-based authentication Client IP address Custom domains Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web apps LLM Voice Chat (React) LLM Voice Chat (React) LLM Voice Chat (React)     Stable Diffusion (Alpine) Stable Diffusion (Alpine) Stable Diffusion (Alpine)     Music Generation (React) Music Generation (React) Music Generation (React)     Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React)     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Yes, you can register multiple domain names and associate them with the same web endpoint in Modal."
0,What are the types of domains I can use with Modal?,Web endpoints Custom domains,"Custom domains are available on ourOrganization and Enterprise plans. Custom domains are available on ourOrganization and Enterprise plans. Organization and Enterprise plans You can use your own domain names with Modal web endpoints. If yourplansupports custom domains, visit theDomains tabin your workspace settings to add a domain name
to your workspace. plan Domains tab You can use three kinds of domains with Modal: Apex:root domain names likeexample.comSubdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc.Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Apex:root domain names likeexample.com Apex: example.com Subdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc. Subdomain: my-app.example.com api.example.com Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Wildcard domain: *.example.com *.modal.example.com You’ll be asked to update your domain DNS records with your domain name
registrar and then validate the configuration in Modal. Once the records have
been properly updated and propagated, your custom domain will be ready to use. You can assign any Modal web endpoint to any registered domain in your workspace
with thecustom_domainsargument. custom_domains frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example"" @stub.function() @web_endpoint(custom_domains=[""api.example.com""]) custom_domains=[""api.example.com""] ""api.example.com"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy You can then runmodal serveormodal deployto put your web endpoint
online, live. modal serve modal deploy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $ curl -s https://api.example.com?message=world Copy Copy    Copy Note that Modal automatically generates and renews TLS certificates for your
custom domains. Since we do this when your domain is first accessed, there may
be an additional 1-2s latency on the first request. Additional requests use a
cached certificate. You can also register multiple domain names and associate them with the same web
endpoint. frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example-2"" @stub.function() @web_endpoint(custom_domains=[""api.example.com"",""api.example.net""]) custom_domains=[""api.example.com"",""api.example.net""] ""api.example.com"" ""api.example.net"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy ForWildcarddomains, Modal will automatically resolve arbitrary custom
endpoints (and issue TLS certificates). For example, if you add the wildcard
domain*.example.com, then you can create any custom domains underexample.com: Wildcard *.example.com example.com importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} import from import ""custom-domains-example-2"" range 10 @stub.function() @web_endpoint(custom_domains=[f""{random_domain_name}.example.com""]) custom_domains=[f""{random_domain_name}.example.com""] f""{random_domain_name}.example.com"" {random_domain_name} def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy Custom domains can also be used withASGIorWSGIapps using the samecustom_domainsargument. ASGI WSGI custom_domains Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domains Web endpoints @web_endpoint Developing with modal serve Deploying a web server Passing arguments to web endpoints How do web endpoints run in the cloud? More complex example Serving ASGI and WSGI apps ASGI WSGI Cold start performance Authentication Token-based authentication Client IP address Custom domains Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web apps LLM Voice Chat (React) LLM Voice Chat (React) LLM Voice Chat (React)     Stable Diffusion (Alpine) Stable Diffusion (Alpine) Stable Diffusion (Alpine)     Music Generation (React) Music Generation (React) Music Generation (React)     Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React)     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","You can use three kinds of domains with Modal: Apex (root domain names like example.com), Subdomain (single subdomain entries such as my-app.example.com, api.example.com, etc.), and Wildcard domain (either in a subdomain like *.example.com, or in a deeper level like *.modal.example.com)."
3,Can I assign any Modal web endpoint to any registered domain in my workspace?,Web endpoints Custom domains,"Custom domains are available on ourOrganization and Enterprise plans. Custom domains are available on ourOrganization and Enterprise plans. Organization and Enterprise plans You can use your own domain names with Modal web endpoints. If yourplansupports custom domains, visit theDomains tabin your workspace settings to add a domain name
to your workspace. plan Domains tab You can use three kinds of domains with Modal: Apex:root domain names likeexample.comSubdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc.Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Apex:root domain names likeexample.com Apex: example.com Subdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc. Subdomain: my-app.example.com api.example.com Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Wildcard domain: *.example.com *.modal.example.com You’ll be asked to update your domain DNS records with your domain name
registrar and then validate the configuration in Modal. Once the records have
been properly updated and propagated, your custom domain will be ready to use. You can assign any Modal web endpoint to any registered domain in your workspace
with thecustom_domainsargument. custom_domains frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example"" @stub.function() @web_endpoint(custom_domains=[""api.example.com""]) custom_domains=[""api.example.com""] ""api.example.com"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy You can then runmodal serveormodal deployto put your web endpoint
online, live. modal serve modal deploy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $ curl -s https://api.example.com?message=world Copy Copy    Copy Note that Modal automatically generates and renews TLS certificates for your
custom domains. Since we do this when your domain is first accessed, there may
be an additional 1-2s latency on the first request. Additional requests use a
cached certificate. You can also register multiple domain names and associate them with the same web
endpoint. frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example-2"" @stub.function() @web_endpoint(custom_domains=[""api.example.com"",""api.example.net""]) custom_domains=[""api.example.com"",""api.example.net""] ""api.example.com"" ""api.example.net"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy ForWildcarddomains, Modal will automatically resolve arbitrary custom
endpoints (and issue TLS certificates). For example, if you add the wildcard
domain*.example.com, then you can create any custom domains underexample.com: Wildcard *.example.com example.com importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} import from import ""custom-domains-example-2"" range 10 @stub.function() @web_endpoint(custom_domains=[f""{random_domain_name}.example.com""]) custom_domains=[f""{random_domain_name}.example.com""] f""{random_domain_name}.example.com"" {random_domain_name} def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy Custom domains can also be used withASGIorWSGIapps using the samecustom_domainsargument. ASGI WSGI custom_domains Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domains Web endpoints @web_endpoint Developing with modal serve Deploying a web server Passing arguments to web endpoints How do web endpoints run in the cloud? More complex example Serving ASGI and WSGI apps ASGI WSGI Cold start performance Authentication Token-based authentication Client IP address Custom domains Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web apps LLM Voice Chat (React) LLM Voice Chat (React) LLM Voice Chat (React)     Stable Diffusion (Alpine) Stable Diffusion (Alpine) Stable Diffusion (Alpine)     Music Generation (React) Music Generation (React) Music Generation (React)     Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React)     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Yes, you can assign any Modal web endpoint to any registered domain in your workspace with the custom_domains argument."
6,What happens when my domain is first accessed in Modal?,Web endpoints Custom domains,"Custom domains are available on ourOrganization and Enterprise plans. Custom domains are available on ourOrganization and Enterprise plans. Organization and Enterprise plans You can use your own domain names with Modal web endpoints. If yourplansupports custom domains, visit theDomains tabin your workspace settings to add a domain name
to your workspace. plan Domains tab You can use three kinds of domains with Modal: Apex:root domain names likeexample.comSubdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc.Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Apex:root domain names likeexample.com Apex: example.com Subdomain:single subdomain entries such asmy-app.example.com,api.example.com, etc. Subdomain: my-app.example.com api.example.com Wildcard domain:either in a subdomain like*.example.com, or in a
deeper level like*.modal.example.com Wildcard domain: *.example.com *.modal.example.com You’ll be asked to update your domain DNS records with your domain name
registrar and then validate the configuration in Modal. Once the records have
been properly updated and propagated, your custom domain will be ready to use. You can assign any Modal web endpoint to any registered domain in your workspace
with thecustom_domainsargument. custom_domains frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example"")@stub.function()@web_endpoint(custom_domains=[""api.example.com""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example"" @stub.function() @web_endpoint(custom_domains=[""api.example.com""]) custom_domains=[""api.example.com""] ""api.example.com"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy You can then runmodal serveormodal deployto put your web endpoint
online, live. modal serve modal deploy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""}Copy $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $curl -s https://api.example.com?message=world{""message"": ""hello world""} $ curl -s https://api.example.com?message=world Copy Copy    Copy Note that Modal automatically generates and renews TLS certificates for your
custom domains. Since we do this when your domain is first accessed, there may
be an additional 1-2s latency on the first request. Additional requests use a
cached certificate. You can also register multiple domain names and associate them with the same web
endpoint. frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""}Copy frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} frommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")@stub.function()@web_endpoint(custom_domains=[""api.example.com"",""api.example.net""])defhello(message:str):return{""message"":f""hello{message}""} from import ""custom-domains-example-2"" @stub.function() @web_endpoint(custom_domains=[""api.example.com"",""api.example.net""]) custom_domains=[""api.example.com"",""api.example.net""] ""api.example.com"" ""api.example.net"" def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy ForWildcarddomains, Modal will automatically resolve arbitrary custom
endpoints (and issue TLS certificates). For example, if you add the wildcard
domain*.example.com, then you can create any custom domains underexample.com: Wildcard *.example.com example.com importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""}Copy importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} importrandomfrommodalimportStub, web_endpoint

stub = Stub(""custom-domains-example-2"")

random_domain_name = random.choice(range(10))@stub.function()@web_endpoint(custom_domains=[f""{random_domain_name}.example.com""])defhello(message:str):return{""message"":f""hello{message}""} import from import ""custom-domains-example-2"" range 10 @stub.function() @web_endpoint(custom_domains=[f""{random_domain_name}.example.com""]) custom_domains=[f""{random_domain_name}.example.com""] f""{random_domain_name}.example.com"" {random_domain_name} def hello message:str str return ""message"" f""hello{message}"" {message} Copy Copy    Copy Custom domains can also be used withASGIorWSGIapps using the samecustom_domainsargument. ASGI WSGI custom_domains Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domainsFully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Web endpoints@web_endpointDeveloping with modal serveDeploying a web serverPassing arguments to web endpointsHow do web endpoints run in the cloud?More complex exampleServing ASGI and WSGI appsASGIWSGICold start performanceAuthenticationToken-based authenticationClient IP addressCustom domains Web endpoints @web_endpoint Developing with modal serve Deploying a web server Passing arguments to web endpoints How do web endpoints run in the cloud? More complex example Serving ASGI and WSGI apps ASGI WSGI Cold start performance Authentication Token-based authentication Client IP address Custom domains Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web appsLLM Voice Chat (React)Stable Diffusion (Alpine)Music Generation (React)Whisper Podcast Transcriber (React) Fully featured web apps LLM Voice Chat (React) LLM Voice Chat (React) LLM Voice Chat (React)     Stable Diffusion (Alpine) Stable Diffusion (Alpine) Stable Diffusion (Alpine)     Music Generation (React) Music Generation (React) Music Generation (React)     Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React) Whisper Podcast Transcriber (React)     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","When your domain is first accessed, Modal automatically generates and renews TLS certificates for your custom domains. Because of this, there may be an additional 1-2 seconds latency on the first request. Additional requests use a cached certificate."
0,What is the main topic of the document?,Security at Modal,The document outlines Modal’s security commitments. ,The main topic of the document is Modal's security commitments.
3,Who provides the outlined security commitments?,Security at Modal,The document outlines Modal’s security commitments. ,Modal provides the outlined security commitments.
6,Whose security is committed by Modal as per the document?,Security at Modal,The document outlines Modal’s security commitments. ,"As per the document, Modals commits to their own security."
0,What is the main focus of standards such as SOC2 within CorpSec?,Security at Modal Corporate Security CorpSec,"CorpSec is the practice of making sure Modal employees have secure access to
Modal company infrastructure, and also that exposed channels to Modal are
secured. CorpSec controls are the primary concern of standards such as SOC2. Access to our services and applications is gated on a SSO Identity Provider
(IdP).We mandata phishing-resistant multi-factor authentication (MFA) in all
enrolled IdP accounts.We regularly audit access to internal systems.Employee laptops are protected by full disk encryption using FileVault2, and
managed by Secureframe MDM. Access to our services and applications is gated on a SSO Identity Provider
(IdP). We mandata phishing-resistant multi-factor authentication (MFA) in all
enrolled IdP accounts. We regularly audit access to internal systems. Employee laptops are protected by full disk encryption using FileVault2, and
managed by Secureframe MDM. ",The primary concern of standards such as SOC2 within CorpSec is the control of secure access for Modal employees.
3,What type of multi-factor authentication is mandated in all enrolled IdP accounts?,Security at Modal Corporate Security CorpSec,"CorpSec is the practice of making sure Modal employees have secure access to
Modal company infrastructure, and also that exposed channels to Modal are
secured. CorpSec controls are the primary concern of standards such as SOC2. Access to our services and applications is gated on a SSO Identity Provider
(IdP).We mandata phishing-resistant multi-factor authentication (MFA) in all
enrolled IdP accounts.We regularly audit access to internal systems.Employee laptops are protected by full disk encryption using FileVault2, and
managed by Secureframe MDM. Access to our services and applications is gated on a SSO Identity Provider
(IdP). We mandata phishing-resistant multi-factor authentication (MFA) in all
enrolled IdP accounts. We regularly audit access to internal systems. Employee laptops are protected by full disk encryption using FileVault2, and
managed by Secureframe MDM. ",Phishing-resistant multi-factor authentication (MFA) is mandated in all enrolled IdP accounts.
6,How are employee laptops protected at Modal?,Security at Modal Corporate Security CorpSec,"CorpSec is the practice of making sure Modal employees have secure access to
Modal company infrastructure, and also that exposed channels to Modal are
secured. CorpSec controls are the primary concern of standards such as SOC2. Access to our services and applications is gated on a SSO Identity Provider
(IdP).We mandata phishing-resistant multi-factor authentication (MFA) in all
enrolled IdP accounts.We regularly audit access to internal systems.Employee laptops are protected by full disk encryption using FileVault2, and
managed by Secureframe MDM. Access to our services and applications is gated on a SSO Identity Provider
(IdP). We mandata phishing-resistant multi-factor authentication (MFA) in all
enrolled IdP accounts. We regularly audit access to internal systems. Employee laptops are protected by full disk encryption using FileVault2, and
managed by Secureframe MDM. ","Employee laptops at Modal are protected by full disk encryption using FileVault2, and are managed by Secureframe MDM."
0,What is the purpose of InfraSec at Modal Network & Infrastructure Security?,Security at Modal Network  Infrastructure Security InfraSec,"InfraSec is the practice of ensuring a hardened, minimal attack surface for
components we deploy on our network. Modal uses logging and metrics observability providers, including Datadog and
Sentry.io.Compute jobs at Modal are containerized and virtualized usinggVisor, the sandboxing technology
developed at Google and used in theirGoogle Cloud RunandGoogle
Kubernetes Enginecloud services.We conduct annual business continuity and security incident exercises. Modal uses logging and metrics observability providers, including Datadog and
Sentry.io. Compute jobs at Modal are containerized and virtualized usinggVisor, the sandboxing technology
developed at Google and used in theirGoogle Cloud RunandGoogle
Kubernetes Enginecloud services. gVisor Google Cloud Run Google
Kubernetes Engine We conduct annual business continuity and security incident exercises. ","InfraSec is the practice of ensuring a hardened, minimal attack surface for components deployed on Modal's network."
3,What technology is used to containerize and virtualize compute jobs at Modal?,Security at Modal Network  Infrastructure Security InfraSec,"InfraSec is the practice of ensuring a hardened, minimal attack surface for
components we deploy on our network. Modal uses logging and metrics observability providers, including Datadog and
Sentry.io.Compute jobs at Modal are containerized and virtualized usinggVisor, the sandboxing technology
developed at Google and used in theirGoogle Cloud RunandGoogle
Kubernetes Enginecloud services.We conduct annual business continuity and security incident exercises. Modal uses logging and metrics observability providers, including Datadog and
Sentry.io. Compute jobs at Modal are containerized and virtualized usinggVisor, the sandboxing technology
developed at Google and used in theirGoogle Cloud RunandGoogle
Kubernetes Enginecloud services. gVisor Google Cloud Run Google
Kubernetes Engine We conduct annual business continuity and security incident exercises. ","Modal uses gVisor, the sandboxing technology developed at Google, to containerize and virtualize compute jobs."
6,What regular activity does Modal conduct to ensure business continuity and security?,Security at Modal Network  Infrastructure Security InfraSec,"InfraSec is the practice of ensuring a hardened, minimal attack surface for
components we deploy on our network. Modal uses logging and metrics observability providers, including Datadog and
Sentry.io.Compute jobs at Modal are containerized and virtualized usinggVisor, the sandboxing technology
developed at Google and used in theirGoogle Cloud RunandGoogle
Kubernetes Enginecloud services.We conduct annual business continuity and security incident exercises. Modal uses logging and metrics observability providers, including Datadog and
Sentry.io. Compute jobs at Modal are containerized and virtualized usinggVisor, the sandboxing technology
developed at Google and used in theirGoogle Cloud RunandGoogle
Kubernetes Enginecloud services. gVisor Google Cloud Run Google
Kubernetes Engine We conduct annual business continuity and security incident exercises. ",Modal conducts annual business continuity and security incident exercises.
0,What does Modal Vulnerability Remediation refer to?,Security at Modal Vulnerability Remediation,"Security vulnerabilities directly affecting Modal’s systems and services will be
patched or otherwise remediated within a timeframe appropriate for the severity
of the vulnerability, subject to the public availability of a patch or other
remediation mechanisms. If there is a CVSS severity rating accompanying a vulnerability disclosure, we
rely on that as a starting point, but may upgrade or downgrade the severity
using our best judgement. Severity: Timeframe Critical:24 hoursHigh:1 weekMedium:1 monthLow:3 monthsInformational:3 months or longer Critical:24 hours Critical: High:1 week High: Medium:1 month Medium: Low:3 months Low: Informational:3 months or longer Informational: ",Security vulnerabilities directly affecting Modal’s systems and services which will be patched or otherwise remediated within a relevant timeframe determined by the severity of the vulnerability.
3,What is the timeframe for remediation of a critical severity vulnerability in Modal's systems?,Security at Modal Vulnerability Remediation,"Security vulnerabilities directly affecting Modal’s systems and services will be
patched or otherwise remediated within a timeframe appropriate for the severity
of the vulnerability, subject to the public availability of a patch or other
remediation mechanisms. If there is a CVSS severity rating accompanying a vulnerability disclosure, we
rely on that as a starting point, but may upgrade or downgrade the severity
using our best judgement. Severity: Timeframe Critical:24 hoursHigh:1 weekMedium:1 monthLow:3 monthsInformational:3 months or longer Critical:24 hours Critical: High:1 week High: Medium:1 month Medium: Low:3 months Low: Informational:3 months or longer Informational: ",The timeframe for remediation for a critical severity vulnerability is 24 hours.
6,What is the remediation timeframe for informational vulnerabilities in Modal's systems?,Security at Modal Vulnerability Remediation,"Security vulnerabilities directly affecting Modal’s systems and services will be
patched or otherwise remediated within a timeframe appropriate for the severity
of the vulnerability, subject to the public availability of a patch or other
remediation mechanisms. If there is a CVSS severity rating accompanying a vulnerability disclosure, we
rely on that as a starting point, but may upgrade or downgrade the severity
using our best judgement. Severity: Timeframe Critical:24 hoursHigh:1 weekMedium:1 monthLow:3 monthsInformational:3 months or longer Critical:24 hours Critical: High:1 week High: Medium:1 month Medium: Low:3 months Low: Informational:3 months or longer Informational: ",The remediation timeframe for informational vulnerabilities is 3 months or longer.
0,What type of audit has Modal recently completed?,Security at Modal SOC 2,"We have successfully completed a System and Organization Controls (SOC) 2 Type 1
audit. Contact us atsecurity@modal.comfor more details or access to the
report. security@modal.com ",Modal has recently completed a System and Organization Controls (SOC) 2 Type 1 audit.
3,What is SOC 2?,Security at Modal SOC 2,"We have successfully completed a System and Organization Controls (SOC) 2 Type 1
audit. Contact us atsecurity@modal.comfor more details or access to the
report. security@modal.com ",SOC 2 is a System and Organization Controls type of audit.
6,How can I have access to Modal's SOC 2 Type 1 audit report?,Security at Modal SOC 2,"We have successfully completed a System and Organization Controls (SOC) 2 Type 1
audit. Contact us atsecurity@modal.comfor more details or access to the
report. security@modal.com ",You can access Modal's SOC 2 Type 1 audit report by contacting them at security@modal.com.
0,What standard defines the security and privacy requirements for payment card processing?,Security at Modal PCI,"Payment Card Industry Data Security Standard(PCI) is a standard that defines
the security and privacy requirements for payment card processing. Payment Card Industry Data Security Standard Modal usesStripeto securely process transactions and
trusts their commitment to best-in-class security. We do not store personal
credit card information for any of our customers. Stripe is certified as “PCI
Service Provider Level 1”, which is the highest level of certification in the
payments industry. Stripe ",Payment Card Industry Data Security Standard (PCI)
3,Does Modal PCI store personal credit card information for customers? ,Security at Modal PCI,"Payment Card Industry Data Security Standard(PCI) is a standard that defines
the security and privacy requirements for payment card processing. Payment Card Industry Data Security Standard Modal usesStripeto securely process transactions and
trusts their commitment to best-in-class security. We do not store personal
credit card information for any of our customers. Stripe is certified as “PCI
Service Provider Level 1”, which is the highest level of certification in the
payments industry. Stripe ","No, Modal PCI does not store personal credit card information for any of its customers."
6,What is the commitment of Stripe in terms of security?,Security at Modal PCI,"Payment Card Industry Data Security Standard(PCI) is a standard that defines
the security and privacy requirements for payment card processing. Payment Card Industry Data Security Standard Modal usesStripeto securely process transactions and
trusts their commitment to best-in-class security. We do not store personal
credit card information for any of our customers. Stripe is certified as “PCI
Service Provider Level 1”, which is the highest level of certification in the
payments industry. Stripe ",Stripe is committed to providing best-in-class security.
0,What are the different types of security at Modal?,Security at Modal Questions,"Email us! Email us! Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at Modal Application Security (AppSec) Corporate Security (CorpSec) Network & Infrastructure Security (InfraSec) Vulnerability Remediation Severity: Timeframe SOC 2 PCI Questions? CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Application Security (AppSec), Corporate Security (CorpSec), Network & Infrastructure Security (InfraSec)"
3,What certifications does Modal have in terms of security?,Security at Modal Questions,"Email us! Email us! Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at Modal Application Security (AppSec) Corporate Security (CorpSec) Network & Infrastructure Security (InfraSec) Vulnerability Remediation Severity: Timeframe SOC 2 PCI Questions? CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","SOC 2, PCI"
6,Which company is associated with this document?,Security at Modal Questions,"Email us! Email us! Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at Modal Application Security (AppSec) Corporate Security (CorpSec) Network & Infrastructure Security (InfraSec) Vulnerability Remediation Severity: Timeframe SOC 2 PCI Questions? CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc."
0,What are the different types of security provided by Modal?,Security at Modal Questions,"Email us! Email us! Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at Modal Application Security (AppSec) Corporate Security (CorpSec) Network & Infrastructure Security (InfraSec) Vulnerability Remediation Severity: Timeframe SOC 2 PCI Questions? CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal provides Application Security (AppSec), Corporate Security (CorpSec), Network & Infrastructure Security (InfraSec), Vulnerability Remediation"
3,How can one contact the security team at Modal?,Security at Modal Questions,"Email us! Email us! Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at Modal Application Security (AppSec) Corporate Security (CorpSec) Network & Infrastructure Security (InfraSec) Vulnerability Remediation Severity: Timeframe SOC 2 PCI Questions? CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",One can email the security team at Modal for any security queries.
6,What sort of services do Modal Labs provide?,Security at Modal Questions,"Email us! Email us! Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at ModalApplication Security (AppSec)Corporate Security (CorpSec)Network & Infrastructure Security (InfraSec)Vulnerability RemediationSeverity: TimeframeSOC 2PCIQuestions? Security at Modal Application Security (AppSec) Corporate Security (CorpSec) Network & Infrastructure Security (InfraSec) Vulnerability Remediation Severity: Timeframe SOC 2 PCI Questions? CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs provide examples, documentation, and pricing information for their security services."
0,What is Stable Diffusion 1.5 optimized for?,Stable Diffusion CLI,"This example shows Stable Diffusion 1.5 with a number of optimizations
that makes it run faster on Modal. The example takes about 10s to cold start
and about 1.0s per image generated. To use the new XL 1.0 model, see the example postedhere. here For instance, here are 9 images produced by the promptAn 1600s oil painting of the New York City skyline An 1600s oil painting of the New York City skyline   There is also aStable Diffusion Slack bot examplewhich does not have all the optimizations, but shows how you can set up a Slack command to
trigger Stable Diffusion. Stable Diffusion Slack bot example ",Stable Diffusion 1.5 is optimized to run faster on Modal.
3,How fast can Stable Diffusion 1.5 generate an image?,Stable Diffusion CLI,"This example shows Stable Diffusion 1.5 with a number of optimizations
that makes it run faster on Modal. The example takes about 10s to cold start
and about 1.0s per image generated. To use the new XL 1.0 model, see the example postedhere. here For instance, here are 9 images produced by the promptAn 1600s oil painting of the New York City skyline An 1600s oil painting of the New York City skyline   There is also aStable Diffusion Slack bot examplewhich does not have all the optimizations, but shows how you can set up a Slack command to
trigger Stable Diffusion. Stable Diffusion Slack bot example ",Stable Diffusion 1.5 can generate an image in about 1.0 seconds.
6,What kind of image was produced by the prompt in the example?,Stable Diffusion CLI,"This example shows Stable Diffusion 1.5 with a number of optimizations
that makes it run faster on Modal. The example takes about 10s to cold start
and about 1.0s per image generated. To use the new XL 1.0 model, see the example postedhere. here For instance, here are 9 images produced by the promptAn 1600s oil painting of the New York City skyline An 1600s oil painting of the New York City skyline   There is also aStable Diffusion Slack bot examplewhich does not have all the optimizations, but shows how you can set up a Slack command to
trigger Stable Diffusion. Stable Diffusion Slack bot example ",The prompt produced 9 images of a 1600s oil painting of the New York City skyline.
0,What is the role of a Stub in Modal programs?,Stable Diffusion CLI Basic setup,"from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from import import import from import from import Copy Copy    Copy All Modal programs need aStub— an object that acts as a recipe for
the application. Let’s give it a friendly name. Stub Stub stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"") stub = Stub(""stable-diffusion-cli"") stub = Stub(""stable-diffusion-cli"") ""stable-diffusion-cli"" Copy Copy    Copy ",A Stub is an object that acts as a recipe for the application.
3,Which modules and functions are imported from Python's pathlib library in the code snippet?,Stable Diffusion CLI Basic setup,"from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from import import import from import from import Copy Copy    Copy All Modal programs need aStub— an object that acts as a recipe for
the application. Let’s give it a friendly name. Stub Stub stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"") stub = Stub(""stable-diffusion-cli"") stub = Stub(""stable-diffusion-cli"") ""stable-diffusion-cli"" Copy Copy    Copy ",The Path function is imported from the pathlib library.
6,What does the 'time' module imported from the io library imply about the program?,Stable Diffusion CLI Basic setup,"from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, methodCopy from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from__future__importannotationsimportioimporttimefrompathlibimportPathfrommodalimportImage, Stub, method from import import import from import from import Copy Copy    Copy All Modal programs need aStub— an object that acts as a recipe for
the application. Let’s give it a friendly name. Stub Stub stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"")Copy stub = Stub(""stable-diffusion-cli"") stub = Stub(""stable-diffusion-cli"") stub = Stub(""stable-diffusion-cli"") ""stable-diffusion-cli"" Copy Copy    Copy ","The 'time' module suggests that the program may involve functionality related to time, such as delays, timing of events, or timestamp creation."
0,What is the model ID being used in this code?,Stable Diffusion CLI Model dependencies,"Your model will be running remotely inside a container. We will be installing
all the model dependencies in the next step. We will also be “baking the model”
into the image by running a Python function as a part of building the image.
This lets us start containers much faster, since all the data that’s needed is
already inside the image. model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image ""runwayml/stable-diffusion-v1-5"" ""/vol/cache"" def download_models import import # Download scheduler configuration. Experiment with different schedulers # to identify one that works best for your use-case. ""scheduler"" True # Downloads all other models. ""fp16"" True ""3.10"" ""accelerate"" ""diffusers[torch]>=0.15.1"" ""ftfy"" ""torchvision"" ""transformers~=4.25.1"" ""triton"" ""safetensors"" ""torch==2.0.1+cu117"" ""https://download.pytorch.org/whl/torch_stable.html"" ""xformers"" True Copy Copy    Copy ","The model ID is ""runwayml/stable-diffusion-v1-5"""
3,What version of python is the code using?,Stable Diffusion CLI Model dependencies,"Your model will be running remotely inside a container. We will be installing
all the model dependencies in the next step. We will also be “baking the model”
into the image by running a Python function as a part of building the image.
This lets us start containers much faster, since all the data that’s needed is
already inside the image. model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image ""runwayml/stable-diffusion-v1-5"" ""/vol/cache"" def download_models import import # Download scheduler configuration. Experiment with different schedulers # to identify one that works best for your use-case. ""scheduler"" True # Downloads all other models. ""fp16"" True ""3.10"" ""accelerate"" ""diffusers[torch]>=0.15.1"" ""ftfy"" ""torchvision"" ""transformers~=4.25.1"" ""triton"" ""safetensors"" ""torch==2.0.1+cu117"" ""https://download.pytorch.org/whl/torch_stable.html"" ""xformers"" True Copy Copy    Copy ",The code is using Python version 3.10. 
6,What is the torch version being used?,Stable Diffusion CLI Model dependencies,"Your model will be running remotely inside a container. We will be installing
all the model dependencies in the next step. We will also be “baking the model”
into the image by running a Python function as a part of building the image.
This lets us start containers much faster, since all the data that’s needed is
already inside the image. model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = imageCopy model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image model_id =""runwayml/stable-diffusion-v1-5""cache_path =""/vol/cache""defdownload_models():importdiffusersimporttorch# Download scheduler configuration. Experiment with different schedulers# to identify one that works best for your use-case.scheduler = diffusers.DPMSolverMultistepScheduler.from_pretrained(
        model_id,
        subfolder=""scheduler"",
        cache_dir=cache_path,
    )
    scheduler.save_pretrained(cache_path, safe_serialization=True)# Downloads all other models.pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id,
        revision=""fp16"",
        torch_dtype=torch.float16,
        cache_dir=cache_path,
    )
    pipe.save_pretrained(cache_path, safe_serialization=True)


image = (
    Image.debian_slim(python_version=""3.10"")
    .pip_install(""accelerate"",""diffusers[torch]>=0.15.1"",""ftfy"",""torchvision"",""transformers~=4.25.1"",""triton"",""safetensors"",
    )
    .pip_install(""torch==2.0.1+cu117"",
        find_links=""https://download.pytorch.org/whl/torch_stable.html"",
    )
    .pip_install(""xformers"", pre=True)
    .run_function(download_models)
)
stub.image = image ""runwayml/stable-diffusion-v1-5"" ""/vol/cache"" def download_models import import # Download scheduler configuration. Experiment with different schedulers # to identify one that works best for your use-case. ""scheduler"" True # Downloads all other models. ""fp16"" True ""3.10"" ""accelerate"" ""diffusers[torch]>=0.15.1"" ""ftfy"" ""torchvision"" ""transformers~=4.25.1"" ""triton"" ""safetensors"" ""torch==2.0.1+cu117"" ""https://download.pytorch.org/whl/torch_stable.html"" ""xformers"" True Copy Copy    Copy ",The torch version being used is 2.0.1+cu117.
0,What is the startup time for generating the first picture using Stable Diffusion CLI?,Stable Diffusion CLI Performance,"This example can generate pictures in about a second, with startup time of about 10s for the first picture. See distribution of latencies below. This data was gathered by running 500 requests in sequence (meaning only
the first request incurs a cold start). As you can see, the 90th percentile is 1.2s and the 99th percentile is 2.30s.   Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformance Stable Diffusion CLI Optimizations used in this example Basic setup Model dependencies Using container lifecycle methods Performance Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy ",The startup time is about 10 seconds.
3,What are the 90th and 99th percentiles for the latencies of this system?,Stable Diffusion CLI Performance,"This example can generate pictures in about a second, with startup time of about 10s for the first picture. See distribution of latencies below. This data was gathered by running 500 requests in sequence (meaning only
the first request incurs a cold start). As you can see, the 90th percentile is 1.2s and the 99th percentile is 2.30s.   Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformance Stable Diffusion CLI Optimizations used in this example Basic setup Model dependencies Using container lifecycle methods Performance Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy ",The 90th percentile is 1.2s and the 99th percentile is 2.30s.
6,What command do you run to generate a picture with the prompt 'An 1600s oil painting of the New York City skyline' in the Stable Diffusion CLI?,Stable Diffusion CLI Performance,"This example can generate pictures in about a second, with startup time of about 10s for the first picture. See distribution of latencies below. This data was gathered by running 500 requests in sequence (meaning only
the first request incurs a cold start). As you can see, the 90th percentile is 1.2s and the 99th percentile is 2.30s.   Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformance Stable Diffusion CLI Optimizations used in this example Basic setup Model dependencies Using container lifecycle methods Performance Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy ",The command to run is: $modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt 'An 1600s oil painting of the New York City skyline'.
0,How long does it typically take to generate a picture with this example?,Stable Diffusion CLI Performance,"This example can generate pictures in about a second, with startup time of about 10s for the first picture. See distribution of latencies below. This data was gathered by running 500 requests in sequence (meaning only
the first request incurs a cold start). As you can see, the 90th percentile is 1.2s and the 99th percentile is 2.30s.   Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformance Stable Diffusion CLI Optimizations used in this example Basic setup Model dependencies Using container lifecycle methods Performance Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' $ modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' 'An 1600s oil painting of the New York City skyline' Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","This example can generate pictures in about a second, with startup time of about 10s for the first picture."
3,What is the 99th percentile latency?,Stable Diffusion CLI Performance,"This example can generate pictures in about a second, with startup time of about 10s for the first picture. See distribution of latencies below. This data was gathered by running 500 requests in sequence (meaning only
the first request incurs a cold start). As you can see, the 90th percentile is 1.2s and the 99th percentile is 2.30s.   Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformance Stable Diffusion CLI Optimizations used in this example Basic setup Model dependencies Using container lifecycle methods Performance Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' $ modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' 'An 1600s oil painting of the New York City skyline' Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The 99th percentile is 2.30s.
6,What is the first command to run after installing Modal Python package?,Stable Diffusion CLI Performance,"This example can generate pictures in about a second, with startup time of about 10s for the first picture. See distribution of latencies below. This data was gathered by running 500 requests in sequence (meaning only
the first request incurs a cold start). As you can see, the 90th percentile is 1.2s and the 99th percentile is 2.30s.   Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformanceTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Stable Diffusion CLIOptimizations used in this exampleBasic setupModel dependenciesUsing container lifecycle methodsPerformance Stable Diffusion CLI Optimizations used in this example Basic setup Model dependencies Using container lifecycle methods Performance Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline'Copy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' $ modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' modal run 06_gpu_and_ml/stable_diffusion/stable_diffusion_cli.py --prompt'An 1600s oil painting of the New York City skyline' 'An 1600s oil painting of the New York City skyline' Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The first command to run after installing the Modal Python package is ""modal setup""."
0,What is the purpose of BoomBot on Discord?,BoomBot Create your own music samples on Discord,"(quick links:try it out on Discord;watch demo with audio;view source code) (quick links:try it out on Discord;watch demo with audio;view source code) try it out on Discord watch demo with audio view source code MusicGenis the latest
milestone language model in conditional music generation, with great results. We
wanted a space to easily play around with the model and share our creations, so
we created aDiscord communityfeaturing
BoomBot, an on-demand music sample generator. MusicGen Discord community You can call BoomBot in the Discord server by simply typing/generate, then
prompting it with a text description of the music you’d like to create, and even
a file of the melody you’d like to condition on, along with other specifiable
parameters. /generate   Everything, from the backend API to our React frontend, is deployed serverlessly
using Modal, and the code is availablehere. here ","BoomBot is an on-demand music sample generator on Discord, which can be prompted with a text description of the music you'd like to create or a file of the melody you wish to condition on."
3,How can you use BoomBot in the Discord server?,BoomBot Create your own music samples on Discord,"(quick links:try it out on Discord;watch demo with audio;view source code) (quick links:try it out on Discord;watch demo with audio;view source code) try it out on Discord watch demo with audio view source code MusicGenis the latest
milestone language model in conditional music generation, with great results. We
wanted a space to easily play around with the model and share our creations, so
we created aDiscord communityfeaturing
BoomBot, an on-demand music sample generator. MusicGen Discord community You can call BoomBot in the Discord server by simply typing/generate, then
prompting it with a text description of the music you’d like to create, and even
a file of the melody you’d like to condition on, along with other specifiable
parameters. /generate   Everything, from the backend API to our React frontend, is deployed serverlessly
using Modal, and the code is availablehere. here ","You can use BoomBot in the Discord server by typing /generate, and then provide a text description of the music you’d like to create, possibly a file of the melody you’d like to condition on, as well as other specifiable parameters."
6,What platform is BoomBot deployed on?,BoomBot Create your own music samples on Discord,"(quick links:try it out on Discord;watch demo with audio;view source code) (quick links:try it out on Discord;watch demo with audio;view source code) try it out on Discord watch demo with audio view source code MusicGenis the latest
milestone language model in conditional music generation, with great results. We
wanted a space to easily play around with the model and share our creations, so
we created aDiscord communityfeaturing
BoomBot, an on-demand music sample generator. MusicGen Discord community You can call BoomBot in the Discord server by simply typing/generate, then
prompting it with a text description of the music you’d like to create, and even
a file of the melody you’d like to condition on, along with other specifiable
parameters. /generate   Everything, from the backend API to our React frontend, is deployed serverlessly
using Modal, and the code is availablehere. here ","BoomBot, along with its backend API and React frontend, is deployed serverlessly using Modal."
0,What is BoomBot's main functionality on Discord?,BoomBot Create your own music samples on Discord Run this app on Modal,"All the source code for this example can befound on Github. found on Github If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on Discord Code overview Language model Discord bot Create a Discord app Register a Slash Command Deploy a Modal web endpoint Finish setting up Discord bot React frontend Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",BoomBot is used to create your own music samples on Discord.
3,What are some of the setup steps for the BoomBot Discord bot?,BoomBot Create your own music samples on Discord Run this app on Modal,"All the source code for this example can befound on Github. found on Github If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on Discord Code overview Language model Discord bot Create a Discord app Register a Slash Command Deploy a Modal web endpoint Finish setting up Discord bot React frontend Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Some of the setup steps for the BoomBot Discord bot include creating a Discord app, registering a Slash Command, deploying a Modal web endpoint, and finishing setting up the Discord bot."
6,Who owns the rights to the app?,BoomBot Create your own music samples on Discord Run this app on Modal,"All the source code for this example can befound on Github. found on Github If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on Discord Code overview Language model Discord bot Create a Discord app Register a Slash Command Deploy a Modal web endpoint Finish setting up Discord bot React frontend Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The rights to the app are owned by Modal Labs, Inc."
0,What is BoomBot?,BoomBot Create your own music samples on Discord Run this app on Modal,"All the source code for this example can befound on Github. found on Github If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on Discord Code overview Language model Discord bot Create a Discord app Register a Slash Command Deploy a Modal web endpoint Finish setting up Discord bot React frontend Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",BoomBot is an app that allows you to create your own music samples on Discord.
3,What is the main functionality of the Modal web endpoint in the BoomBot app?,BoomBot Create your own music samples on Discord Run this app on Modal,"All the source code for this example can befound on Github. found on Github If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on Discord Code overview Language model Discord bot Create a Discord app Register a Slash Command Deploy a Modal web endpoint Finish setting up Discord bot React frontend Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The Modal web endpoint in the BoomBot app is used for deployment purposes.
6,Who are the creators of Modal?,BoomBot Create your own music samples on Discord Run this app on Modal,"All the source code for this example can befound on Github. found on Github If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on DiscordCode overviewLanguage modelDiscord botCreate a Discord appRegister a Slash CommandDeploy a Modal web endpointFinish setting up Discord botReact frontendRun this app on Modal BoomBot: Create your own music samples on Discord Code overview Language model Discord bot Create a Discord app Register a Slash Command Deploy a Modal web endpoint Finish setting up Discord bot React frontend Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal was created by Modal Labs, Inc."
0,What API is used to fetch the ETFs in this example?,Fetching stock prices in parallel,"This is a simple example that uses the Yahoo! Finance API to fetch a bunch of ETFs
We do this in parallel, which demonstrates the ability to map over a set of items
In this case, we fetch 100 stocks in parallel You can run this script on the terminal with modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py Copy Copy    Copy If everything goes well, it should plot something like this:   ",The Yahoo! Finance API is used to fetch the ETFs in this example.
3,How can one run this stock fetching script?,Fetching stock prices in parallel,"This is a simple example that uses the Yahoo! Finance API to fetch a bunch of ETFs
We do this in parallel, which demonstrates the ability to map over a set of items
In this case, we fetch 100 stocks in parallel You can run this script on the terminal with modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py Copy Copy    Copy If everything goes well, it should plot something like this:   ",This script can be run on the terminal with 'modal run 03_scaling_out/fetch_stock_prices.py'.
6,What's the expected outcome when this script is successfully run?,Fetching stock prices in parallel,"This is a simple example that uses the Yahoo! Finance API to fetch a bunch of ETFs
We do this in parallel, which demonstrates the ability to map over a set of items
In this case, we fetch 100 stocks in parallel You can run this script on the terminal with modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.pyCopy modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py Copy Copy    Copy If everything goes well, it should plot something like this:   ","If everything goes well, the script should plot a graph."
0,What library is used to parse HTML in this context? ,Fetching stock prices in parallel Fetch a list of tickers,"Theyfinancepackage does not have a way to download a list of stocks.
To get a list of stocks, we parse the HTML from Yahoo Finance using Beautiful Soup
and ask for the top 100 ETFs. yfinance @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function() def get_stocks import import ""user-agent"" ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"" ""referer"" ""https://finance.yahoo.com/"" ""https://finance.yahoo.com/etfs?count=100&offset=0"" ""html.parser"" for in ""td"" ""aria-label"" ""Symbol"" for in ""a"" ""data-test"" ""quoteLink"" str next print f""Found symbol{symbol}"" {symbol} yield Copy Copy    Copy ",Beautiful Soup is used to parse the HTML. 
3,What is Beautiful Soup used for in this script?,Fetching stock prices in parallel Fetch a list of tickers,"Theyfinancepackage does not have a way to download a list of stocks.
To get a list of stocks, we parse the HTML from Yahoo Finance using Beautiful Soup
and ask for the top 100 ETFs. yfinance @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function() def get_stocks import import ""user-agent"" ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"" ""referer"" ""https://finance.yahoo.com/"" ""https://finance.yahoo.com/etfs?count=100&offset=0"" ""html.parser"" for in ""td"" ""aria-label"" ""Symbol"" for in ""a"" ""data-test"" ""quoteLink"" str next print f""Found symbol{symbol}"" {symbol} yield Copy Copy    Copy ","In this script, Beautiful Soup is used to parse HTML and find all instances of table data with the ""aria-label"" of ""Symbol""."
6,Where are the stock symbols printed in this script? ,Fetching stock prices in parallel Fetch a list of tickers,"Theyfinancepackage does not have a way to download a list of stocks.
To get a list of stocks, we parse the HTML from Yahoo Finance using Beautiful Soup
and ask for the top 100 ETFs. yfinance @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbolCopy @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function()defget_stocks():importbs4importhttpx

    headers = {""user-agent"":""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"",""referer"":""https://finance.yahoo.com/"",
    }
    url =""https://finance.yahoo.com/etfs?count=100&offset=0""res = httpx.get(url, headers=headers)
    res.raise_for_status()
    soup = bs4.BeautifulSoup(res.text,""html.parser"")fortdinsoup.find_all(""td"", {""aria-label"":""Symbol""}):forlinkintd.find_all(""a"", {""data-test"":""quoteLink""}):
            symbol =str(link.next)print(f""Found symbol{symbol}"")yieldsymbol @stub.function() def get_stocks import import ""user-agent"" ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36"" ""referer"" ""https://finance.yahoo.com/"" ""https://finance.yahoo.com/etfs?count=100&offset=0"" ""html.parser"" for in ""td"" ""aria-label"" ""Symbol"" for in ""a"" ""data-test"" ""quoteLink"" str next print f""Found symbol{symbol}"" {symbol} yield Copy Copy    Copy ","The stock symbols in this script are printed in the console right after the phrase ""Found symbol""."
0,What is the main task of the 'get_prices' function?,Fetching stock prices in parallel Fetch stock prices,"Now, let’s fetch the stock data. This is the function that we will parallelize.
It’s fairly simple and just uses theyfinancepackage. yfinance @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function() def get_prices symbol import print f""Fetching symbol{symbol}..."" {symbol} ""1Y"" ""Close"" print f""Done fetching symbol{symbol}!"" {symbol} return Copy Copy    Copy ",The main task of the 'get_prices' function is to fetch the stock data for a specific symbol using the yfinance package.
3,What package does the 'get_prices' function use to collect stock data?,Fetching stock prices in parallel Fetch stock prices,"Now, let’s fetch the stock data. This is the function that we will parallelize.
It’s fairly simple and just uses theyfinancepackage. yfinance @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function() def get_prices symbol import print f""Fetching symbol{symbol}..."" {symbol} ""1Y"" ""Close"" print f""Done fetching symbol{symbol}!"" {symbol} return Copy Copy    Copy ",The 'get_prices' function uses the yfinance package to collect stock data.
6,What information is printed by the 'get_prices' function?,Fetching stock prices in parallel Fetch stock prices,"Now, let’s fetch the stock data. This is the function that we will parallelize.
It’s fairly simple and just uses theyfinancepackage. yfinance @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict()Copy @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function()defget_prices(symbol):importyfinanceprint(f""Fetching symbol{symbol}..."")
    ticker = yfinance.Ticker(symbol)
    data = ticker.history(period=""1Y"")[""Close""]print(f""Done fetching symbol{symbol}!"")returnsymbol, data.to_dict() @stub.function() def get_prices symbol import print f""Fetching symbol{symbol}..."" {symbol} ""1Y"" ""Close"" print f""Done fetching symbol{symbol}!"" {symbol} return Copy Copy    Copy ","The 'get_prices' function prints the text ""Fetching symbol{symbol}..."" at the start and ""Done fetching symbol{symbol}!"" after fetching the data, where {symbol} is replaced by the specific stock symbol it is fetching data for."
0,What does the plot_stocks function do?,Fetching stock prices in parallel Plot the result,"Here is our plotting code. We run this in Modal, although you could also run it locally.
Note that the plotting code calls the other two functions.
Since we plot the data in the cloud, we can’t display it, so we generate a PNG
and return the binary content from the function. @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function() def plot_stocks from import # Setup ""ggplot"" 8 5 # Get data list if not raise ""Retrieved zero stock tickers!"" list map min min for in if max max for in if # Plot every symbol for in if len 0 continue list sorted list for in 100.0 0 1 for in # Normalize to initial price if 1 20 # Highlight this line 0.7 1 ""left"" ""center"" 0 0.7 else ""gray"" 0.2 # Configure axes and title f""Best ETFs{first_date.date()}-{last_date.date()}"" {first_date.date()} {last_date.date()} f""% change,{first_date.date()}= 0%"" {first_date.date()} # Dump the chart to .png and return the bytes with as format ""png"" 300 return Copy Copy    Copy ","The plot_stocks function fetches stock data, plots it showing the percentage change for each stock from their initial price, and then saves this plot to a .png file."
3,What does the function do if it retrieves zero stock tickers?,Fetching stock prices in parallel Plot the result,"Here is our plotting code. We run this in Modal, although you could also run it locally.
Note that the plotting code calls the other two functions.
Since we plot the data in the cloud, we can’t display it, so we generate a PNG
and return the binary content from the function. @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function() def plot_stocks from import # Setup ""ggplot"" 8 5 # Get data list if not raise ""Retrieved zero stock tickers!"" list map min min for in if max max for in if # Plot every symbol for in if len 0 continue list sorted list for in 100.0 0 1 for in # Normalize to initial price if 1 20 # Highlight this line 0.7 1 ""left"" ""center"" 0 0.7 else ""gray"" 0.2 # Configure axes and title f""Best ETFs{first_date.date()}-{last_date.date()}"" {first_date.date()} {last_date.date()} f""% change,{first_date.date()}= 0%"" {first_date.date()} # Dump the chart to .png and return the bytes with as format ""png"" 300 return Copy Copy    Copy ","If the function retrieves zero stock tickers, it raises a RuntimeError with the message ""Retrieved zero stock tickers!""."
6,What is returned by the plot_stocks function?,Fetching stock prices in parallel Plot the result,"Here is our plotting code. We run this in Modal, although you could also run it locally.
Note that the plotting code calls the other two functions.
Since we plot the data in the cloud, we can’t display it, so we generate a PNG
and return the binary content from the function. @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue()Copy @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function()defplot_stocks():frommatplotlibimportpyplot, ticker# Setuppyplot.style.use(""ggplot"")
    fig, ax = pyplot.subplots(figsize=(8,5))# Get datatickers =list(get_stocks.remote_gen())ifnottickers:raiseRuntimeError(""Retrieved zero stock tickers!"")
    data =list(get_prices.map(tickers))
    first_date =min((min(prices.keys())forsymbol, pricesindataifprices))
    last_date =max((max(prices.keys())forsymbol, pricesindataifprices))# Plot every symbolforsymbol, pricesindata:iflen(prices) ==0:continuedates =list(sorted(prices.keys()))
        prices =list(prices[date]fordateindates)
        changes = [100.0* (price / prices[0] -1)forpriceinprices
        ]# Normalize to initial priceifchanges[-1] >20:# Highlight this linep = ax.plot(dates, changes, alpha=0.7)
            ax.annotate(
                symbol,
                (last_date, changes[-1]),
                ha=""left"",
                va=""center"",
                color=p[0].get_color(),
                alpha=0.7,
            )else:
            ax.plot(dates, changes, color=""gray"", alpha=0.2)# Configure axes and titleax.yaxis.set_major_formatter(ticker.PercentFormatter())
    ax.set_title(f""Best ETFs{first_date.date()}-{last_date.date()}"")
    ax.set_ylabel(f""% change,{first_date.date()}= 0%"")# Dump the chart to .png and return the byteswithio.BytesIO()asbuf:
        pyplot.savefig(buf,format=""png"", dpi=300)returnbuf.getvalue() @stub.function() def plot_stocks from import # Setup ""ggplot"" 8 5 # Get data list if not raise ""Retrieved zero stock tickers!"" list map min min for in if max max for in if # Plot every symbol for in if len 0 continue list sorted list for in 100.0 0 1 for in # Normalize to initial price if 1 20 # Highlight this line 0.7 1 ""left"" ""center"" 0 0.7 else ""gray"" 0.2 # Configure axes and title f""Best ETFs{first_date.date()}-{last_date.date()}"" {first_date.date()} {last_date.date()} f""% change,{first_date.date()}= 0%"" {first_date.date()} # Dump the chart to .png and return the bytes with as format ""png"" 300 return Copy Copy    Copy ",The plot_stocks function returns the binary content of the plotted .png image.
0,What is the OUTPUT_DIR in this program?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy ","""/tmp/"""
1,What function is used to fetch stock prices in the code?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy ",`plot_stocks.remote()`
2,What is the name of the file where the data is stored?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy ","""stock_prices.png"""
3,What are the commands to install the Modal Python package and set it up?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy ",`$pip install modal$modal setup`
4,How can one run the example on Modal?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy ","First, create a free account, install the Modal Python package, and create an API token. Then clone the `modal-examples` repository with `$git clone https://github.com/modal-labs/modal-examples`. Finally, navigate to the repository with `$cd modal-examples` and run the file with `$modal run 03_scaling_out/fetch_stock_prices.py`."
0,What is the purpose of the entrypoint in the script?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 03_scaling_out/fetch_stock_prices.py $ modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The entrypoint locally runs the app, gets the chart back as a PNG file, and saves it to disk. "
3,Where are the fetched stock prices displayed?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 03_scaling_out/fetch_stock_prices.py $ modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The fetched stock prices are displayed in a chart, which is then saved as a PNG file."
6,How to fetch the necessary resources to run the script on Modal?,Fetching stock prices in parallel Entrypoint,"The entrypoint locally runs the app, gets the chart back as a PNG file, and
saves it to disk. OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data)Copy OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) OUTPUT_DIR =""/tmp/""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    data = plot_stocks.remote()
    filename = os.path.join(OUTPUT_DIR,""stock_prices.png"")print(f""saving data to{filename}"")withopen(filename,""wb"")asf:
        f.write(data) ""/tmp/"" @stub.local_entrypoint() def main True ""stock_prices.png"" print f""saving data to{filename}"" {filename} with open ""wb"" as Copy Copy    Copy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Fetching stock prices in parallelSetupFetch a list of tickersFetch stock pricesPlot the resultEntrypoint Fetching stock prices in parallel Setup Fetch a list of tickers Fetch stock prices Plot the result Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/fetch_stock_prices.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 03_scaling_out/fetch_stock_prices.py $ modal run 03_scaling_out/fetch_stock_prices.py modal run 03_scaling_out/fetch_stock_prices.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","Clone the modal-examples repository, navigate into the directory, and run the fetch_stock_prices.py script."
0,What does the Algolia docsearch crawler do?,Algolia docsearch crawler,"This tutorial shows you how to use Modal to run theAlgolia docsearch
crawlerto index your
website and make it searchable. This is not just example code - we run the same
code in production to power search on this page (Ctrl+Kto try it out!). Algolia docsearch
crawler Ctrl+K ",It indexes your website and makes it searchable.
3,Where is the same code used in production?,Algolia docsearch crawler,"This tutorial shows you how to use Modal to run theAlgolia docsearch
crawlerto index your
website and make it searchable. This is not just example code - we run the same
code in production to power search on this page (Ctrl+Kto try it out!). Algolia docsearch
crawler Ctrl+K ",It is used to power search on the tutorial page.
6,Is the code presented just an example?,Algolia docsearch crawler,"This tutorial shows you how to use Modal to run theAlgolia docsearch
crawlerto index your
website and make it searchable. This is not just example code - we run the same
code in production to power search on this page (Ctrl+Kto try it out!). Algolia docsearch
crawler Ctrl+K ","No, it's not just an example - the same code is run in production to power search on the page."
0,"What is the ""index_name"" in the provided Algolia docsearch crawler configuration?",Algolia docsearch crawler Configure the crawler,"Now, let’s configure the crawler with the website we want to index, and which
CSS selectors we want to scrape. Complete documentation for crawler configuration is availablehere. here CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} ""index_name"" ""modal_docs"" ""start_urls"" ""url"" ""https://modal.com/docs/guide"" ""page_rank"" 5 ""url"" ""https://modal.com/docs/reference"" ""page_rank"" 1 ""selectors"" ""lvl0"" ""article h1"" ""lvl1"" ""article h1"" ""lvl2"" ""article h2"" ""lvl3"" ""article h3"" ""lvl4"" ""article h4"" ""text"" ""article p,article ol,article ul,article pre"" Copy Copy    Copy ","The ""index_name"" is ""modal_docs""."
3,What CSS selectors are specified in the given configuration for the crawler?,Algolia docsearch crawler Configure the crawler,"Now, let’s configure the crawler with the website we want to index, and which
CSS selectors we want to scrape. Complete documentation for crawler configuration is availablehere. here CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} ""index_name"" ""modal_docs"" ""start_urls"" ""url"" ""https://modal.com/docs/guide"" ""page_rank"" 5 ""url"" ""https://modal.com/docs/reference"" ""page_rank"" 1 ""selectors"" ""lvl0"" ""article h1"" ""lvl1"" ""article h1"" ""lvl2"" ""article h2"" ""lvl3"" ""article h3"" ""lvl4"" ""article h4"" ""text"" ""article p,article ol,article ul,article pre"" Copy Copy    Copy ","The selectors specified are ""lvl0"":""article h1"", ""lvl1"":""article h1"", ""lvl2"":""article h2"", ""lvl3"":""article h3"", ""lvl4"":""article h4"", and ""text"":""article p,article ol,article ul,article pre""."
6,"Which parts of the webpage does the selector ""text"" in the configuration target?",Algolia docsearch crawler Configure the crawler,"Now, let’s configure the crawler with the website we want to index, and which
CSS selectors we want to scrape. Complete documentation for crawler configuration is availablehere. here CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
}Copy CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} CONFIG = {""index_name"":""modal_docs"",""start_urls"": [
        {""url"":""https://modal.com/docs/guide"",""page_rank"":5},
        {""url"":""https://modal.com/docs/reference"",""page_rank"":1},
    ],""selectors"": {""lvl0"":""article h1"",""lvl1"":""article h1"",""lvl2"":""article h2"",""lvl3"":""article h3"",""lvl4"":""article h4"",""text"":""article p,article ol,article ul,article pre"",
    },
} ""index_name"" ""modal_docs"" ""start_urls"" ""url"" ""https://modal.com/docs/guide"" ""page_rank"" 5 ""url"" ""https://modal.com/docs/reference"" ""page_rank"" 1 ""selectors"" ""lvl0"" ""article h1"" ""lvl1"" ""article h1"" ""lvl2"" ""article h2"" ""lvl3"" ""article h3"" ""lvl4"" ""article h4"" ""text"" ""article p,article ol,article ul,article pre"" Copy Copy    Copy ","The ""text"" selector in the configuration targets ""article p,article ol,article ul,article pre"" on the webpage."
0,What is the Algolia docsearch crawler used for?,Algolia docsearch crawler Create an API key,"If you don’t already have one, sign up for an account onAlgolia. Set up
a project and create an API key withwriteaccess to your index, and with the ACL permissionsaddObject,editSettingsanddeleteIndex. Now, create a secret on the ModalSecretspage with theAPI_KEYandAPPLICATION_IDyou just created. You can name this anything you want,
we named italgolia-secret. Algolia write addObject editSettings deleteIndex Secrets API_KEY APPLICATION_ID algolia-secret ","It is used to create an API key, necessary for projects on Algolia."
3,What permissions does the API key grant in Algolia?,Algolia docsearch crawler Create an API key,"If you don’t already have one, sign up for an account onAlgolia. Set up
a project and create an API key withwriteaccess to your index, and with the ACL permissionsaddObject,editSettingsanddeleteIndex. Now, create a secret on the ModalSecretspage with theAPI_KEYandAPPLICATION_IDyou just created. You can name this anything you want,
we named italgolia-secret. Algolia write addObject editSettings deleteIndex Secrets API_KEY APPLICATION_ID algolia-secret ","It grants the addObject, editSettings, and deleteIndex permissions."
6,What should you name the secret you create on the ModalSecrets page?,Algolia docsearch crawler Create an API key,"If you don’t already have one, sign up for an account onAlgolia. Set up
a project and create an API key withwriteaccess to your index, and with the ACL permissionsaddObject,editSettingsanddeleteIndex. Now, create a secret on the ModalSecretspage with theAPI_KEYandAPPLICATION_IDyou just created. You can name this anything you want,
we named italgolia-secret. Algolia write addObject editSettings deleteIndex Secrets API_KEY APPLICATION_ID algolia-secret ","You can name it anything you want. For instance, it was named as ""algolia-secret"" in this context."
0,What is the primary way to trigger the Algolia crawler from the CI/CD pipeline?,Algolia docsearch crawler The actual function,"We want to trigger our crawler from our CI/CD pipeline, so we’re serving it as aweb endpointthat can be triggered by aGETrequest during deploy.
You could also consider running the crawler on aschedule. web endpoint GET schedule The Algolia crawler is written for Python 3.6 and needs to run in thepipenvcreated for it,
so we’re invoking it using a subprocess. pipenv @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")]) image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")] ""algolia-secret"" ""algolia-secret"" def crawl # Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead. ""pipenv"" ""run"" ""python"" ""-m"" ""src.index"" ""CONFIG"" Copy Copy    Copy We want to be able to trigger this function through a webhook. @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function() @web_endpoint() def crawl_webhook return ""Finished indexing docs"" Copy Copy    Copy ",The primary way to trigger the Algolia crawler from the CI/CD pipeline is by serving it as a web endpoint that can be triggered by a GET request during deploy.
3,What version of Python is the Algolia crawler written for?,Algolia docsearch crawler The actual function,"We want to trigger our crawler from our CI/CD pipeline, so we’re serving it as aweb endpointthat can be triggered by aGETrequest during deploy.
You could also consider running the crawler on aschedule. web endpoint GET schedule The Algolia crawler is written for Python 3.6 and needs to run in thepipenvcreated for it,
so we’re invoking it using a subprocess. pipenv @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")]) image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")] ""algolia-secret"" ""algolia-secret"" def crawl # Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead. ""pipenv"" ""run"" ""python"" ""-m"" ""src.index"" ""CONFIG"" Copy Copy    Copy We want to be able to trigger this function through a webhook. @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function() @web_endpoint() def crawl_webhook return ""Finished indexing docs"" Copy Copy    Copy ",The Algolia crawler is written for Python 3.6.
6,"Which method is utilized to run the crawler, seeing as Python 3.6 is unsupported by Modal?",Algolia docsearch crawler The actual function,"We want to trigger our crawler from our CI/CD pipeline, so we’re serving it as aweb endpointthat can be triggered by aGETrequest during deploy.
You could also consider running the crawler on aschedule. web endpoint GET schedule The Algolia crawler is written for Python 3.6 and needs to run in thepipenvcreated for it,
so we’re invoking it using a subprocess. pipenv @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    )Copy @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")])defcrawl():# Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead.subprocess.run(
        [""pipenv"",""run"",""python"",""-m"",""src.index""],
        env={**os.environ,""CONFIG"": json.dumps(CONFIG)},
    ) @stub.function(image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")]) image=algolia_image, secrets=[Secret.from_name(""algolia-secret"")] ""algolia-secret"" ""algolia-secret"" def crawl # Installed with a 3.6 venv; Python 3.6 is unsupported by Modal, so use a subprocess instead. ""pipenv"" ""run"" ""python"" ""-m"" ""src.index"" ""CONFIG"" Copy Copy    Copy We want to be able to trigger this function through a webhook. @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs""Copy @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function()@web_endpoint()defcrawl_webhook():
    crawl.remote()return""Finished indexing docs"" @stub.function() @web_endpoint() def crawl_webhook return ""Finished indexing docs"" Copy Copy    Copy ",The crawler is run using the subprocess method.
0,What is the command to deploy the Algolia indexer?,Algolia docsearch crawler Deploy the indexer,"That’s all the code we need! To deploy your application, run modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.py modal deploy algolia_indexer.py modal deploy algolia_indexer.py Copy Copy    Copy If successful, this will print a URL for your new webhook, that you can hit usingcurlor a browser. Logs from webhook invocations can be found from theappspage. curl apps The indexed contents can be found athttps://www.algolia.com/apps/APP_ID/explorer/browse/, for your
APP_ID. Once you’re happy with the results, you canset up thedocsearchpackage with your
website, and create a search component that uses this index. https://www.algolia.com/apps/APP_ID/explorer/browse/ set up thedocsearchpackage with your
website docsearch ","The command is ""modal deploy algolia_indexer.py""."
1,Where can the logs from webhook invocations be found?,Algolia docsearch crawler Deploy the indexer,"That’s all the code we need! To deploy your application, run modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.py modal deploy algolia_indexer.py modal deploy algolia_indexer.py Copy Copy    Copy If successful, this will print a URL for your new webhook, that you can hit usingcurlor a browser. Logs from webhook invocations can be found from theappspage. curl apps The indexed contents can be found athttps://www.algolia.com/apps/APP_ID/explorer/browse/, for your
APP_ID. Once you’re happy with the results, you canset up thedocsearchpackage with your
website, and create a search component that uses this index. https://www.algolia.com/apps/APP_ID/explorer/browse/ set up thedocsearchpackage with your
website docsearch ",The logs from webhook invocations can be found from the apps page.
2,Where can the indexed contents be found?,Algolia docsearch crawler Deploy the indexer,"That’s all the code we need! To deploy your application, run modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.py modal deploy algolia_indexer.py modal deploy algolia_indexer.py Copy Copy    Copy If successful, this will print a URL for your new webhook, that you can hit usingcurlor a browser. Logs from webhook invocations can be found from theappspage. curl apps The indexed contents can be found athttps://www.algolia.com/apps/APP_ID/explorer/browse/, for your
APP_ID. Once you’re happy with the results, you canset up thedocsearchpackage with your
website, and create a search component that uses this index. https://www.algolia.com/apps/APP_ID/explorer/browse/ set up thedocsearchpackage with your
website docsearch ",The indexed contents can be found at https://www.algolia.com/apps/APP_ID/explorer/browse/.
3,What should you do once you're satisfied with the results?,Algolia docsearch crawler Deploy the indexer,"That’s all the code we need! To deploy your application, run modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.py modal deploy algolia_indexer.py modal deploy algolia_indexer.py Copy Copy    Copy If successful, this will print a URL for your new webhook, that you can hit usingcurlor a browser. Logs from webhook invocations can be found from theappspage. curl apps The indexed contents can be found athttps://www.algolia.com/apps/APP_ID/explorer/browse/, for your
APP_ID. Once you’re happy with the results, you canset up thedocsearchpackage with your
website, and create a search component that uses this index. https://www.algolia.com/apps/APP_ID/explorer/browse/ set up thedocsearchpackage with your
website docsearch ","Once you’re happy with the results, you can set up the docsearch package with your website, and create a search component that uses this index."
4,How can you invoke the new webhook after deployment?,Algolia docsearch crawler Deploy the indexer,"That’s all the code we need! To deploy your application, run modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.pyCopy modal deploy algolia_indexer.py modal deploy algolia_indexer.py modal deploy algolia_indexer.py Copy Copy    Copy If successful, this will print a URL for your new webhook, that you can hit usingcurlor a browser. Logs from webhook invocations can be found from theappspage. curl apps The indexed contents can be found athttps://www.algolia.com/apps/APP_ID/explorer/browse/, for your
APP_ID. Once you’re happy with the results, you canset up thedocsearchpackage with your
website, and create a search component that uses this index. https://www.algolia.com/apps/APP_ID/explorer/browse/ set up thedocsearchpackage with your
website docsearch ",You can hit the new webhook using curl or a browser.
0,What is the first step to setup Algolia docsearch crawler in the development phase?,Algolia docsearch crawler Entrypoint for development,"To make it easier to test this, we also have an entrypoint for when you runmodal run algolia_indexer.py modal run algolia_indexer.py @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint() def run Copy Copy    Copy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for development Algolia docsearch crawler Basic setup Configure the crawler Create an API key The actual function Deploy the indexer Entrypoint for development Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy ",The first step is to configure the crawler.
3,What should you do after creating a free account on Modal?,Algolia docsearch crawler Entrypoint for development,"To make it easier to test this, we also have an entrypoint for when you runmodal run algolia_indexer.py modal run algolia_indexer.py @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint() def run Copy Copy    Copy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for development Algolia docsearch crawler Basic setup Configure the crawler Create an API key The actual function Deploy the indexer Entrypoint for development Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy ","After creating a free account, install the Modal Python package, and create an API token."
6,Which Python package is required to be installed for this example?,Algolia docsearch crawler Entrypoint for development,"To make it easier to test this, we also have an entrypoint for when you runmodal run algolia_indexer.py modal run algolia_indexer.py @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint() def run Copy Copy    Copy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for development Algolia docsearch crawler Basic setup Configure the crawler Create an API key The actual function Deploy the indexer Entrypoint for development Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy ",The Modal Python package needs to be installed.
0,What is the purpose of the Algolia docsearch crawler?,Algolia docsearch crawler Entrypoint for development,"To make it easier to test this, we also have an entrypoint for when you runmodal run algolia_indexer.py modal run algolia_indexer.py @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint() def run Copy Copy    Copy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for development Algolia docsearch crawler Basic setup Configure the crawler Create an API key The actual function Deploy the indexer Entrypoint for development Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/algolia_indexer.py $ modal run 10_integrations/algolia_indexer.py modal run 10_integrations/algolia_indexer.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The Algolia docsearch crawler is used to index data for search functionality.
3,What package do you need to install to run this example on Modal?,Algolia docsearch crawler Entrypoint for development,"To make it easier to test this, we also have an entrypoint for when you runmodal run algolia_indexer.py modal run algolia_indexer.py @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint() def run Copy Copy    Copy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for development Algolia docsearch crawler Basic setup Configure the crawler Create an API key The actual function Deploy the indexer Entrypoint for development Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/algolia_indexer.py $ modal run 10_integrations/algolia_indexer.py modal run 10_integrations/algolia_indexer.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",You need to install the Modal Python package.
6,Who owns the copyright to Modal Labs?,Algolia docsearch crawler Entrypoint for development,"To make it easier to test this, we also have an entrypoint for when you runmodal run algolia_indexer.py modal run algolia_indexer.py @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote()Copy @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint()defrun():
    crawl.remote() @stub.local_entrypoint() def run Copy Copy    Copy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for developmentTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Algolia docsearch crawlerBasic setupConfigure the crawlerCreate an API keyThe actual functionDeploy the indexerEntrypoint for development Algolia docsearch crawler Basic setup Configure the crawler Create an API key The actual function Deploy the indexer Entrypoint for development Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/algolia_indexer.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/algolia_indexer.py $ modal run 10_integrations/algolia_indexer.py modal run 10_integrations/algolia_indexer.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright to Modal Labs is owned by Modal Labs, Inc."
0,What is the function of the 'new' command in Modal?,modal token,modal token Manage tokens. Usage: Usage modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]... modal token [OPTIONS] COMMAND [ARGS]... modal token [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands new: Creates a new token by using an authenticated web session.set: Set account credentials for connecting to Modal. new: Creates a new token by using an authenticated web session. new set: Set account credentials for connecting to Modal. set ,The 'new' command in Modal is used to create a new token by using an authenticated web session.
3,How to ask for help in Modal?,modal token,modal token Manage tokens. Usage: Usage modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]... modal token [OPTIONS] COMMAND [ARGS]... modal token [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands new: Creates a new token by using an authenticated web session.set: Set account credentials for connecting to Modal. new: Creates a new token by using an authenticated web session. new set: Set account credentials for connecting to Modal. set ,You can ask for help in Modal by using the '--help' option.
6,What is the purpose of the 'Copy' option in Modal?,modal token,modal token Manage tokens. Usage: Usage modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]...Copy modal token [OPTIONS] COMMAND [ARGS]... modal token [OPTIONS] COMMAND [ARGS]... modal token [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands new: Creates a new token by using an authenticated web session.set: Set account credentials for connecting to Modal. new: Creates a new token by using an authenticated web session. new set: Set account credentials for connecting to Modal. set ,The 'Copy' option in Modal is used to copy the Modal tokens.
0,What are the account credentials required for connecting to Modal?,modal token modal token set,"modal token set Set account credentials for connecting to Modal. If not provided with the command, you will be prompted to enter your credentials. Usage: Usage modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS] modal token set [OPTIONS] modal token set [OPTIONS] Copy Copy    Copy Options: Options --token-id TEXT: Account token ID.--token-secret TEXT: Account token secret.--profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile.--no-verify / --no-no-verify: [default: no-no-verify]--help: Show this message and exit. --token-id TEXT: Account token ID. --token-id TEXT --token-secret TEXT: Account token secret. --token-secret TEXT --profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile. --profile TEXT modal profile default --no-verify / --no-no-verify: [default: no-no-verify] --no-verify / --no-no-verify --help: Show this message and exit. --help modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal token modal token new modal token set CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",Token ID and token secret are required as account credentials for connecting to Modal.
3,What are the options available when using the 'modal token set' command?,modal token modal token set,"modal token set Set account credentials for connecting to Modal. If not provided with the command, you will be prompted to enter your credentials. Usage: Usage modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS] modal token set [OPTIONS] modal token set [OPTIONS] Copy Copy    Copy Options: Options --token-id TEXT: Account token ID.--token-secret TEXT: Account token secret.--profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile.--no-verify / --no-no-verify: [default: no-no-verify]--help: Show this message and exit. --token-id TEXT: Account token ID. --token-id TEXT --token-secret TEXT: Account token secret. --token-secret TEXT --profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile. --profile TEXT modal profile default --no-verify / --no-no-verify: [default: no-no-verify] --no-verify / --no-no-verify --help: Show this message and exit. --help modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal token modal token new modal token set CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The options include --token-id TEXT for account token ID, --token-secret TEXT for account token secret, --profile TEXT to set the Modal profile for credentials, and --no-verify / --no-no-verify to verify or not, and --help to display the command help message."
6,"Who owns the copyright to Modal Labs, Inc.?",modal token modal token set,"modal token set Set account credentials for connecting to Modal. If not provided with the command, you will be prompted to enter your credentials. Usage: Usage modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS] modal token set [OPTIONS] modal token set [OPTIONS] Copy Copy    Copy Options: Options --token-id TEXT: Account token ID.--token-secret TEXT: Account token secret.--profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile.--no-verify / --no-no-verify: [default: no-no-verify]--help: Show this message and exit. --token-id TEXT: Account token ID. --token-id TEXT --token-secret TEXT: Account token secret. --token-secret TEXT --profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile. --profile TEXT modal profile default --no-verify / --no-no-verify: [default: no-no-verify] --no-verify / --no-no-verify --help: Show this message and exit. --help modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal token modal token new modal token set CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright to Modal Labs, Inc. is owned by the same company and will last until 2023."
0,What are the account credentials needed to connect to Modal?,modal token modal token set,"modal token set Set account credentials for connecting to Modal. If not provided with the command, you will be prompted to enter your credentials. Usage: Usage modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS] modal token set [OPTIONS] modal token set [OPTIONS] Copy Copy    Copy Options: Options --token-id TEXT: Account token ID.--token-secret TEXT: Account token secret.--profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile.--no-verify / --no-no-verify: [default: no-no-verify]--help: Show this message and exit. --token-id TEXT: Account token ID. --token-id TEXT --token-secret TEXT: Account token secret. --token-secret TEXT --profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile. --profile TEXT modal profile default --no-verify / --no-no-verify: [default: no-no-verify] --no-verify / --no-no-verify --help: Show this message and exit. --help modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal token modal token new modal token set CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The account credentials needed to connect to Modal are the token ID and token secret.
3,"What does the --profile TEXT option mean in the ""modal token set"" command?",modal token modal token set,"modal token set Set account credentials for connecting to Modal. If not provided with the command, you will be prompted to enter your credentials. Usage: Usage modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS] modal token set [OPTIONS] modal token set [OPTIONS] Copy Copy    Copy Options: Options --token-id TEXT: Account token ID.--token-secret TEXT: Account token secret.--profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile.--no-verify / --no-no-verify: [default: no-no-verify]--help: Show this message and exit. --token-id TEXT: Account token ID. --token-id TEXT --token-secret TEXT: Account token secret. --token-secret TEXT --profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile. --profile TEXT modal profile default --no-verify / --no-no-verify: [default: no-no-verify] --no-verify / --no-no-verify --help: Show this message and exit. --help modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal token modal token new modal token set CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The --profile TEXT option in the ""modal token set"" command specifies the Modal profile to set credentials for. If unspecified, the default profile is used. "
6,What is Modal's default setting for verification?,modal token modal token set,"modal token set Set account credentials for connecting to Modal. If not provided with the command, you will be prompted to enter your credentials. Usage: Usage modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS]Copy modal token set [OPTIONS] modal token set [OPTIONS] modal token set [OPTIONS] Copy Copy    Copy Options: Options --token-id TEXT: Account token ID.--token-secret TEXT: Account token secret.--profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile.--no-verify / --no-no-verify: [default: no-no-verify]--help: Show this message and exit. --token-id TEXT: Account token ID. --token-id TEXT --token-secret TEXT: Account token secret. --token-secret TEXT --profile TEXT: Modal profile to set credentials for. You can switch the currently active Modal profile with themodal profilecommand. If unspecified, usesdefaultprofile. --profile TEXT modal profile default --no-verify / --no-no-verify: [default: no-no-verify] --no-verify / --no-no-verify --help: Show this message and exit. --help modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal tokenmodal token newmodal token set modal token modal token new modal token set CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal's default setting for verification is no-no-verify, as specified by the --no-verify / --no-no-verify option."
0,What is the purpose of the Modal in this context?,Document OCR job queue,"This tutorial shows you how to use Modal as an infinitely scalable job queue
that can service async tasks from a web app. For the purpose of this tutorial,
we’ve also built aReact + FastAPI web app on Modalthat works together with it, but note that you don’t need a web app running on Modal
to use this pattern. You can submit async tasks to Modal from any Python
application (for example, a regular Django app running on Kubernetes). React + FastAPI web app on Modal Our job queue will handle a single task: running OCR transcription for images.
We’ll make use of a pre-trained Document Understanding model using thedonutpackage to accomplish this. Try
it out for yourselfhere. donut here   ",The purpose of Modal in this context is to function as an infinitely scalable job queue that can service async tasks from a web app.
1,What is the single task that the job queue will handle?,Document OCR job queue,"This tutorial shows you how to use Modal as an infinitely scalable job queue
that can service async tasks from a web app. For the purpose of this tutorial,
we’ve also built aReact + FastAPI web app on Modalthat works together with it, but note that you don’t need a web app running on Modal
to use this pattern. You can submit async tasks to Modal from any Python
application (for example, a regular Django app running on Kubernetes). React + FastAPI web app on Modal Our job queue will handle a single task: running OCR transcription for images.
We’ll make use of a pre-trained Document Understanding model using thedonutpackage to accomplish this. Try
it out for yourselfhere. donut here   ",The job queue will handle a single task: running OCR transcription for images.
2,What have the tutorial makers also built?,Document OCR job queue,"This tutorial shows you how to use Modal as an infinitely scalable job queue
that can service async tasks from a web app. For the purpose of this tutorial,
we’ve also built aReact + FastAPI web app on Modalthat works together with it, but note that you don’t need a web app running on Modal
to use this pattern. You can submit async tasks to Modal from any Python
application (for example, a regular Django app running on Kubernetes). React + FastAPI web app on Modal Our job queue will handle a single task: running OCR transcription for images.
We’ll make use of a pre-trained Document Understanding model using thedonutpackage to accomplish this. Try
it out for yourselfhere. donut here   ",The tutorial makers have also built a React + FastAPI web app on Modal.
3,What is the type of tasks that can be submitted to Modal?,Document OCR job queue,"This tutorial shows you how to use Modal as an infinitely scalable job queue
that can service async tasks from a web app. For the purpose of this tutorial,
we’ve also built aReact + FastAPI web app on Modalthat works together with it, but note that you don’t need a web app running on Modal
to use this pattern. You can submit async tasks to Modal from any Python
application (for example, a regular Django app running on Kubernetes). React + FastAPI web app on Modal Our job queue will handle a single task: running OCR transcription for images.
We’ll make use of a pre-trained Document Understanding model using thedonutpackage to accomplish this. Try
it out for yourselfhere. donut here   ",Asynchronous tasks can be submitted to Modal from any Python application.
4,What model will be used to accomplish the OCR transcription for images?,Document OCR job queue,"This tutorial shows you how to use Modal as an infinitely scalable job queue
that can service async tasks from a web app. For the purpose of this tutorial,
we’ve also built aReact + FastAPI web app on Modalthat works together with it, but note that you don’t need a web app running on Modal
to use this pattern. You can submit async tasks to Modal from any Python
application (for example, a regular Django app running on Kubernetes). React + FastAPI web app on Modal Our job queue will handle a single task: running OCR transcription for images.
We’ll make use of a pre-trained Document Understanding model using thedonutpackage to accomplish this. Try
it out for yourselfhere. donut here   ",A pre-trained Document Understanding model using the donut package will be used to accomplish the OCR transcription for images.
0,What is the purpose of downloading model weights to a local directory?,Document OCR job queue Model cache,"donutdownloads the weights for pre-trained models to a local directory, if those weights don’t already exist.
To decrease start-up time, we want this download to happen just once, even across separate function invocations.
To accomplish this, we use theImage.run_functionmethod, which allows
us to run some code at image build time to save the model weights into the image. donut Image.run_function Image.run_function CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) ""/root/model_cache"" ""naver-clova-ix/donut-base-finetuned-cord-v2"" def download_model_weights None from import ""donut-python==1.0.7"" ""huggingface-hub==0.16.4"" ""transformers==4.21.3"" ""timm==0.5.4"" Copy Copy    Copy ","The purpose is to decrease the start-up time, as it allows the download to happen just once, even across separate function invocations."
3,What is the path where the model weights are saved?,Document OCR job queue Model cache,"donutdownloads the weights for pre-trained models to a local directory, if those weights don’t already exist.
To decrease start-up time, we want this download to happen just once, even across separate function invocations.
To accomplish this, we use theImage.run_functionmethod, which allows
us to run some code at image build time to save the model weights into the image. donut Image.run_function Image.run_function CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) ""/root/model_cache"" ""naver-clova-ix/donut-base-finetuned-cord-v2"" def download_model_weights None from import ""donut-python==1.0.7"" ""huggingface-hub==0.16.4"" ""transformers==4.21.3"" ""timm==0.5.4"" Copy Copy    Copy ",The model weights are saved at /root/model_cache.
6,What libraries are installed into the debian slim image?,Document OCR job queue Model cache,"donutdownloads the weights for pre-trained models to a local directory, if those weights don’t already exist.
To decrease start-up time, we want this download to happen just once, even across separate function invocations.
To accomplish this, we use theImage.run_functionmethod, which allows
us to run some code at image build time to save the model weights into the image. donut Image.run_function Image.run_function CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
)Copy CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) CACHE_PATH =""/root/model_cache""MODEL_NAME =""naver-clova-ix/donut-base-finetuned-cord-v2""defdownload_model_weights() ->None:fromhuggingface_hubimportsnapshot_download

    snapshot_download(repo_id=MODEL_NAME, cache_dir=CACHE_PATH)


image = (
    modal.Image.debian_slim()
    .pip_install(""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"",""timm==0.5.4"",
    )
    .run_function(download_model_weights)
) ""/root/model_cache"" ""naver-clova-ix/donut-base-finetuned-cord-v2"" def download_model_weights None from import ""donut-python==1.0.7"" ""huggingface-hub==0.16.4"" ""transformers==4.21.3"" ""timm==0.5.4"" Copy Copy    Copy ","The libraries installed into the debian slim image are ""donut-python==1.0.7"",""huggingface-hub==0.16.4"",""transformers==4.21.3"", and ""timm==0.5.4""."
0,What is the decorator used to define the handler function in the document OCR job queue?,Document OCR job queue Handler function,"Now let’s define our handler function. Using the@stub.function()decorator, we set up a ModalFunctionthat uses GPUs,
runs on acustom container image,
and automaticallyretriesfailures up to 3 times. @stub.function() Function custom container image retries @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,) gpu=""any"",
    image=image,
    retries=3, ""any"" 3 def parse_receipt image:bytes bytes import import from import from import # Use donut fine-tuned on an OCR dataset. ""<s_cord-v2>"" # Initialize model. ""cuda"" # Run inference. open ""predictions"" 0 print ""Result: "" return Copy Copy    Copy ",The decorator used is @stub.function().
3,What model is used in the function parse_receipt and on what device it runs on?,Document OCR job queue Handler function,"Now let’s define our handler function. Using the@stub.function()decorator, we set up a ModalFunctionthat uses GPUs,
runs on acustom container image,
and automaticallyretriesfailures up to 3 times. @stub.function() Function custom container image retries @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,) gpu=""any"",
    image=image,
    retries=3, ""any"" 3 def parse_receipt image:bytes bytes import import from import from import # Use donut fine-tuned on an OCR dataset. ""<s_cord-v2>"" # Initialize model. ""cuda"" # Run inference. open ""predictions"" 0 print ""Result: "" return Copy Copy    Copy ","The model used is the DonutModel which runs on a ""cuda"" device (GPU)."
6,How many times does the document OCR job queue handler function retry in case of failures?,Document OCR job queue Handler function,"Now let’s define our handler function. Using the@stub.function()decorator, we set up a ModalFunctionthat uses GPUs,
runs on acustom container image,
and automaticallyretriesfailures up to 3 times. @stub.function() Function custom container image retries @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutputCopy @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,)defparse_receipt(image:bytes):importioimporttorchfromdonutimportDonutModelfromPILimportImage# Use donut fine-tuned on an OCR dataset.task_prompt =""<s_cord-v2>""pretrained_model = DonutModel.from_pretrained(
        MODEL_NAME,
        cache_dir=CACHE_PATH,
    )# Initialize model.pretrained_model.half()
    device = torch.device(""cuda"")
    pretrained_model.to(device)# Run inference.input_img = Image.open(io.BytesIO(image))
    output = pretrained_model.inference(image=input_img, prompt=task_prompt)[""predictions""][0]print(""Result: "", output)returnoutput @stub.function(gpu=""any"",
    image=image,
    retries=3,) gpu=""any"",
    image=image,
    retries=3, ""any"" 3 def parse_receipt image:bytes bytes import import from import from import # Use donut fine-tuned on an OCR dataset. ""<s_cord-v2>"" # Initialize model. ""cuda"" # Run inference. open ""predictions"" 0 print ""Result: "" return Copy Copy    Copy ",It automatically retries failures up to 3 times.
0,What is the function being published in the app?,Document OCR job queue Deploy,"Now that we have a function, we can publish it by deploying the app: modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.py modal deploy doc_ocr_jobs.py modal deploy doc_ocr_jobs.py Copy Copy    Copy Once it’s published, we canlook upthis function from another
Python process and submit tasks to it: look up fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) ""example-doc-ocr-jobs"" ""parse_receipt"" Copy Copy    Copy Modal will auto-scale to handle all the tasks queued, and
then scale back down to 0 when there’s no work left. To see how you could use this from a Python web
app, take a look at thereceipt parser frontendtutorial. receipt parser frontend ",The function being published is document OCR job queue. 
3,What does the function do when it's looked up from another Python Process?,Document OCR job queue Deploy,"Now that we have a function, we can publish it by deploying the app: modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.py modal deploy doc_ocr_jobs.py modal deploy doc_ocr_jobs.py Copy Copy    Copy Once it’s published, we canlook upthis function from another
Python process and submit tasks to it: look up fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) ""example-doc-ocr-jobs"" ""parse_receipt"" Copy Copy    Copy Modal will auto-scale to handle all the tasks queued, and
then scale back down to 0 when there’s no work left. To see how you could use this from a Python web
app, take a look at thereceipt parser frontendtutorial. receipt parser frontend ",It submits tasks to it.
6,What is suggested to learn how to use this from a Python web app?,Document OCR job queue Deploy,"Now that we have a function, we can publish it by deploying the app: modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.pyCopy modal deploy doc_ocr_jobs.py modal deploy doc_ocr_jobs.py modal deploy doc_ocr_jobs.py Copy Copy    Copy Once it’s published, we canlook upthis function from another
Python process and submit tasks to it: look up fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image)Copy fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) fn = modal.Function.lookup(""example-doc-ocr-jobs"",""parse_receipt"")
fn.spawn(my_image) ""example-doc-ocr-jobs"" ""parse_receipt"" Copy Copy    Copy Modal will auto-scale to handle all the tasks queued, and
then scale back down to 0 when there’s no work left. To see how you could use this from a Python web
app, take a look at thereceipt parser frontendtutorial. receipt parser frontend ",It is suggested to look at the receipt parser frontend tutorial.
0,What is the purpose of the parse_receipt function?,Document OCR job queue Run manually,"We can also triggerparse_receiptmanually for easier debugging:modal run doc_ocr_jobs::stub.mainTo try it out, you can find some
example receiptshere. parse_receipt modal run doc_ocr_jobs::stub.main here @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint() def main from import ""receipt.png"" if with open ""rb"" as else ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" print Copy Copy    Copy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manually Document OCR job queue Define a Stub Model cache Handler function Deploy Run manually Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy ",It's used to manually trigger the document OCR job queue for easier debugging.
3,What happens when receipt.png does not exist in the defined path in the code snippet?,Document OCR job queue Run manually,"We can also triggerparse_receiptmanually for easier debugging:modal run doc_ocr_jobs::stub.mainTo try it out, you can find some
example receiptshere. parse_receipt modal run doc_ocr_jobs::stub.main here @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint() def main from import ""receipt.png"" if with open ""rb"" as else ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" print Copy Copy    Copy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manually Document OCR job queue Define a Stub Model cache Handler function Deploy Run manually Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy ","The image found at the URL ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" is read."
6,What is the purpose of the function @stub.local_entrypoint() defined in the code?,Document OCR job queue Run manually,"We can also triggerparse_receiptmanually for easier debugging:modal run doc_ocr_jobs::stub.mainTo try it out, you can find some
example receiptshere. parse_receipt modal run doc_ocr_jobs::stub.main here @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint() def main from import ""receipt.png"" if with open ""rb"" as else ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" print Copy Copy    Copy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manually Document OCR job queue Define a Stub Model cache Handler function Deploy Run manually Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy ",It marks the function main() as the entry point when the stub is run locally.
0,What is the name of the function that can be triggered manually for easier debugging?,Document OCR job queue Run manually,"We can also triggerparse_receiptmanually for easier debugging:modal run doc_ocr_jobs::stub.mainTo try it out, you can find some
example receiptshere. parse_receipt modal run doc_ocr_jobs::stub.main here @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint() def main from import ""receipt.png"" if with open ""rb"" as else ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" print Copy Copy    Copy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manually Document OCR job queue Define a Stub Model cache Handler function Deploy Run manually Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 09_job_queues/doc_ocr_jobs.py $ modal run 09_job_queues/doc_ocr_jobs.py modal run 09_job_queues/doc_ocr_jobs.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The function is called parse_receipt.
3,"What is the default image used if no ""receipt.png"" file is found?",Document OCR job queue Run manually,"We can also triggerparse_receiptmanually for easier debugging:modal run doc_ocr_jobs::stub.mainTo try it out, you can find some
example receiptshere. parse_receipt modal run doc_ocr_jobs::stub.main here @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint() def main from import ""receipt.png"" if with open ""rb"" as else ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" print Copy Copy    Copy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manually Document OCR job queue Define a Stub Model cache Handler function Deploy Run manually Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 09_job_queues/doc_ocr_jobs.py $ modal run 09_job_queues/doc_ocr_jobs.py modal run 09_job_queues/doc_ocr_jobs.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The default image used is a file from ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp""."
6,What repository should be cloned to run these examples?,Document OCR job queue Run manually,"We can also triggerparse_receiptmanually for easier debugging:modal run doc_ocr_jobs::stub.mainTo try it out, you can find some
example receiptshere. parse_receipt modal run doc_ocr_jobs::stub.main here @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image))Copy @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint()defmain():frompathlibimportPath

    receipt_filename = Path(__file__).parent /""receipt.png""ifreceipt_filename.exists():withopen(receipt_filename,""rb"")asf:
            image = f.read()else:
        image = urllib.request.urlopen(""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"").read()print(parse_receipt.remote(image)) @stub.local_entrypoint() def main from import ""receipt.png"" if with open ""rb"" as else ""https://nwlc.org/wp-content/uploads/2022/01/Brandys-walmart-receipt-8.webp"" print Copy Copy    Copy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manuallyTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Document OCR job queueDefine a StubModel cacheHandler functionDeployRun manually Document OCR job queue Define a Stub Model cache Handler function Deploy Run manually Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 09_job_queues/doc_ocr_jobs.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 09_job_queues/doc_ocr_jobs.py $ modal run 09_job_queues/doc_ocr_jobs.py modal run 09_job_queues/doc_ocr_jobs.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""modal-examples"" repository should be cloned from ""https://github.com/modal-labs/modal-examples""."
0,"What does the shortcode ""t4"" represent in GPU configuration?",modalgpu,"GPU configuration shortcodes GPU configuration shortcodes The following are the validstrvalues for thegpuparameter of@stub.function. str gpu @stub.function @stub.function “t4” →GPU(T4, count=1)“l4” →GPU(L4, count=1)“a100” →GPU(A100-40GB, count=1)“a10g” →GPU(A10G, count=1)“inf2” →GPU(INFERENTIA2, count=1)“any” →GPU(Any, count=1) “t4” →GPU(T4, count=1) GPU(T4, count=1) “l4” →GPU(L4, count=1) GPU(L4, count=1) “a100” →GPU(A100-40GB, count=1) GPU(A100-40GB, count=1) “a10g” →GPU(A10G, count=1) GPU(A10G, count=1) “inf2” →GPU(INFERENTIA2, count=1) GPU(INFERENTIA2, count=1) “any” →GPU(Any, count=1) GPU(Any, count=1) Other configurations can be created using the constructors documented below. ","It represents GPU(T4, count=1)."
3,"What does the ""a100"" shortcode indicate in the GPU configuration?",modalgpu,"GPU configuration shortcodes GPU configuration shortcodes The following are the validstrvalues for thegpuparameter of@stub.function. str gpu @stub.function @stub.function “t4” →GPU(T4, count=1)“l4” →GPU(L4, count=1)“a100” →GPU(A100-40GB, count=1)“a10g” →GPU(A10G, count=1)“inf2” →GPU(INFERENTIA2, count=1)“any” →GPU(Any, count=1) “t4” →GPU(T4, count=1) GPU(T4, count=1) “l4” →GPU(L4, count=1) GPU(L4, count=1) “a100” →GPU(A100-40GB, count=1) GPU(A100-40GB, count=1) “a10g” →GPU(A10G, count=1) GPU(A10G, count=1) “inf2” →GPU(INFERENTIA2, count=1) GPU(INFERENTIA2, count=1) “any” →GPU(Any, count=1) GPU(Any, count=1) Other configurations can be created using the constructors documented below. ","It indicates GPU(A100-40GB, count=1)."
6,"What does the ""any"" shortcode represent in GPU configuration?",modalgpu,"GPU configuration shortcodes GPU configuration shortcodes The following are the validstrvalues for thegpuparameter of@stub.function. str gpu @stub.function @stub.function “t4” →GPU(T4, count=1)“l4” →GPU(L4, count=1)“a100” →GPU(A100-40GB, count=1)“a10g” →GPU(A10G, count=1)“inf2” →GPU(INFERENTIA2, count=1)“any” →GPU(Any, count=1) “t4” →GPU(T4, count=1) GPU(T4, count=1) “l4” →GPU(L4, count=1) GPU(L4, count=1) “a100” →GPU(A100-40GB, count=1) GPU(A100-40GB, count=1) “a10g” →GPU(A10G, count=1) GPU(A10G, count=1) “inf2” →GPU(INFERENTIA2, count=1) GPU(INFERENTIA2, count=1) “any” →GPU(Any, count=1) GPU(Any, count=1) Other configurations can be created using the constructors documented below. ","It represents GPU(Any, count=1)."
0,What is the name of the NVIDIA Tensor Core GPU class described?,modalgpu modalgpuA10G,"classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig) classA10G(modal.gpu._GPUConfig) classA10G(modal.gpu._GPUConfig) class A10G Copy Copy    Copy NVIDIA A10G Tensor CoreGPU class. NVIDIA A10G Tensor Core A10G GPUs deliver up to 3.3x better ML training performance, 3x better ML inference performance,
and 3x better graphics performance, in comparison to NVIDIA T4 GPUs. def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy ",The name is A10G.
3,How much better is the graphics performance of the NVIDIA A10G compared to NVIDIA T4 GPUs?,modalgpu modalgpuA10G,"classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig) classA10G(modal.gpu._GPUConfig) classA10G(modal.gpu._GPUConfig) class A10G Copy Copy    Copy NVIDIA A10G Tensor CoreGPU class. NVIDIA A10G Tensor Core A10G GPUs deliver up to 3.3x better ML training performance, 3x better ML inference performance,
and 3x better graphics performance, in comparison to NVIDIA T4 GPUs. def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy ",The NVIDIA A10G's graphics performance is 3x better than the NVIDIA T4 GPUs.
6,"What is the default value of the ""count"" variable in a classA10G instance?",modalgpu modalgpuA10G,"classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig)Copy classA10G(modal.gpu._GPUConfig) classA10G(modal.gpu._GPUConfig) classA10G(modal.gpu._GPUConfig) class A10G Copy Copy    Copy NVIDIA A10G Tensor CoreGPU class. NVIDIA A10G Tensor Core A10G GPUs deliver up to 3.3x better ML training performance, 3x better ML inference performance,
and 3x better graphics performance, in comparison to NVIDIA T4 GPUs. def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    *,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy ","The default value of the ""count"" variable is set to 1."
0,What is the class Any in modal.gpu._GPUConfig?,modalgpu modalgpuAny,"classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig) classAny(modal.gpu._GPUConfig) classAny(modal.gpu._GPUConfig) class Any Copy Copy    Copy Selects any one of the GPU classes available within Modal, according to availability. def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1): def__init__(self, *, count:int=1): def__init__(self, *, count:int=1): def __init__ self, *, count:int=1 int 1 Copy Copy    Copy ","It selects any one of the GPU classes available within Modal, according to availability."
3,What does the _GPUConfig do in modal.gpu?,modalgpu modalgpuAny,"classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig) classAny(modal.gpu._GPUConfig) classAny(modal.gpu._GPUConfig) class Any Copy Copy    Copy Selects any one of the GPU classes available within Modal, according to availability. def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1): def__init__(self, *, count:int=1): def__init__(self, *, count:int=1): def __init__ self, *, count:int=1 int 1 Copy Copy    Copy ",It sets the configuration of GPU classes within Modal.
6,What guidance does modal.gpu offer in choosing among GPU classes?,modalgpu modalgpuAny,"classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig)Copy classAny(modal.gpu._GPUConfig) classAny(modal.gpu._GPUConfig) classAny(modal.gpu._GPUConfig) class Any Copy Copy    Copy Selects any one of the GPU classes available within Modal, according to availability. def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1):Copy def__init__(self, *, count:int=1): def__init__(self, *, count:int=1): def__init__(self, *, count:int=1): def __init__ self, *, count:int=1 int 1 Copy Copy    Copy ",It selects any one of the GPU classes according to availability.
0,What class does the NVIDIA L4GPU belong to?,modalgpu modalgpuL4,"classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig) classL4(modal.gpu._GPUConfig) classL4(modal.gpu._GPUConfig) class L4 Copy Copy    Copy NVIDIA L4GPU class. NVIDIA L4 Mid-tier GPU option, providing 24GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy ",It belongs to the classL4(modal.gpu._GPUConfig).
3,What is the memory capacity of the NVIDIA L4GPU option?,modalgpu modalgpuL4,"classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig) classL4(modal.gpu._GPUConfig) classL4(modal.gpu._GPUConfig) class L4 Copy Copy    Copy NVIDIA L4GPU class. NVIDIA L4 Mid-tier GPU option, providing 24GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy ",The NVIDIA L4 Mid-tier GPU option provides 24GiB of GPU memory.
6,What type is the parameter 'count' in the __init__ method?,modalgpu modalgpuL4,"classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig)Copy classL4(modal.gpu._GPUConfig) classL4(modal.gpu._GPUConfig) classL4(modal.gpu._GPUConfig) class L4 Copy Copy    Copy NVIDIA L4GPU class. NVIDIA L4 Mid-tier GPU option, providing 24GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy ",The 'count' parameter is of type int.
0,What is the class name of the NVIDIA low-cost GPU option?,modalgpu modalgpuT4,"classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) class T4 Copy Copy    Copy NVIDIA T4GPU class. NVIDIA T4 Low-cost GPU option, providing 16GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpu modal.gpu.A100 modal.gpu.A10G modal.gpu.Any modal.gpu.L4 modal.gpu.T4 CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The class name is T4.
3,What is the default number of GPUs per container in the T4 class?,modalgpu modalgpuT4,"classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) class T4 Copy Copy    Copy NVIDIA T4GPU class. NVIDIA T4 Low-cost GPU option, providing 16GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpu modal.gpu.A100 modal.gpu.A10G modal.gpu.Any modal.gpu.L4 modal.gpu.T4 CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The default number of GPUs per container is 1.
6,"When is the copyright year stated for Modal Labs, Inc.?",modalgpu modalgpuT4,"classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) class T4 Copy Copy    Copy NVIDIA T4GPU class. NVIDIA T4 Low-cost GPU option, providing 16GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpu modal.gpu.A100 modal.gpu.A10G modal.gpu.Any modal.gpu.L4 modal.gpu.T4 CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The copyright year stated is 2023.
0,What is the purpose of the classT4 in the modal.gpu framework?,modalgpu modalgpuT4,"classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) class T4 Copy Copy    Copy NVIDIA T4GPU class. NVIDIA T4 Low-cost GPU option, providing 16GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpu modal.gpu.A100 modal.gpu.A10G modal.gpu.Any modal.gpu.L4 modal.gpu.T4 CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It is meant for managing the NVIDIA T4GPU class configurations in the framework.
3,What does the 'count' variable represent in the 'init' method of the class T4?,modalgpu modalgpuT4,"classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) class T4 Copy Copy    Copy NVIDIA T4GPU class. NVIDIA T4 Low-cost GPU option, providing 16GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpu modal.gpu.A100 modal.gpu.A10G modal.gpu.Any modal.gpu.L4 modal.gpu.T4 CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'count' represents the number of GPUs per container.
6,What is the benefit of specifying the number of GPUs per container in the classT4?,modalgpu modalgpuT4,"classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig)Copy classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) classT4(modal.gpu._GPUConfig) class T4 Copy Copy    Copy NVIDIA T4GPU class. NVIDIA T4 Low-cost GPU option, providing 16GiB of GPU memory. def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.):Copy def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def__init__(self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU.): def __init__ self,
    count:int=1,# Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. int 1 # Number of GPUs per container. Defaults to 1. Useful if you have very large models that don't fit on a single GPU. Copy Copy    Copy modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpumodal.gpu.A100modal.gpu.A10Gmodal.gpu.Anymodal.gpu.L4modal.gpu.T4 modal.gpu modal.gpu.A100 modal.gpu.A10G modal.gpu.Any modal.gpu.L4 modal.gpu.T4 CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",Specifying the number of GPUs per container can be useful if you have very large models that don't fit on a single GPU.
0,What does the class Mount do?,modalMount,"classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object) classMount(modal.object.Object) classMount(modal.object.Object) class Mount object Copy Copy    Copy Create a mount for a local directory or file that can be attached
to one or more Modal functions. Usage Usage importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) import import @stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")]) mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")] ""~/foo"", remote_path=""/root/foo"" ""~/foo"" ""/root/foo"" def f # `/root/foo` has the contents of `~/foo`. print ""/root/foo/"" Copy Copy    Copy Modal syncs the contents of the local directory every time the app runs, but uses the hash of
the file’s contents to skip uploading files that have been uploaded before. def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",It creates a mount for a local directory or file that can be attached to one or more Modal functions.
1,"What does the command `modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")` do?",modalMount,"classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object) classMount(modal.object.Object) classMount(modal.object.Object) class Mount object Copy Copy    Copy Create a mount for a local directory or file that can be attached
to one or more Modal functions. Usage Usage importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) import import @stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")]) mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")] ""~/foo"", remote_path=""/root/foo"" ""~/foo"" ""/root/foo"" def f # `/root/foo` has the contents of `~/foo`. print ""/root/foo/"" Copy Copy    Copy Modal syncs the contents of the local directory every time the app runs, but uses the hash of
the file’s contents to skip uploading files that have been uploaded before. def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","It creates a mount from a local directory ""~/foo"" to the remote path ""/root/foo""."
2,"What is the role of the function `os.listdir(""/root/foo/"")` in the provided code sample?",modalMount,"classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object) classMount(modal.object.Object) classMount(modal.object.Object) class Mount object Copy Copy    Copy Create a mount for a local directory or file that can be attached
to one or more Modal functions. Usage Usage importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) import import @stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")]) mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")] ""~/foo"", remote_path=""/root/foo"" ""~/foo"" ""/root/foo"" def f # `/root/foo` has the contents of `~/foo`. print ""/root/foo/"" Copy Copy    Copy Modal syncs the contents of the local directory every time the app runs, but uses the hash of
the file’s contents to skip uploading files that have been uploaded before. def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","This function prints the contents of the directory ""/root/foo/""."
3,What is the benefit of how Modal syncs the contents of the local directory every time the app runs?,modalMount,"classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object) classMount(modal.object.Object) classMount(modal.object.Object) class Mount object Copy Copy    Copy Create a mount for a local directory or file that can be attached
to one or more Modal functions. Usage Usage importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) import import @stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")]) mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")] ""~/foo"", remote_path=""/root/foo"" ""~/foo"" ""/root/foo"" def f # `/root/foo` has the contents of `~/foo`. print ""/root/foo/"" Copy Copy    Copy Modal syncs the contents of the local directory every time the app runs, but uses the hash of
the file’s contents to skip uploading files that have been uploaded before. def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","Modal uses the hash of the file's contents to skip uploading files that have been uploaded before, which can save time and resources."
4,What does the `__init__` function do within this content?,modalMount,"classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object)Copy classMount(modal.object.Object) classMount(modal.object.Object) classMount(modal.object.Object) class Mount object Copy Copy    Copy Create a mount for a local directory or file that can be attached
to one or more Modal functions. Usage Usage importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/""))Copy importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) importmodalimportos
stub = modal.Stub()@stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")])deff():# `/root/foo` has the contents of `~/foo`.print(os.listdir(""/root/foo/"")) import import @stub.function(mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")]) mounts=[modal.Mount.from_local_dir(""~/foo"", remote_path=""/root/foo"")] ""~/foo"", remote_path=""/root/foo"" ""~/foo"" ""/root/foo"" def f # `/root/foo` has the contents of `~/foo`. print ""/root/foo/"" Copy Copy    Copy Modal syncs the contents of the local directory every time the app runs, but uses the hash of
the file’s contents to skip uploading files that have been uploaded before. def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",The `__init__` function is a constructor method in python that is automatically called to allocate memory when a new object/instance of a class is created.
0,What function is deprecated for generic objects?,modalMount persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",Object.persist
3,"What kind of parameter does the function defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) require?",modalMount persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ","It requires a label as a string, namespace as api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, and an optional environment name as string. "
6,What can be used as an optional parameter in defpersist?,modalMount persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",Environment_name which can be a string.
0,What method is used to retrieve an object with a given name and tag?,modalMount fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The method used is 'from_name'.
3,How do you attach a retrieved object to a stub?,modalMount fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","A retrieved object can be attached to a stub with the '=' operator. For example: stub.my_secret = Secret.from_name(""my-secret"")."
6,What is an event where you would use this method?,modalMount fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",This method is utilized when attaching the object to a stub or function.
0,What is the purpose of the 'lookup' method in this context?,modalMount lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The 'lookup' method is used to find an object with a given name and tag. It can be used for objects like functions, network file systems, and secrets, providing a reference to the object in a running app."
3,How would you use the 'lookup' method to find a function from a different application?,modalMount lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You can use it as follows: other_function = Function.lookup(""other-app"",""function"")."
6,What namespaces are used by the 'lookup' method?,modalMount lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The namespace used by the 'lookup' method is 'api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE'.
0,What is the function of add_local_dir()?,modalMount addlocaldir,"@typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typechecked def add_local_dir self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True, Union str # Where the directory is placed within in the mount Union str None None # Filter function for file selection; defaults to including all files Optional Callable str bool None # add files from subdirectories as well bool True ""_Mount"" Copy Copy    Copy Add a local directory to theMountobject. Mount ",Add_local_dir() is a function to add a local directory to the Mount object.
3,Where is the directory placed within the mount in add_local_dir() function?,modalMount addlocaldir,"@typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typechecked def add_local_dir self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True, Union str # Where the directory is placed within in the mount Union str None None # Filter function for file selection; defaults to including all files Optional Callable str bool None # add files from subdirectories as well bool True ""_Mount"" Copy Copy    Copy Add a local directory to theMountobject. Mount ",The directory is placed according to the path defined in the 'remote_path' parameter.
6,Can the add_local_dir() function add files from subdirectories as well?,modalMount addlocaldir,"@typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typecheckeddefadd_local_dir(self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @typechecked def add_local_dir self,
    local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection; defaults to including all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True, Union str # Where the directory is placed within in the mount Union str None None # Filter function for file selection; defaults to including all files Optional Callable str bool None # add files from subdirectories as well bool True ""_Mount"" Copy Copy    Copy Add a local directory to theMountobject. Mount ","Yes, the function can add files from subdirectories if the 'recursive' parameter is set to true."
0,What is the function of the 'from_local_dir' method in the given code?,modalMount fromlocaldir,"@staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod @typechecked def from_local_dir local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True, Union str # Where the directory is placed within in the mount Union str None None # Filter function for file selection - default all files Optional Callable str bool None # add files from subdirectories as well bool True ""_Mount"" Copy Copy    Copy Create aMountfrom a local directory. Mount Usage Usage assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) ""~/assets"" lambda not "".venv"" in ""/assets"" Copy Copy    Copy ",It is used to create a Mount from a local directory.
3,What is the purpose of the 'condition' in the 'from_local_dir' function?,modalMount fromlocaldir,"@staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod @typechecked def from_local_dir local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True, Union str # Where the directory is placed within in the mount Union str None None # Filter function for file selection - default all files Optional Callable str bool None # add files from subdirectories as well bool True ""_Mount"" Copy Copy    Copy Create aMountfrom a local directory. Mount Usage Usage assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) ""~/assets"" lambda not "".venv"" in ""/assets"" Copy Copy    Copy ",'Condition' is a filter function for file selection. By default all files are selected.
6,What is the usage of 'remote_path' argument in the 'from_local_dir' function?,modalMount fromlocaldir,"@staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_dir(local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True,) ->""_Mount"": @staticmethod @typechecked def from_local_dir local_path:Union[str, Path],
    *,# Where the directory is placed within in the mountremote_path:Union[str, PurePosixPath,None] =None,# Filter function for file selection - default all filescondition:Optional[Callable[[str],bool]] =None,# add files from subdirectories as wellrecursive:bool=True, Union str # Where the directory is placed within in the mount Union str None None # Filter function for file selection - default all files Optional Callable str bool None # add files from subdirectories as well bool True ""_Mount"" Copy Copy    Copy Create aMountfrom a local directory. Mount Usage Usage assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
)Copy assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) assets = modal.Mount.from_local_dir(""~/assets"",
    condition=lambdapth:not"".venv""inpth,
    remote_path=""/assets"",
) ""~/assets"" lambda not "".venv"" in ""/assets"" Copy Copy    Copy ",'Remote_path' determines where the directory is placed within in the mount.
0,What is the function of add_local_file in the given content?,modalMount addlocalfile,"@typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typechecked def add_local_file self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None Union str Union str None None ""_Mount"" Copy Copy    Copy Add a local file to theMountobject. Mount ",The function of add_local_file in the given content is to add a local file to the Mount object.
3,What are the types of the local_path parameter of the function?,modalMount addlocalfile,"@typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typechecked def add_local_file self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None Union str Union str None None ""_Mount"" Copy Copy    Copy Add a local file to theMountobject. Mount ",The types of the local_path parameter can either be a string or a Path.
6,What is the return type of the add_local_file function?,modalMount addlocalfile,"@typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typecheckeddefadd_local_file(self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @typechecked def add_local_file self, local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None Union str Union str None None ""_Mount"" Copy Copy    Copy Add a local file to theMountobject. Mount ","The function add_local_file returns ""_Mount""."
0,What function is being used to mount a single local file?,modalMount fromlocalfile,"@staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod @typechecked def from_local_file local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None Union str Union str None None ""_Mount"" Copy Copy    Copy Create aMountmounting a single local file. Mount Usage Usage # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container. ""~/profiles.yml"" ""/root/dbt_profile/profiles.yml"" Copy Copy    Copy ",The function being used is modal.Mount.from_local_file.
3,What is the specified remote path?,modalMount fromlocalfile,"@staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod @typechecked def from_local_file local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None Union str Union str None None ""_Mount"" Copy Copy    Copy Create aMountmounting a single local file. Mount Usage Usage # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container. ""~/profiles.yml"" ""/root/dbt_profile/profiles.yml"" Copy Copy    Copy ","The specified remote path is ""/root/dbt_profile/profiles.yml""."
6,What is the return type of the function from_local_file?,modalMount fromlocalfile,"@staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"":Copy @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod@typecheckeddeffrom_local_file(local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None) ->""_Mount"": @staticmethod @typechecked def from_local_file local_path:Union[str, Path], remote_path:Union[str, PurePosixPath,None] =None Union str Union str None None ""_Mount"" Copy Copy    Copy Create aMountmounting a single local file. Mount Usage Usage # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
)Copy # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container.dbt_profiles = modal.Mount.from_local_file(
    local_path=""~/profiles.yml"",
    remote_path=""/root/dbt_profile/profiles.yml""),
) # Mount the DBT profile in user's home directory into container. ""~/profiles.yml"" ""/root/dbt_profile/profiles.yml"" Copy Copy    Copy ","The return type of the function from_local_file is ""_Mount""."
0,What functionality does the from_local_python_packages method provide?,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It provides the functionality to make local modules listed in module_names available inside the container.
3,How do you import the modal and local module?,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","You can import the modal and the local module with the following code: import modal, import my_local_module."
5,You can use it in a function as follows: ,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",stub = modal.Stub()@stub.function(mounts=[
6,"    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),",modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",]) def f(): 
8,Who is the copyright holder for the information given?,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright holder is Modal Labs, Inc."
0,What does modal.Mount.from_local_python_packages function do?,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It makes local modules listed in module_names available inside the container by mounting the local path of each module’s package to a directory inside the container that’s on PYTHONPATH.
3,What does the function do_stuff indicate in the context?,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It's a generic placeholder for any function in your local module that you might want to call. 
6,What is the information in the copyright statement?,modalMount fromlocalpythonpackages,"@staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"":Copy @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethoddeffrom_local_python_packages(*module_names:str) ->""_Mount"": @staticmethod def from_local_python_packages *module_names:str str ""_Mount"" Copy Copy    Copy Returns amodal.Mountthat makes local modules listed inmodule_namesavailable inside the container.
This works by mounting the local path of each module’s package to a directory inside the container that’s onPYTHONPATH. modal.Mount module_names PYTHONPATH Usage Usage importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
])deff():
    my_local_module.do_stuff() import import @stub.function(mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
]) mounts=[
    modal.Mount.from_local_python_packages(""my_local_module"",""my_other_module""),
] ""my_local_module"",""my_other_module"" ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mountfrom_idpersistfrom_namelookupadd_local_dirfrom_local_diradd_local_filefrom_local_filefrom_local_python_packages modal.Mount from_id persist from_name lookup add_local_dir from_local_dir add_local_file from_local_file from_local_python_packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The information in the copyright statement is that all rights to the documented example belong to Modal Labs, Inc. and it dates up until the year 2023."
0,What is themodal.Volume designed for?,Volumes beta,"Themodal.Volumeis a mutable volume built for
high-performance file serving. Like themodal.NetworkFileSystem, these
volumes can be simultaneously attached to multiple Modal functions, supporting
concurrent reading and writing. But unlike themodal.NetworkFileSystem, themodal.Volumehas been designed for fast reads and does not automatically
synchronize writes between mounted volumes. modal.Volume modal.Volume modal.NetworkFileSystem modal.NetworkFileSystem modal.NetworkFileSystem modal.Volume Themodal.Volumeworks best with write-once, read-many I/O workloads. modal.Volume Volumes work best when they contain less then 50,000 files and directories. The
latency to attach or modify a volume scales linearly with the number of files in
the volume, and past a few tens of thousands of files the linear component
starts to dominate the fixed overhead. ",The themodal.Volume is designed for high-performance file serving.
3,What is the difference between the themodal.NetworkFileSystem and themodal.Volume?,Volumes beta,"Themodal.Volumeis a mutable volume built for
high-performance file serving. Like themodal.NetworkFileSystem, these
volumes can be simultaneously attached to multiple Modal functions, supporting
concurrent reading and writing. But unlike themodal.NetworkFileSystem, themodal.Volumehas been designed for fast reads and does not automatically
synchronize writes between mounted volumes. modal.Volume modal.Volume modal.NetworkFileSystem modal.NetworkFileSystem modal.NetworkFileSystem modal.Volume Themodal.Volumeworks best with write-once, read-many I/O workloads. modal.Volume Volumes work best when they contain less then 50,000 files and directories. The
latency to attach or modify a volume scales linearly with the number of files in
the volume, and past a few tens of thousands of files the linear component
starts to dominate the fixed overhead. ","Unlike themodal.NetworkFileSystem, themodal.Volume has been designed for fast reads and does not automatically synchronize writes between mounted volumes."
6,What happens when the number of files in the themodal.Volume increases?,Volumes beta,"Themodal.Volumeis a mutable volume built for
high-performance file serving. Like themodal.NetworkFileSystem, these
volumes can be simultaneously attached to multiple Modal functions, supporting
concurrent reading and writing. But unlike themodal.NetworkFileSystem, themodal.Volumehas been designed for fast reads and does not automatically
synchronize writes between mounted volumes. modal.Volume modal.Volume modal.NetworkFileSystem modal.NetworkFileSystem modal.NetworkFileSystem modal.Volume Themodal.Volumeworks best with write-once, read-many I/O workloads. modal.Volume Volumes work best when they contain less then 50,000 files and directories. The
latency to attach or modify a volume scales linearly with the number of files in
the volume, and past a few tens of thousands of files the linear component
starts to dominate the fixed overhead. ","The latency to attach or modify a volume scales linearly with the number of files in the volume, and past a few tens of thousands of files, the linear component starts to dominate the fixed overhead."
0,What is the basic structure of a machine learning model solution in this context?,Volumes beta Model serving,"A single ML model can be served by simply baking it into amodal.Imageat
build time usingrun_function. But
if you have dozens of models to serve, or otherwise need to decouple image
builds from model storage and serving, use amodal.Volume. modal.Image run_function run_function modal.Volume Volumes can be used to save a large number of ML models and later serve any one
of them at runtime with much better performance than can be achieved with amodal.NetworkFileSystem. modal.NetworkFileSystem modal.NetworkFileSystem This snippet below shows the basic structure of the solution. importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) import ""model-store"" ""/vol/models"" @stub.function(volumes={model_store_path: stub.volume}, gpu=""any"") volumes={model_store_path: stub.volume}, gpu=""any"" ""any"" def run_training # Persist changes @stub.function(volumes={model_store_path: stub.volume}) volumes={model_store_path: stub.volume} def inference model_id:str, request str try except # Fetch latest changes return Copy Copy    Copy ","The solution involves two main steps: training a model and running inference. For training, a model is trained and then saved to a ""model_store_path"". Any changes are then committed to the volume. For inference, the model is loaded from the same ""model_store_path"" and if not found, the volume is reloaded."
3,What happens if an attempt is made to load a model from the 'model_store_path' and it's not found?,Volumes beta Model serving,"A single ML model can be served by simply baking it into amodal.Imageat
build time usingrun_function. But
if you have dozens of models to serve, or otherwise need to decouple image
builds from model storage and serving, use amodal.Volume. modal.Image run_function run_function modal.Volume Volumes can be used to save a large number of ML models and later serve any one
of them at runtime with much better performance than can be achieved with amodal.NetworkFileSystem. modal.NetworkFileSystem modal.NetworkFileSystem This snippet below shows the basic structure of the solution. importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) import ""model-store"" ""/vol/models"" @stub.function(volumes={model_store_path: stub.volume}, gpu=""any"") volumes={model_store_path: stub.volume}, gpu=""any"" ""any"" def run_training # Persist changes @stub.function(volumes={model_store_path: stub.volume}) volumes={model_store_path: stub.volume} def inference model_id:str, request str try except # Fetch latest changes return Copy Copy    Copy ","If a model is not found, the volume is reloaded to fetch the latest changes."
6,What action is taken in the 'run_training' function?,Volumes beta Model serving,"A single ML model can be served by simply baking it into amodal.Imageat
build time usingrun_function. But
if you have dozens of models to serve, or otherwise need to decouple image
builds from model storage and serving, use amodal.Volume. modal.Image run_function run_function modal.Volume Volumes can be used to save a large number of ML models and later serve any one
of them at runtime with much better performance than can be achieved with amodal.NetworkFileSystem. modal.NetworkFileSystem modal.NetworkFileSystem This snippet below shows the basic structure of the solution. importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request)Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.persisted(""model-store"")
model_store_path =""/vol/models""@stub.function(volumes={model_store_path: stub.volume}, gpu=""any"")defrun_training():
    model = train(...)
    save(model_store_path, model)
    stub.volume.commit()# Persist changes@stub.function(volumes={model_store_path: stub.volume})definference(model_id:str, request):try:
        model = load_model(model_store_path, model_id)exceptNotFound:
        stub.volume.reload()# Fetch latest changesmodel = load_model(model_store_path, model_id)returnmodel.run(request) import ""model-store"" ""/vol/models"" @stub.function(volumes={model_store_path: stub.volume}, gpu=""any"") volumes={model_store_path: stub.volume}, gpu=""any"" ""any"" def run_training # Persist changes @stub.function(volumes={model_store_path: stub.volume}) volumes={model_store_path: stub.volume} def inference model_id:str, request str try except # Fetch latest changes return Copy Copy    Copy ","In the 'run_training' function, a model is trained, saved to the 'model_store_path' and then the volume is committed to persist the changes."
0,What are checkpoints in ML models?,Volumes beta Model checkpointing,"Checkpoints are snapshots of an ML model and can be configured by the callback
functions of ML frameworks. You can use saved checkpoints to restart a training
job from the last saved checkpoint. This is particularly helpful in managingpreemption. preemption Huggingfacetransformers transformers Use this callback class to have your checkpoints committed to your volume: fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() from import class CheckpointCallback TrainerCallback def __init__ self, volume def on_save self, args, state, control, **kwargs if print ""running commit on modal.Volume after model checkpoint"" Copy Copy    Copy This callback class should be included in thecallbacksargument to a Huggingface transformersTrainer: callbacks callbacks Trainer Trainer importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) import ""/vol"" @stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},) gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume}, ""A10g"" 7_200 def finetune from import str ""model"" Copy Copy    Copy As shown above, you must also set the Trainer’soutput_dirto write into the volume’s mount location. output_dir output_dir ",Checkpoints are snapshots of an ML model and can be configured by the callback functions of ML frameworks. They are used to restart a training job from the last saved checkpoint.
3,What is the purpose of the CheckpointCallback class in the code?,Volumes beta Model checkpointing,"Checkpoints are snapshots of an ML model and can be configured by the callback
functions of ML frameworks. You can use saved checkpoints to restart a training
job from the last saved checkpoint. This is particularly helpful in managingpreemption. preemption Huggingfacetransformers transformers Use this callback class to have your checkpoints committed to your volume: fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() from import class CheckpointCallback TrainerCallback def __init__ self, volume def on_save self, args, state, control, **kwargs if print ""running commit on modal.Volume after model checkpoint"" Copy Copy    Copy This callback class should be included in thecallbacksargument to a Huggingface transformersTrainer: callbacks callbacks Trainer Trainer importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) import ""/vol"" @stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},) gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume}, ""A10g"" 7_200 def finetune from import str ""model"" Copy Copy    Copy As shown above, you must also set the Trainer’soutput_dirto write into the volume’s mount location. output_dir output_dir ",The CheckpointCallback class is used to commit model checkpoints to the volume when the save operation is triggered.
6,What does the Trainer's 'output_dir' refer to in this context?,Volumes beta Model checkpointing,"Checkpoints are snapshots of an ML model and can be configured by the callback
functions of ML frameworks. You can use saved checkpoints to restart a training
job from the last saved checkpoint. This is particularly helpful in managingpreemption. preemption Huggingfacetransformers transformers Use this callback class to have your checkpoints committed to your volume: fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit()Copy fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() fromtransformersimportTrainerCallbackclassCheckpointCallback(TrainerCallback):def__init__(self, volume):
        self.volume = volumedefon_save(self, args, state, control, **kwargs):ifstate.is_world_process_zero:print(""running commit on modal.Volume after model checkpoint"")
            self.volume.commit() from import class CheckpointCallback TrainerCallback def __init__ self, volume def on_save self, args, state, control, **kwargs if print ""running commit on modal.Volume after model checkpoint"" Copy Copy    Copy This callback class should be included in thecallbacksargument to a Huggingface transformersTrainer: callbacks callbacks Trainer Trainer importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    )Copy importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) importpathlib
VOL_MOUNT_PATH = pathlib.Path(""/vol"")@stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},)deffinetune():fromtransformersimportSeq2SeqTrainer
    ...

    training_args = Seq2SeqTrainingArguments(
        output_dir=str(VOL_MOUNT_PATH /""model""),
        ...
    )

    trainer = Seq2SeqTrainer(
        model=model,
        args=training_args,
        callbacks=[CheckpointCallback(stub.volume)],
        train_dataset=tokenized_xsum_train,
        eval_dataset=tokenized_xsum_test,
    ) import ""/vol"" @stub.function(gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume},) gpu=""A10g"",
    timeout=7_200,
    volumes={VOL_MOUNT_PATH: stub.volume}, ""A10g"" 7_200 def finetune from import str ""model"" Copy Copy    Copy As shown above, you must also set the Trainer’soutput_dirto write into the volume’s mount location. output_dir output_dir ","In this context, the Trainer's 'output_dir' refers to the directory where the model's output should be written in the volume's mount location."
0,What is the consequence of concurrent modifications of the same file in a volumes filesystem?,Volumes beta Filesystem consistency,"Concurrent modification Concurrent modification is supported, but concurrent modifications of the same
files should be avoided. Last write wins in case of concurrent modification of
the same file — any data the last writer didn’t have when committing changes
will be lost! As a result, volumes are typically not a good fit for use cases where you need
to make concurrent modifications to the same file (nor is distributed file
locking supported). Busy volume errors Volume commits cannot be performed while volume files are still open for
writing. The commit operation will fail with “volume busy”. The following is a
simple example of how a “volume busy” error can occur: volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late @stub.function(volumes={""/vol"": volume}) volumes={""/vol"": volume} ""/vol"" def seed_volume open ""/vol/data.txt"" ""w"" ""hello world"" # file not closed after writing # closed file too late Copy Copy    Copy ","The last write wins, meaning any data the last writer didn’t have when committing changes will be lost."
3,What error can occur when you try to perform a volume commit while volume files are still open for writing?,Volumes beta Filesystem consistency,"Concurrent modification Concurrent modification is supported, but concurrent modifications of the same
files should be avoided. Last write wins in case of concurrent modification of
the same file — any data the last writer didn’t have when committing changes
will be lost! As a result, volumes are typically not a good fit for use cases where you need
to make concurrent modifications to the same file (nor is distributed file
locking supported). Busy volume errors Volume commits cannot be performed while volume files are still open for
writing. The commit operation will fail with “volume busy”. The following is a
simple example of how a “volume busy” error can occur: volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late @stub.function(volumes={""/vol"": volume}) volumes={""/vol"": volume} ""/vol"" def seed_volume open ""/vol/data.txt"" ""w"" ""hello world"" # file not closed after writing # closed file too late Copy Copy    Copy ","The commit operation will fail with a ""volume busy"" error."
6,What function is being defined in the example code?,Volumes beta Filesystem consistency,"Concurrent modification Concurrent modification is supported, but concurrent modifications of the same
files should be avoided. Last write wins in case of concurrent modification of
the same file — any data the last writer didn’t have when committing changes
will be lost! As a result, volumes are typically not a good fit for use cases where you need
to make concurrent modifications to the same file (nor is distributed file
locking supported). Busy volume errors Volume commits cannot be performed while volume files are still open for
writing. The commit operation will fail with “volume busy”. The following is a
simple example of how a “volume busy” error can occur: volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too lateCopy volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late volume = modal.Volume.new()@stub.function(volumes={""/vol"": volume})defseed_volume():
    f =open(""/vol/data.txt"",""w"")
    f.write(""hello world"")# file not closed after writingstub.volume.commit()
    f.close()# closed file too late @stub.function(volumes={""/vol"": volume}) volumes={""/vol"": volume} ""/vol"" def seed_volume open ""/vol/data.txt"" ""w"" ""hello world"" # file not closed after writing # closed file too late Copy Copy    Copy ","A function called seed_volume is being defined which writes ""hello world"" to a file in a new volume."
0,What is the default lifespan of amodal.Volume?,Volumes beta Persisting volumes,"By default, amodal.Volumelives as long as the
app it’s defined in, just like any other Modal object. However in many
situations you might want to persist file data between runs of the app. To do
this, you can use thepersistedmethod on theVolumeobject. modal.Volume persisted persisted Volume ",It lives as long as the app it’s defined in.
3,When might one want to persist file data between app runs?,Volumes beta Persisting volumes,"By default, amodal.Volumelives as long as the
app it’s defined in, just like any other Modal object. However in many
situations you might want to persist file data between runs of the app. To do
this, you can use thepersistedmethod on theVolumeobject. modal.Volume persisted persisted Volume ",In many situations where the continuity of data is important between different runs of the app.
6,What is the result of using the persisted method on the modal.Volume object?,Volumes beta Persisting volumes,"By default, amodal.Volumelives as long as the
app it’s defined in, just like any other Modal object. However in many
situations you might want to persist file data between runs of the app. To do
this, you can use thepersistedmethod on theVolumeobject. modal.Volume persisted persisted Volume ",It leads to a persisted Volume.
0,What is the purpose of Volumes (beta)?,Volumes beta Further examples,"Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradio Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examples Volumes (beta) Volume basics Model serving Model checkpointing Huggingface transformers Filesystem consistency Concurrent modification Busy volume errors Persisting volumes Further examples See it in actionFine-tuning and serving custom LLaMA models See it in actionFine-tuning and serving custom LLaMA models See it in action Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Volumes (beta) is used for model storage.
3,What is one example of how to use Volumes (beta)?,Volumes beta Further examples,"Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradio Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examples Volumes (beta) Volume basics Model serving Model checkpointing Huggingface transformers Filesystem consistency Concurrent modification Busy volume errors Persisting volumes Further examples See it in actionFine-tuning and serving custom LLaMA models See it in actionFine-tuning and serving custom LLaMA models See it in action Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",One example of how to use Volumes (beta) is for fine-tuning and serving custom LLaMA models.
6,What does the __sveltekit_qfhbjo scrip do?,Volumes beta Further examples,"Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradio Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examples Volumes (beta) Volume basics Model serving Model checkpointing Huggingface transformers Filesystem consistency Concurrent modification Busy volume errors Persisting volumes Further examples See it in actionFine-tuning and serving custom LLaMA models See it in actionFine-tuning and serving custom LLaMA models See it in action Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",This script is likely used to import specific application modules and start the application on a specific element on the webpage.
0,What are some of the features of Volumes (beta)?,Volumes beta Further examples,"Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradio Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examples Volumes (beta) Volume basics Model serving Model checkpointing Huggingface transformers Filesystem consistency Concurrent modification Busy volume errors Persisting volumes Further examples See it in actionFine-tuning and serving custom LLaMA models See it in actionFine-tuning and serving custom LLaMA models See it in action Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Volume basics, Model serving, Model checkpointing, Huggingface transformers, Filesystem consistency, Concurrent modification, Busy volume errors, Persisting volumes, and Further examples."
3,What are the features accessible in the 'See it in action' section?,Volumes beta Further examples,"Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradio Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examples Volumes (beta) Volume basics Model serving Model checkpointing Huggingface transformers Filesystem consistency Concurrent modification Busy volume errors Persisting volumes Further examples See it in actionFine-tuning and serving custom LLaMA models See it in actionFine-tuning and serving custom LLaMA models See it in action Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Fine-tuning and serving custom LLaMA models.
6,Who owns the rights of these services?,Volumes beta Further examples,"Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradiouses a volume for model storage Pet Art Dreambooth with Hugging Face and Gradio Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examplesSee it in actionFine-tuning and serving custom LLaMA models Volumes (beta)Volume basicsModel servingModel checkpointingHuggingface transformersFilesystem consistencyConcurrent modificationBusy volume errorsPersisting volumesFurther examples Volumes (beta) Volume basics Model serving Model checkpointing Huggingface transformers Filesystem consistency Concurrent modification Busy volume errors Persisting volumes Further examples See it in actionFine-tuning and serving custom LLaMA models See it in actionFine-tuning and serving custom LLaMA models See it in action Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models Fine-tuning and serving custom LLaMA models     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc."
0,What is the purpose of a Proxy object?,modalProxy,"classProxy(modal.object.Object)Copy classProxy(modal.object.Object)Copy classProxy(modal.object.Object)Copy classProxy(modal.object.Object) classProxy(modal.object.Object) classProxy(modal.object.Object) class Proxy object Copy Copy    Copy Proxy objects are used to setup secure tunnel connections to a private remote address, for example
a database. Currentlymodal.Proxyobjects must be setup with the assistance of Modal staff. If you require a proxy
please contact us. modal.Proxy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","Proxy objects are used to setup secure tunnel connections to a private remote address, such as a database."
3,Where should I direct my questions if I need a proxy?,modalProxy,"classProxy(modal.object.Object)Copy classProxy(modal.object.Object)Copy classProxy(modal.object.Object)Copy classProxy(modal.object.Object) classProxy(modal.object.Object) classProxy(modal.object.Object) class Proxy object Copy Copy    Copy Proxy objects are used to setup secure tunnel connections to a private remote address, for example
a database. Currentlymodal.Proxyobjects must be setup with the assistance of Modal staff. If you require a proxy
please contact us. modal.Proxy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","If you require a proxy, you should contact Modal staff."
6,Can I set up a Proxy object myself?,modalProxy,"classProxy(modal.object.Object)Copy classProxy(modal.object.Object)Copy classProxy(modal.object.Object)Copy classProxy(modal.object.Object) classProxy(modal.object.Object) classProxy(modal.object.Object) class Proxy object Copy Copy    Copy Proxy objects are used to setup secure tunnel connections to a private remote address, for example
a database. Currentlymodal.Proxyobjects must be setup with the assistance of Modal staff. If you require a proxy
please contact us. modal.Proxy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","No, currently proxy objects must be set up with the assistance of Modal staff."
0,What is the function named in the provided code?,modalProxy persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",defpersist
3,What is the first argument of defpersist function?,modalProxy persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",label:str 
6,What could be used in place of Object.persist according to the text?,modalProxy persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",NetworkFileSystem.persisted or Dict.persisted
0,What is the purpose of the 'from_name()' method in the given code?,modalProxy fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The 'from_name()' method is used to retrieve an object with a given name and tag. It is useful for referencing secrets and calling a function from a different app.
3,How might 'from_name()' be used to retrieve a function from a different app as given in the example content?,modalProxy fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The method can be used with the syntax: stub.other_function = Function.from_name(""other-app"",""function"")."
6,How can the method 'from_name()' be utilized for attaching an object to a stub or function?,modalProxy fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The 'from_name()' method is utilized by assigning an object returned by it to a member on the stub, for example: stub.my_secret = Secret.from_name(""my-secret"")."
0,What is the purpose of the 'lookup' method in the provided code?,modalProxy lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxy from_id persist from_name lookup CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The 'lookup' method in the provided code is used to lookup an object with a given name and tag. It's a general-purpose method for objects like functions, network file systems, and secrets. "
3,How would you use the lookup method to find a function from a different application?,modalProxy lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxy from_id persist from_name lookup CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","To lookup a function from a different application, you'd use Function.lookup(""other-app"",""function"") as per the provided code."
6,"How do you use the lookup method to find a persisted Volume, Queue, or Dict?",modalProxy lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxy from_id persist from_name lookup CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","To lookup a persisted Volume, Queue, or Dict, you would use Volume.lookup(""my-volume""), Queue.lookup(""my-queue""), or Dict.lookup(""my-dict"") respectively, as per the provided code."
0,What is the purpose of the lookup method?,modalProxy lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxy from_id persist from_name lookup CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The lookup method is a general-purpose method for objects like functions, network file systems, and secrets. It provides a reference to the object in a running app."
3,How can you lookup a function from a different application?,modalProxy lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxy from_id persist from_name lookup CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","You can look up a function from a different application using the method ""other_function = Function.lookup(""other-app"",""function"")""."
6,"How can you lookup a persisted Volume, Queue, or Dict?",modalProxy lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxyfrom_idpersistfrom_namelookup modal.Proxy from_id persist from_name lookup CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","You can look up a persisted Volume, Queue, or Dict using methods ""my_volume = Volume.lookup(""my-volume"")"", ""my_queue = Queue.lookup(""my-queue"")"", and ""my_dict =Dict.lookup(""my-dict"")"" respectively."
0,What is the purpose of the 'modal profile' command?,modal profile,modal profile Set the active Modal profile. Usage: Usage modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]... modal profile [OPTIONS] COMMAND [ARGS]... modal profile [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands activate: Change the active Modal profile.current: Print the active Modal profile.list: List all Modal profiles that are defined. activate: Change the active Modal profile. activate current: Print the active Modal profile. current list: List all Modal profiles that are defined. list ,The 'modal profile' command is used to set the active Modal profile.
3,What does the 'activate' command under 'modal profile' do?,modal profile,modal profile Set the active Modal profile. Usage: Usage modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]... modal profile [OPTIONS] COMMAND [ARGS]... modal profile [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands activate: Change the active Modal profile.current: Print the active Modal profile.list: List all Modal profiles that are defined. activate: Change the active Modal profile. activate current: Print the active Modal profile. current list: List all Modal profiles that are defined. list ,The 'activate' command under 'modal profile' is used to change the active Modal profile.
6,What does the '--help' option provide?,modal profile,modal profile Set the active Modal profile. Usage: Usage modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]...Copy modal profile [OPTIONS] COMMAND [ARGS]... modal profile [OPTIONS] COMMAND [ARGS]... modal profile [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands activate: Change the active Modal profile.current: Print the active Modal profile.list: List all Modal profiles that are defined. activate: Change the active Modal profile. activate current: Print the active Modal profile. current list: List all Modal profiles that are defined. list ,The '--help' option shows the message and exits the current operation.
0,What is the command to print the active Modal profile?,modal profile modal profile current,modal profile current Print the active Modal profile. Usage: Usage modal profile current [OPTIONS]Copy modal profile current [OPTIONS]Copy modal profile current [OPTIONS]Copy modal profile current [OPTIONS] modal profile current [OPTIONS] modal profile current [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help ,"The command to print the active Modal profile is ""modal profile current [OPTIONS]""."
3,"What does the command ""modal profile current [OPTIONS]"" do?",modal profile modal profile current,modal profile current Print the active Modal profile. Usage: Usage modal profile current [OPTIONS]Copy modal profile current [OPTIONS]Copy modal profile current [OPTIONS]Copy modal profile current [OPTIONS] modal profile current [OPTIONS] modal profile current [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help ,"The command ""modal profile current [OPTIONS]"" is used to print the active Modal profile. "
6,"What does the ""--help"" option do in context of this command?",modal profile modal profile current,modal profile current Print the active Modal profile. Usage: Usage modal profile current [OPTIONS]Copy modal profile current [OPTIONS]Copy modal profile current [OPTIONS]Copy modal profile current [OPTIONS] modal profile current [OPTIONS] modal profile current [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help ,"The ""--help"" option, when used, shows the message and exits."
0,What command is used to list all defined Modal profiles?,modal profile modal profile list,"modal profile list List all Modal profiles that are defined. Usage: Usage modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS] modal profile list [OPTIONS] modal profile list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profile modal profile activate modal profile current modal profile list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The command used is ""modal profile list""."
3,What does the --help option do in the command usage?,modal profile modal profile list,"modal profile list List all Modal profiles that are defined. Usage: Usage modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS] modal profile list [OPTIONS] modal profile list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profile modal profile activate modal profile current modal profile list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The --help option shows you the help message and exits the command.
6,"Who owns the copyright to Modal Labs, Inc?",modal profile modal profile list,"modal profile list List all Modal profiles that are defined. Usage: Usage modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS] modal profile list [OPTIONS] modal profile list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profile modal profile activate modal profile current modal profile list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright is owned by Modal Labs, Inc itself, as indicated by the ""© 2023 Modal Labs, Inc."""
0,"What is the purpose of the ""modal profile list"" command?",modal profile modal profile list,"modal profile list List all Modal profiles that are defined. Usage: Usage modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS] modal profile list [OPTIONS] modal profile list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profile modal profile activate modal profile current modal profile list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""modal profile list"" command is used to list all Modal profiles that are defined."
3,"What does the --help option do in the ""modal profile list"" command?",modal profile modal profile list,"modal profile list List all Modal profiles that are defined. Usage: Usage modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS] modal profile list [OPTIONS] modal profile list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profile modal profile activate modal profile current modal profile list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The --help option shows the usage message and exits the command.
6,What is the name of the company mentioned in the text?,modal profile modal profile list,"modal profile list List all Modal profiles that are defined. Usage: Usage modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS]Copy modal profile list [OPTIONS] modal profile list [OPTIONS] modal profile list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profilemodal profile activatemodal profile currentmodal profile list modal profile modal profile activate modal profile current modal profile list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The name of the company mentioned in the text is Modal Labs, Inc."
0,"What is the purpose of the ""from_id"" method in the Sandbox class?",modalsandbox modalsandboxSandbox,"classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object) classSandbox(modal.object.Object) classSandbox(modal.object.Object) class Sandbox object Copy Copy    Copy ASandboxobject lets you interact with a running sandbox. This API is similar to Python’sasyncio.subprocess.Process. Sandbox asyncio.subprocess.Process Refer to theguideon how to spawn and use sandboxes. guide def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy wait defwait(self):Copy defwait(self):Copy defwait(self):Copy defwait(self): defwait(self): defwait(self): def wait self Copy Copy    Copy Wait for the sandbox to finish running. stdout @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @property def stdout self Copy Copy    Copy LogsReaderfor the sandbox’s stdout stream. LogsReader stderr @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @property def stderr self Copy Copy    Copy LogsReaderfor the sandbox’s stderr stream. LogsReader returncode @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @property def returncode self Optional int Copy Copy    Copy Return code of the sandbox process if it has finished running, elseNone. None modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandbox modal.sandbox.LogsReader read modal.sandbox.Sandbox from_id persist from_name lookup wait stdout stderr returncode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""from_id"" method retrieves an object from its unique ID."
3,"What does the ""wait"" method do in the Sandbox class?",modalsandbox modalsandboxSandbox,"classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object) classSandbox(modal.object.Object) classSandbox(modal.object.Object) class Sandbox object Copy Copy    Copy ASandboxobject lets you interact with a running sandbox. This API is similar to Python’sasyncio.subprocess.Process. Sandbox asyncio.subprocess.Process Refer to theguideon how to spawn and use sandboxes. guide def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy wait defwait(self):Copy defwait(self):Copy defwait(self):Copy defwait(self): defwait(self): defwait(self): def wait self Copy Copy    Copy Wait for the sandbox to finish running. stdout @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @property def stdout self Copy Copy    Copy LogsReaderfor the sandbox’s stdout stream. LogsReader stderr @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @property def stderr self Copy Copy    Copy LogsReaderfor the sandbox’s stderr stream. LogsReader returncode @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @property def returncode self Optional int Copy Copy    Copy Return code of the sandbox process if it has finished running, elseNone. None modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandbox modal.sandbox.LogsReader read modal.sandbox.Sandbox from_id persist from_name lookup wait stdout stderr returncode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""wait"" method waits for the sandbox to finish running."
6,"What does the ""returncode"" property represent?",modalsandbox modalsandboxSandbox,"classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object) classSandbox(modal.object.Object) classSandbox(modal.object.Object) class Sandbox object Copy Copy    Copy ASandboxobject lets you interact with a running sandbox. This API is similar to Python’sasyncio.subprocess.Process. Sandbox asyncio.subprocess.Process Refer to theguideon how to spawn and use sandboxes. guide def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy wait defwait(self):Copy defwait(self):Copy defwait(self):Copy defwait(self): defwait(self): defwait(self): def wait self Copy Copy    Copy Wait for the sandbox to finish running. stdout @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @property def stdout self Copy Copy    Copy LogsReaderfor the sandbox’s stdout stream. LogsReader stderr @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @property def stderr self Copy Copy    Copy LogsReaderfor the sandbox’s stderr stream. LogsReader returncode @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @property def returncode self Optional int Copy Copy    Copy Return code of the sandbox process if it has finished running, elseNone. None modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandbox modal.sandbox.LogsReader read modal.sandbox.Sandbox from_id persist from_name lookup wait stdout stderr returncode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""returncode"" property represents the return code of the sandbox process if it has finished running, else it is None."
0,What is the purpose of the class Sandbox in Python's asyncio subprocess process?,modalsandbox modalsandboxSandbox,"classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object) classSandbox(modal.object.Object) classSandbox(modal.object.Object) class Sandbox object Copy Copy    Copy ASandboxobject lets you interact with a running sandbox. This API is similar to Python’sasyncio.subprocess.Process. Sandbox asyncio.subprocess.Process Refer to theguideon how to spawn and use sandboxes. guide def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy wait defwait(self):Copy defwait(self):Copy defwait(self):Copy defwait(self): defwait(self): defwait(self): def wait self Copy Copy    Copy Wait for the sandbox to finish running. stdout @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @property def stdout self Copy Copy    Copy LogsReaderfor the sandbox’s stdout stream. LogsReader stderr @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @property def stderr self Copy Copy    Copy LogsReaderfor the sandbox’s stderr stream. LogsReader returncode @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @property def returncode self Optional int Copy Copy    Copy Return code of the sandbox process if it has finished running, elseNone. None modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandbox modal.sandbox.LogsReader read modal.sandbox.Sandbox from_id persist from_name lookup wait stdout stderr returncode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The class Sandbox allows interaction with a running sandbox in Python's asyncio subprocess process.
3,"How does the ""persist"" method function within the Sandbox class?",modalsandbox modalsandboxSandbox,"classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object) classSandbox(modal.object.Object) classSandbox(modal.object.Object) class Sandbox object Copy Copy    Copy ASandboxobject lets you interact with a running sandbox. This API is similar to Python’sasyncio.subprocess.Process. Sandbox asyncio.subprocess.Process Refer to theguideon how to spawn and use sandboxes. guide def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy wait defwait(self):Copy defwait(self):Copy defwait(self):Copy defwait(self): defwait(self): defwait(self): def wait self Copy Copy    Copy Wait for the sandbox to finish running. stdout @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @property def stdout self Copy Copy    Copy LogsReaderfor the sandbox’s stdout stream. LogsReader stderr @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @property def stderr self Copy Copy    Copy LogsReaderfor the sandbox’s stderr stream. LogsReader returncode @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @property def returncode self Optional int Copy Copy    Copy Return code of the sandbox process if it has finished running, elseNone. None modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandbox modal.sandbox.LogsReader read modal.sandbox.Sandbox from_id persist from_name lookup wait stdout stderr returncode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""persist"" method in the Sandbox class is deprecated for generic objects and instead the methods ""NetworkFileSystem.persisted"" or ""Dict.persisted"" should be used."
6,Could you explain what the lookup method does in the Sandbox class?,modalsandbox modalsandboxSandbox,"classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object)Copy classSandbox(modal.object.Object) classSandbox(modal.object.Object) classSandbox(modal.object.Object) class Sandbox object Copy Copy    Copy ASandboxobject lets you interact with a running sandbox. This API is similar to Python’sasyncio.subprocess.Process. Sandbox asyncio.subprocess.Process Refer to theguideon how to spawn and use sandboxes. guide def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy wait defwait(self):Copy defwait(self):Copy defwait(self):Copy defwait(self): defwait(self): defwait(self): def wait self Copy Copy    Copy Wait for the sandbox to finish running. stdout @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader:Copy @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @propertydefstdout(self) -> _LogsReader: @property def stdout self Copy Copy    Copy LogsReaderfor the sandbox’s stdout stream. LogsReader stderr @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader:Copy @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @propertydefstderr(self) -> _LogsReader: @property def stderr self Copy Copy    Copy LogsReaderfor the sandbox’s stderr stream. LogsReader returncode @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]:Copy @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @propertydefreturncode(self) ->Optional[int]: @property def returncode self Optional int Copy Copy    Copy Return code of the sandbox process if it has finished running, elseNone. None modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandboxmodal.sandbox.LogsReaderreadmodal.sandbox.Sandboxfrom_idpersistfrom_namelookupwaitstdoutstderrreturncode modal.sandbox modal.sandbox.LogsReader read modal.sandbox.Sandbox from_id persist from_name lookup wait stdout stderr returncode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The lookup method in the Sandbox class looks up an object with a given name and tag. It serves as a general-purpose method for objects like functions, network file systems, and secrets, providing a reference to the object in a running application."
0,What does a Modal deployment do?,Managing deployments,"Once you’ve finished usingmodal runormodal serveto iterate on your Modal
code, it’s time to deploy. A Modal deployment creates and then persists an
application and its objects, providing the following benefits: modal run modal serve Repeated application function executions will be grouped under the deployment,
aiding observability and usage tracking. Programmatically triggering lots of
ephemeral app runs can clutter your web and CLI interfaces.Function calls are much faster because deployed functions are persistent and
reused, not created on-demand by calls. Learn how to trigger deployed
functions inInvoking deployed functions.Scheduled functionswill continue scheduling separate from
any local iteration you do, and will notify you on failure.Web endpointskeep running when you close your laptop,
and their URL address matches the deployment name. Repeated application function executions will be grouped under the deployment,
aiding observability and usage tracking. Programmatically triggering lots of
ephemeral app runs can clutter your web and CLI interfaces. Function calls are much faster because deployed functions are persistent and
reused, not created on-demand by calls. Learn how to trigger deployed
functions inInvoking deployed functions. Invoking deployed functions Scheduled functionswill continue scheduling separate from
any local iteration you do, and will notify you on failure. Scheduled functions Web endpointskeep running when you close your laptop,
and their URL address matches the deployment name. Web endpoints ",A Modal deployment creates and then persists an application and its objects.
3,What happens when functions are deployed in Modal?,Managing deployments,"Once you’ve finished usingmodal runormodal serveto iterate on your Modal
code, it’s time to deploy. A Modal deployment creates and then persists an
application and its objects, providing the following benefits: modal run modal serve Repeated application function executions will be grouped under the deployment,
aiding observability and usage tracking. Programmatically triggering lots of
ephemeral app runs can clutter your web and CLI interfaces.Function calls are much faster because deployed functions are persistent and
reused, not created on-demand by calls. Learn how to trigger deployed
functions inInvoking deployed functions.Scheduled functionswill continue scheduling separate from
any local iteration you do, and will notify you on failure.Web endpointskeep running when you close your laptop,
and their URL address matches the deployment name. Repeated application function executions will be grouped under the deployment,
aiding observability and usage tracking. Programmatically triggering lots of
ephemeral app runs can clutter your web and CLI interfaces. Function calls are much faster because deployed functions are persistent and
reused, not created on-demand by calls. Learn how to trigger deployed
functions inInvoking deployed functions. Invoking deployed functions Scheduled functionswill continue scheduling separate from
any local iteration you do, and will notify you on failure. Scheduled functions Web endpointskeep running when you close your laptop,
and their URL address matches the deployment name. Web endpoints ","Function calls are much faster because deployed functions are persistent and reused, not created on-demand by calls."
6,How does Modal handle observability and usage tracking?,Managing deployments,"Once you’ve finished usingmodal runormodal serveto iterate on your Modal
code, it’s time to deploy. A Modal deployment creates and then persists an
application and its objects, providing the following benefits: modal run modal serve Repeated application function executions will be grouped under the deployment,
aiding observability and usage tracking. Programmatically triggering lots of
ephemeral app runs can clutter your web and CLI interfaces.Function calls are much faster because deployed functions are persistent and
reused, not created on-demand by calls. Learn how to trigger deployed
functions inInvoking deployed functions.Scheduled functionswill continue scheduling separate from
any local iteration you do, and will notify you on failure.Web endpointskeep running when you close your laptop,
and their URL address matches the deployment name. Repeated application function executions will be grouped under the deployment,
aiding observability and usage tracking. Programmatically triggering lots of
ephemeral app runs can clutter your web and CLI interfaces. Function calls are much faster because deployed functions are persistent and
reused, not created on-demand by calls. Learn how to trigger deployed
functions inInvoking deployed functions. Invoking deployed functions Scheduled functionswill continue scheduling separate from
any local iteration you do, and will notify you on failure. Scheduled functions Web endpointskeep running when you close your laptop,
and their URL address matches the deployment name. Web endpoints ","Repeated application function executions will be grouped under the deployment, aiding observability and usage tracking."
0,How can deployments be viewed?,Managing deployments Viewing deployments,Deployments can be viewed either on theappsweb page or by using themodal app listcommand. apps modal app listcommand modal app list   ,Deployments can be viewed either on the apps web page or by using the modal app list command.
3,Where can I see the deployments online?,Managing deployments Viewing deployments,Deployments can be viewed either on theappsweb page or by using themodal app listcommand. apps modal app listcommand modal app list   ,You can see the deployments on the apps web page.
6,Which web page should one visit to view deployments?,Managing deployments Viewing deployments,Deployments can be viewed either on theappsweb page or by using themodal app listcommand. apps modal app listcommand modal app list   ,One should visit the apps web page to view deployments.
0,What is the purpose of a deployment in Modal?,Managing deployments Updating deployments,"A deployment can deploy new apps or redeploy new versions of an existing
deployed app. It’s useful to understand how Modal handles the transition between
versions of running deployment. Modal deployments only take a few seconds, but
we still ensure things run smoothly in this short deployment period. A running deployed app will continue running and accepting requests while a
deployment is happening. Existing function executions will also keep running.
They will not be terminated by the deployment because they’re outdated. However, any existing container running the old version of the app will be
marked by Modal as outdated and will become ineligible to serve new requests.
These outdated containers will become idle and gracefully terminate. Any warm pool containers will also be cycled during a deployment, as the
previous version’s warm pool are now outdated. ",A deployment in Modal can deploy new apps or redeploy new versions of an existing deployed app.
3,Are existing function executions terminated during a new deployment in Modal?,Managing deployments Updating deployments,"A deployment can deploy new apps or redeploy new versions of an existing
deployed app. It’s useful to understand how Modal handles the transition between
versions of running deployment. Modal deployments only take a few seconds, but
we still ensure things run smoothly in this short deployment period. A running deployed app will continue running and accepting requests while a
deployment is happening. Existing function executions will also keep running.
They will not be terminated by the deployment because they’re outdated. However, any existing container running the old version of the app will be
marked by Modal as outdated and will become ineligible to serve new requests.
These outdated containers will become idle and gracefully terminate. Any warm pool containers will also be cycled during a deployment, as the
previous version’s warm pool are now outdated. ","No, existing function executions will not be terminated by the new deployment because they're outdated."
6,What happens to any warm pool containers during a deployment?,Managing deployments Updating deployments,"A deployment can deploy new apps or redeploy new versions of an existing
deployed app. It’s useful to understand how Modal handles the transition between
versions of running deployment. Modal deployments only take a few seconds, but
we still ensure things run smoothly in this short deployment period. A running deployed app will continue running and accepting requests while a
deployment is happening. Existing function executions will also keep running.
They will not be terminated by the deployment because they’re outdated. However, any existing container running the old version of the app will be
marked by Modal as outdated and will become ineligible to serve new requests.
These outdated containers will become idle and gracefully terminate. Any warm pool containers will also be cycled during a deployment, as the
previous version’s warm pool are now outdated. ","Any warm pool containers will be cycled during a deployment, as the previous version’s warm pool are now outdated."
0,How can deployed apps be stopped in the web UI?,Managing deployments Stopping deployments,"Deployed apps can be stopped in the web UI by clicking the red delete button on
the deployment’s app page, or alternatively by using themodal app stopcommand. modal app stopcommand modal app stop Stopped deployments are eventually garbage collected. Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deployments Creating deployments Viewing deployments Updating deployments Stopping deployments CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Deployed apps can be stopped in the web UI by clicking the red delete button on the deployment’s app page.
3,What happens to stopped deployments?,Managing deployments Stopping deployments,"Deployed apps can be stopped in the web UI by clicking the red delete button on
the deployment’s app page, or alternatively by using themodal app stopcommand. modal app stopcommand modal app stop Stopped deployments are eventually garbage collected. Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deployments Creating deployments Viewing deployments Updating deployments Stopping deployments CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Stopped deployments are eventually garbage collected.
6,Who is the copyright holder of the given content?,Managing deployments Stopping deployments,"Deployed apps can be stopped in the web UI by clicking the red delete button on
the deployment’s app page, or alternatively by using themodal app stopcommand. modal app stopcommand modal app stop Stopped deployments are eventually garbage collected. Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deployments Creating deployments Viewing deployments Updating deployments Stopping deployments CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright holder of the given content is Modal Labs, Inc."
0,How can deployed apps be stopped according to the content?,Managing deployments Stopping deployments,"Deployed apps can be stopped in the web UI by clicking the red delete button on
the deployment’s app page, or alternatively by using themodal app stopcommand. modal app stopcommand modal app stop Stopped deployments are eventually garbage collected. Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deployments Creating deployments Viewing deployments Updating deployments Stopping deployments CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Deployed apps can be stopped in the web UI by clicking the red delete button on the deployment’s app page, or alternatively by using the modal app stop command."
3,What tasks are mentioned in the management of deployments?,Managing deployments Stopping deployments,"Deployed apps can be stopped in the web UI by clicking the red delete button on
the deployment’s app page, or alternatively by using themodal app stopcommand. modal app stopcommand modal app stop Stopped deployments are eventually garbage collected. Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deployments Creating deployments Viewing deployments Updating deployments Stopping deployments CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Managing deployments involves creating deployments, viewing deployments, updating deployments, and stopping deployments."
6,What are the elements imported in the code?,Managing deployments Stopping deployments,"Deployed apps can be stopped in the web UI by clicking the red delete button on
the deployment’s app page, or alternatively by using themodal app stopcommand. modal app stopcommand modal app stop Stopped deployments are eventually garbage collected. Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deploymentsCreating deploymentsViewing deploymentsUpdating deploymentsStopping deployments Managing deployments Creating deployments Viewing deployments Updating deployments Stopping deployments CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The elements imported are ""../../_app/immutable/entry/start.be12ce5d.js"" and ""../../_app/immutable/entry/app.917210b3.js""."
0,What is a Volume in Modal?,modalVolume,"classVolume(modal.object.Object)Copy classVolume(modal.object.Object)Copy classVolume(modal.object.Object)Copy classVolume(modal.object.Object) classVolume(modal.object.Object) classVolume(modal.object.Object) class Volume object Copy Copy    Copy A writeable volume that can be used to share files between one or more Modal functions. The contents of a volume is exposed as a filesystem. You can use it to share data between different functions, or
to persist durable state across several instances of the same function. Unlike a networked filesystem, you need to explicitly reload the volume to see changes made since it was mounted.
Similarly, you need to explicitly commit any changes you make to the volume for the changes to become visible
outside the current container. Concurrent modification is supported, but concurrent modifications of the same files should be avoided! Last write
wins in case of concurrent modification of the same file - any data the last writer didn’t have when committing
changes will be lost! As a result, volumes are typically not a good fit for use cases where you need to make concurrent modifications to
the same file (nor is distributed file locking supported). Volumes can only be committed and reloaded if there are no open files for the volume - attempting to reload or
commit with open files will result in an error. Usage Usage importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) import @stub.function(volumes={""/root/foo"": stub.volume}) volumes={""/root/foo"": stub.volume} ""/root/foo"" def f with open ""/root/foo/bar.txt"" ""w"" as ""hello"" # Persist changes @stub.function(volumes={""/root/foo"": stub.volume}) volumes={""/root/foo"": stub.volume} ""/root/foo"" def g # Fetch latest changes with open ""/root/foo/bar.txt"" ""r"" as print Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",A Volume is a writeable volume that can be used to share files between one or more Modal functions. The contents of a Volume is exposed as a filesystem.
3,How does a Volume in Modal handle concurrent modifications of the same files?,modalVolume,"classVolume(modal.object.Object)Copy classVolume(modal.object.Object)Copy classVolume(modal.object.Object)Copy classVolume(modal.object.Object) classVolume(modal.object.Object) classVolume(modal.object.Object) class Volume object Copy Copy    Copy A writeable volume that can be used to share files between one or more Modal functions. The contents of a volume is exposed as a filesystem. You can use it to share data between different functions, or
to persist durable state across several instances of the same function. Unlike a networked filesystem, you need to explicitly reload the volume to see changes made since it was mounted.
Similarly, you need to explicitly commit any changes you make to the volume for the changes to become visible
outside the current container. Concurrent modification is supported, but concurrent modifications of the same files should be avoided! Last write
wins in case of concurrent modification of the same file - any data the last writer didn’t have when committing
changes will be lost! As a result, volumes are typically not a good fit for use cases where you need to make concurrent modifications to
the same file (nor is distributed file locking supported). Volumes can only be committed and reloaded if there are no open files for the volume - attempting to reload or
commit with open files will result in an error. Usage Usage importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) import @stub.function(volumes={""/root/foo"": stub.volume}) volumes={""/root/foo"": stub.volume} ""/root/foo"" def f with open ""/root/foo/bar.txt"" ""w"" as ""hello"" # Persist changes @stub.function(volumes={""/root/foo"": stub.volume}) volumes={""/root/foo"": stub.volume} ""/root/foo"" def g # Fetch latest changes with open ""/root/foo/bar.txt"" ""r"" as print Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","Concurrent modification is supported, but concurrent modifications of the same files should be avoided. Last write wins in case of concurrent modification of the same file - any data the last writer didn’t have when committing changes will be lost."
6,What needs to be done to see changes made to the volume?,modalVolume,"classVolume(modal.object.Object)Copy classVolume(modal.object.Object)Copy classVolume(modal.object.Object)Copy classVolume(modal.object.Object) classVolume(modal.object.Object) classVolume(modal.object.Object) class Volume object Copy Copy    Copy A writeable volume that can be used to share files between one or more Modal functions. The contents of a volume is exposed as a filesystem. You can use it to share data between different functions, or
to persist durable state across several instances of the same function. Unlike a networked filesystem, you need to explicitly reload the volume to see changes made since it was mounted.
Similarly, you need to explicitly commit any changes you make to the volume for the changes to become visible
outside the current container. Concurrent modification is supported, but concurrent modifications of the same files should be avoided! Last write
wins in case of concurrent modification of the same file - any data the last writer didn’t have when committing
changes will be lost! As a result, volumes are typically not a good fit for use cases where you need to make concurrent modifications to
the same file (nor is distributed file locking supported). Volumes can only be committed and reloaded if there are no open files for the volume - attempting to reload or
commit with open files will result in an error. Usage Usage importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read())Copy importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) importmodal

stub = modal.Stub()
stub.volume = modal.Volume.new()@stub.function(volumes={""/root/foo"": stub.volume})deff():withopen(""/root/foo/bar.txt"",""w"")asf:
        f.write(""hello"")
    stub.app.volume.commit()# Persist changes@stub.function(volumes={""/root/foo"": stub.volume})defg():
    stub.app.volume.reload()# Fetch latest changeswithopen(""/root/foo/bar.txt"",""r"")asf:print(f.read()) import @stub.function(volumes={""/root/foo"": stub.volume}) volumes={""/root/foo"": stub.volume} ""/root/foo"" def f with open ""/root/foo/bar.txt"" ""w"" as ""hello"" # Persist changes @stub.function(volumes={""/root/foo"": stub.volume}) volumes={""/root/foo"": stub.volume} ""/root/foo"" def g # Fetch latest changes with open ""/root/foo/bar.txt"" ""r"" as print Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","You need to explicitly commit any changes you make to the volume for the changes to become visible outside the current container, and you need to explicitly reload the volume to see changes made since it was mounted."
0,What is the primary function of the code snippet provided?,modalVolume persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",The primary function of the code is to allow persistence of a certain object in a deployment namespace workspace.
3,What is namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE in the code?,modalVolume persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",It represents the deployment namespace in which the object is to be persisted.
6,What does the term 'Object.persist is deprecated for generic objects' mean in the content provided?,modalVolume persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",It means that the function 'Object.persist' is no longer recommended for use on generic objects and alternatives like 'NetworkFileSystem.persisted' or 'Dict.persisted' should be used instead.
0,What is the function of the 'from_name' method?,modalVolume fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The 'from_name' method is used to retrieve an object with a given name and tag. It can be used for referencing secrets and calling a function from a different app.
3,Which namespace is used in the 'from_name' method according to the provided content?,modalVolume fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The namespace used in the 'from_name' method is 'api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE'.
6,"How can the 'from_name' method be used to retrieve a persisted Volume, Queue, or Dict?",modalVolume fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You would use the code ""stub.my_volume = Volume.from_name(""my-volume"")"", ""stub.my_queue = Queue.from_name(""my-queue"")"" or ""stub.my_dict =Dict.from_name(""my-dict"")"" to retrieve a persisted Volume, Queue, or Dict."
0,What is the purpose of the lookup method?,modalVolume lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The lookup method is used to find an object with a given name and tag. It can be used for objects like functions, network file systems, and secrets, providing a reference to the object in a running app."
3,"How would you use the lookup method to reference a function object in a different app named ""other-app"" and tagged ""function""?",modalVolume lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You would do: other_function = Function.lookup(""other-app"",""function"")"
6,"How do you lookup persisted Volume, Queue, or Dict according to the given content?",modalVolume lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You use the lookup method. For example, to Lookup a persisted Volume, Queue, or Dict named ""my-volume"", ""my-queue"" or ""my-dict"", you do: my_volume = Volume.lookup(""my-volume""), my_queue = Queue.lookup(""my-queue""), my_dict = Dict.lookup(""my-dict""), respectively."
0,What does the modal.Volume new function do?,modalVolume new,"@staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethod def new ""_Volume"" Copy Copy    Copy Construct a new volume, which is empty by default. ","It constructs a new volume, which is empty by default."
1,What type of method is new in modal.Volume?,modalVolume new,"@staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethod def new ""_Volume"" Copy Copy    Copy Construct a new volume, which is empty by default. ",It's a static method.
2,What is the default state of the new volume constructed by the modal.Volume new method?,modalVolume new,"@staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethod def new ""_Volume"" Copy Copy    Copy Construct a new volume, which is empty by default. ",The new volume is empty by default.
3,What is the return type of the new method in modal.Volume class?,modalVolume new,"@staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethod def new ""_Volume"" Copy Copy    Copy Construct a new volume, which is empty by default. ","The return type is ""_Volume""."
4,How many times is the new method repeated in the modal.Volume class?,modalVolume new,"@staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"":Copy @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethoddefnew() ->""_Volume"": @staticmethod def new ""_Volume"" Copy Copy    Copy Construct a new volume, which is empty by default. ",The new method is repeated six times in the modal.Volume class.
0,What is the label given to the persisted volume in the example usage?,modalVolume persisted,"@staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethod def persisted label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, str Optional str None ""_Volume"" Copy Copy    Copy Deploy a Modal app containing this object. This object can then be imported from other apps using
the returned reference, or by callingmodal.Volume.from_name(label)(or the equivalent method
on respective class). modal.Volume.from_name(label) Example Usage Example Usage importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass import ""my-volume"" # Volume refers to the same object, even across instances of `stub`. @stub.function(volumes={""/vol"": volume}) volumes={""/vol"": volume} ""/vol"" def f pass Copy Copy    Copy ","The label given is ""my-volume""."
3,What does the 'stub.function' do in the provided code?,modalVolume persisted,"@staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethod def persisted label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, str Optional str None ""_Volume"" Copy Copy    Copy Deploy a Modal app containing this object. This object can then be imported from other apps using
the returned reference, or by callingmodal.Volume.from_name(label)(or the equivalent method
on respective class). modal.Volume.from_name(label) Example Usage Example Usage importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass import ""my-volume"" # Volume refers to the same object, even across instances of `stub`. @stub.function(volumes={""/vol"": volume}) volumes={""/vol"": volume} ""/vol"" def f pass Copy Copy    Copy ","It refers to the same object (""my-volume""), even across instances of 'stub'."
6,What method can be used to import this object from other apps?,modalVolume persisted,"@staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) ->""_Volume"": @staticmethod def persisted label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, str Optional str None ""_Volume"" Copy Copy    Copy Deploy a Modal app containing this object. This object can then be imported from other apps using
the returned reference, or by callingmodal.Volume.from_name(label)(or the equivalent method
on respective class). modal.Volume.from_name(label) Example Usage Example Usage importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():passCopy importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass importmodal

volume = modal.Volume.persisted(""my-volume"")

stub = modal.Stub()# Volume refers to the same object, even across instances of `stub`.@stub.function(volumes={""/vol"": volume})deff():pass import ""my-volume"" # Volume refers to the same object, even across instances of `stub`. @stub.function(volumes={""/vol"": volume}) volumes={""/vol"": volume} ""/vol"" def f pass Copy Copy    Copy ",The method 'modal.Volume.from_name(label)' can be used to import this object from other apps.
0,What does commit function do in this context?,modalVolume commit,"@live_methoddefcommit(self):Copy @live_methoddefcommit(self):Copy @live_methoddefcommit(self):Copy @live_methoddefcommit(self): @live_methoddefcommit(self): @live_methoddefcommit(self): @live_method def commit self Copy Copy    Copy Commit changes to the volume and fetch any other changes made to the volume by other containers. Committing always triggers a reload after saving changes. If successful, the changes made are now persisted in durable storage and available to other containers accessing the volume. Committing will fail if there are open files for the volume. ",Commit function makes changes to the volume and fetches any other changes made to the volume by other containers.
3,What does a successful commit ensure?,modalVolume commit,"@live_methoddefcommit(self):Copy @live_methoddefcommit(self):Copy @live_methoddefcommit(self):Copy @live_methoddefcommit(self): @live_methoddefcommit(self): @live_methoddefcommit(self): @live_method def commit self Copy Copy    Copy Commit changes to the volume and fetch any other changes made to the volume by other containers. Committing always triggers a reload after saving changes. If successful, the changes made are now persisted in durable storage and available to other containers accessing the volume. Committing will fail if there are open files for the volume. ","If successful, the changes made are now persisted in durable storage and available to other containers accessing the volume."
6,What is the purpose of committing changes to the volume?,modalVolume commit,"@live_methoddefcommit(self):Copy @live_methoddefcommit(self):Copy @live_methoddefcommit(self):Copy @live_methoddefcommit(self): @live_methoddefcommit(self): @live_methoddefcommit(self): @live_method def commit self Copy Copy    Copy Commit changes to the volume and fetch any other changes made to the volume by other containers. Committing always triggers a reload after saving changes. If successful, the changes made are now persisted in durable storage and available to other containers accessing the volume. Committing will fail if there are open files for the volume. ",Committing changes to the volume ensures that changes are persisted in durable storage and available for other containers to access.
0,What does the reload method do in this context?,modalVolume reload,"@live_methoddefreload(self):Copy @live_methoddefreload(self):Copy @live_methoddefreload(self):Copy @live_methoddefreload(self): @live_methoddefreload(self): @live_methoddefreload(self): @live_method def reload self Copy Copy    Copy Make latest committed state of volume available in the running container. Uncommitted changes to the volume, such as new or modified files, will be preserved during reload. Uncommitted
changes will shadow any changes made by other writers - e.g. if you have an uncommitted modified a file that was
also updated by another writer you will not see the other change. Reloading will fail if there are open files for the volume. ",It makes the latest committed state of volume available in the running container.
3,"Can you explain the concept of ""shadowing"" as described in the text?",modalVolume reload,"@live_methoddefreload(self):Copy @live_methoddefreload(self):Copy @live_methoddefreload(self):Copy @live_methoddefreload(self): @live_methoddefreload(self): @live_methoddefreload(self): @live_method def reload self Copy Copy    Copy Make latest committed state of volume available in the running container. Uncommitted changes to the volume, such as new or modified files, will be preserved during reload. Uncommitted
changes will shadow any changes made by other writers - e.g. if you have an uncommitted modified a file that was
also updated by another writer you will not see the other change. Reloading will fail if there are open files for the volume. ","Uncommitted changes will shadow any changes made by other writers. For example, if you have an uncommitted modified file that was also updated by another writer, you will not see the other change."
6,What happens to new or modified files during a volume reload?,modalVolume reload,"@live_methoddefreload(self):Copy @live_methoddefreload(self):Copy @live_methoddefreload(self):Copy @live_methoddefreload(self): @live_methoddefreload(self): @live_methoddefreload(self): @live_method def reload self Copy Copy    Copy Make latest committed state of volume available in the running container. Uncommitted changes to the volume, such as new or modified files, will be preserved during reload. Uncommitted
changes will shadow any changes made by other writers - e.g. if you have an uncommitted modified a file that was
also updated by another writer you will not see the other change. Reloading will fail if there are open files for the volume. ","New or modified files, if they are uncommitted, will be preserved during reload."
0,What does the iterdir method in modal.Volume do?,modalVolume iterdir,"@live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gen def iterdir self, path:str str Copy Copy    Copy Iterate over all files in a directory in the volume. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",It iterates over all files in a directory in the volume. 
3,What does passing a file path to the iterdir method do?,modalVolume iterdir,"@live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gen def iterdir self, path:str str Copy Copy    Copy Iterate over all files in a directory in the volume. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",Passing a file path to the iterdir method returns a list containing only that file’s listing description.
6,What does modal.Volume iterdir return?,modalVolume iterdir,"@live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.VolumeListFilesEntry]: @live_method_gen def iterdir self, path:str str Copy Copy    Copy Iterate over all files in a directory in the volume. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",It returns an AsyncIterator of VolumeListFilesEntry objects.
0,What does the listdir method do in modal.Volume?,modalVolume listdir,"@live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_method def listdir self, path:str str List Copy Copy    Copy List all files under a path prefix in the modal.Volume. Passing a directory path lists all files in the directoryPassing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",It lists all files under a specified path prefix. 
3,What does passing a file path to listdir do?,modalVolume listdir,"@live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_method def listdir self, path:str str List Copy Copy    Copy List all files under a path prefix in the modal.Volume. Passing a directory path lists all files in the directoryPassing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",Passing a file path returns a list containing only that file’s listing description.
6,What is the return type of the listdir method?,modalVolume listdir,"@live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.VolumeListFilesEntry]: @live_method def listdir self, path:str str List Copy Copy    Copy List all files under a path prefix in the modal.Volume. Passing a directory path lists all files in the directoryPassing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",It returns a List[api_pb2.VolumeListFilesEntry].
0,What does the method 'read_file' in the modal.Volume class do?,modalVolume readfile,"@live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:Union[str,bytes] Union str bytes bytes Copy Copy    Copy Read a file from the modal.Volume. Example: Example: vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 ""my-modal-volume"" b"""" for in ""1mb.csv"" print len # == 1024 * 1024 Copy Copy    Copy modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volume from_id persist from_name lookup new persisted commit reload iterdir listdir read_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It reads a file from the modal.Volume.
3,What does the method 'lookup' in the modal.Volume class do?,modalVolume readfile,"@live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:Union[str,bytes] Union str bytes bytes Copy Copy    Copy Read a file from the modal.Volume. Example: Example: vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 ""my-modal-volume"" b"""" for in ""1mb.csv"" print len # == 1024 * 1024 Copy Copy    Copy modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volume from_id persist from_name lookup new persisted commit reload iterdir listdir read_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It locates a volume by its name. 
6,"Who is the owner of Modal Labs, Inc.?",modalVolume readfile,"@live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:Union[str,bytes] Union str bytes bytes Copy Copy    Copy Read a file from the modal.Volume. Example: Example: vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 ""my-modal-volume"" b"""" for in ""1mb.csv"" print len # == 1024 * 1024 Copy Copy    Copy modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volume from_id persist from_name lookup new persisted commit reload iterdir listdir read_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The owner of Modal Labs, Inc. is not specified in the provided content."
0,What is the function of @live_method_gendefread_file in this content?,modalVolume readfile,"@live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:Union[str,bytes] Union str bytes bytes Copy Copy    Copy Read a file from the modal.Volume. Example: Example: vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 ""my-modal-volume"" b"""" for in ""1mb.csv"" print len # == 1024 * 1024 Copy Copy    Copy modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volume from_id persist from_name lookup new persisted commit reload iterdir listdir read_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It is used to read a file from modal.Volume.
3,How is the size of the data estimated in the example provided?,modalVolume readfile,"@live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:Union[str,bytes] Union str bytes bytes Copy Copy    Copy Read a file from the modal.Volume. Example: Example: vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 ""my-modal-volume"" b"""" for in ""1mb.csv"" print len # == 1024 * 1024 Copy Copy    Copy modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volume from_id persist from_name lookup new persisted commit reload iterdir listdir read_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The size of data is estimated by printing the length of data after concatenation which should equal to 1024 * 1024.
6,"What is the significance of importing ""../../_app/immutable/entry/start.be12ce5d.js"" and ""../../_app/immutable/entry/app.917210b3.js""?",modalVolume readfile,"@live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:Union[str,bytes]) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:Union[str,bytes] Union str bytes bytes Copy Copy    Copy Read a file from the modal.Volume. Example: Example: vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024Copy vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 vol = modal.Volume.lookup(""my-modal-volume"")
data =b""""forchunkinvol.read_file(""1mb.csv""):
    data += chunkprint(len(data))# == 1024 * 1024 ""my-modal-volume"" b"""" for in ""1mb.csv"" print len # == 1024 * 1024 Copy Copy    Copy modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volumefrom_idpersistfrom_namelookupnewpersistedcommitreloaditerdirlistdirread_file modal.Volume from_id persist from_name lookup new persisted commit reload iterdir listdir read_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","These scripts are being imported to be used in the Promise.all() method, presumably for running the application or a related task."
0,What is the lifetime of a Dict and its items in Modal apps?,modaldict modaldictDict,"classDict(modal.object.Object)Copy classDict(modal.object.Object)Copy classDict(modal.object.Object)Copy classDict(modal.object.Object) classDict(modal.object.Object) classDict(modal.object.Object) class Dict object Copy Copy    Copy Distributed dictionary for storage in Modal apps. Keys and values can be essentially any object, so long as they can be
serialized bycloudpickle, including Modal objects. cloudpickle Lifetime of a Dict and its items Lifetime of a Dict and its items ADictmatches the lifetime of the app it is attached to, but invididual
keys expire after 30 days. Because of this,Dicts are best not used for
long-term storage. All data is deleted when the app is stopped. Dict Dict Usage Usage Create a newDictwithDict.new(), then assign it to a stub or function. Dict Dict.new() frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 from import Dict Dict @stub.local_entrypoint() def main ""some key"" ""some value"" 123 456 assert ""some key"" ""some value"" assert 123 456 Copy Copy    Copy For more examples, see theguide. guide from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy new @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked @staticmethod def new data:Optional[dict] =None Optional dict None ""_Dict"" Copy Copy    Copy Create a new Dict, optionally with initial data. persisted @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethod def persisted label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None ""_Dict"" Copy Copy    Copy Deploy a Modal app containing this object. The deployed object can then be imported from other apps, or by callingDict.from_name(label)from that same app. Dict.from_name(label) Examples Examples # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app: dict Dict ""my-dict"" # Later, in another app or Python file: dict Dict ""my-dict"" Copy Copy    Copy get @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any: @live_methoddefget(self, key:Any) ->Any: @live_methoddefget(self, key:Any) ->Any: @live_method def get self, key:Any Any Any Copy Copy    Copy Get the value associated with a key. RaisesKeyErrorif the key does not exist. KeyError contains @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool: @live_methoddefcontains(self, key:Any) ->bool: @live_methoddefcontains(self, key:Any) ->bool: @live_method def contains self, key:Any Any bool Copy Copy    Copy Return if a key is present. len @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int: @live_methoddeflen(self) ->int: @live_methoddeflen(self) ->int: @live_method def len self int Copy Copy    Copy Return the length of the dictionary, including any expired keys. update @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None: @live_methoddefupdate(self, **kwargs) ->None: @live_methoddefupdate(self, **kwargs) ->None: @live_method def update self, **kwargs None Copy Copy    Copy Update the dictionary with additional items. put @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None: @live_methoddefput(self, key:Any, value:Any) ->None: @live_methoddefput(self, key:Any, value:Any) ->None: @live_method def put self, key:Any, value:Any Any Any None Copy Copy    Copy Add a specific key-value pair to the dictionary. pop @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any: @live_methoddefpop(self, key:Any) ->Any: @live_methoddefpop(self, key:Any) ->Any: @live_method def pop self, key:Any Any Any Copy Copy    Copy Remove a key from the dictionary, returning the value if it exists. modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dict modal.dict.Dict from_id from_name lookup new persisted get contains len update put pop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","A Dict matches the lifetime of the app it is attached to, but individual keys expire after 30 days. All data is deleted when the app is stopped."
3,When would you use the from_id method?,modaldict modaldictDict,"classDict(modal.object.Object)Copy classDict(modal.object.Object)Copy classDict(modal.object.Object)Copy classDict(modal.object.Object) classDict(modal.object.Object) classDict(modal.object.Object) class Dict object Copy Copy    Copy Distributed dictionary for storage in Modal apps. Keys and values can be essentially any object, so long as they can be
serialized bycloudpickle, including Modal objects. cloudpickle Lifetime of a Dict and its items Lifetime of a Dict and its items ADictmatches the lifetime of the app it is attached to, but invididual
keys expire after 30 days. Because of this,Dicts are best not used for
long-term storage. All data is deleted when the app is stopped. Dict Dict Usage Usage Create a newDictwithDict.new(), then assign it to a stub or function. Dict Dict.new() frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 from import Dict Dict @stub.local_entrypoint() def main ""some key"" ""some value"" 123 456 assert ""some key"" ""some value"" assert 123 456 Copy Copy    Copy For more examples, see theguide. guide from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy new @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked @staticmethod def new data:Optional[dict] =None Optional dict None ""_Dict"" Copy Copy    Copy Create a new Dict, optionally with initial data. persisted @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethod def persisted label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None ""_Dict"" Copy Copy    Copy Deploy a Modal app containing this object. The deployed object can then be imported from other apps, or by callingDict.from_name(label)from that same app. Dict.from_name(label) Examples Examples # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app: dict Dict ""my-dict"" # Later, in another app or Python file: dict Dict ""my-dict"" Copy Copy    Copy get @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any: @live_methoddefget(self, key:Any) ->Any: @live_methoddefget(self, key:Any) ->Any: @live_method def get self, key:Any Any Any Copy Copy    Copy Get the value associated with a key. RaisesKeyErrorif the key does not exist. KeyError contains @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool: @live_methoddefcontains(self, key:Any) ->bool: @live_methoddefcontains(self, key:Any) ->bool: @live_method def contains self, key:Any Any bool Copy Copy    Copy Return if a key is present. len @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int: @live_methoddeflen(self) ->int: @live_methoddeflen(self) ->int: @live_method def len self int Copy Copy    Copy Return the length of the dictionary, including any expired keys. update @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None: @live_methoddefupdate(self, **kwargs) ->None: @live_methoddefupdate(self, **kwargs) ->None: @live_method def update self, **kwargs None Copy Copy    Copy Update the dictionary with additional items. put @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None: @live_methoddefput(self, key:Any, value:Any) ->None: @live_methoddefput(self, key:Any, value:Any) ->None: @live_method def put self, key:Any, value:Any Any Any None Copy Copy    Copy Add a specific key-value pair to the dictionary. pop @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any: @live_methoddefpop(self, key:Any) ->Any: @live_methoddefpop(self, key:Any) ->Any: @live_method def pop self, key:Any Any Any Copy Copy    Copy Remove a key from the dictionary, returning the value if it exists. modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dict modal.dict.Dict from_id from_name lookup new persisted get contains len update put pop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",You would use the from_id method to retrieve an object from its unique ID.
6,What is the purpose of the lookup method in Modal apps?,modaldict modaldictDict,"classDict(modal.object.Object)Copy classDict(modal.object.Object)Copy classDict(modal.object.Object)Copy classDict(modal.object.Object) classDict(modal.object.Object) classDict(modal.object.Object) class Dict object Copy Copy    Copy Distributed dictionary for storage in Modal apps. Keys and values can be essentially any object, so long as they can be
serialized bycloudpickle, including Modal objects. cloudpickle Lifetime of a Dict and its items Lifetime of a Dict and its items ADictmatches the lifetime of the app it is attached to, but invididual
keys expire after 30 days. Because of this,Dicts are best not used for
long-term storage. All data is deleted when the app is stopped. Dict Dict Usage Usage Create a newDictwithDict.new(), then assign it to a stub or function. Dict Dict.new() frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456Copy frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 frommodalimportDict, Stub

stub = Stub()
stub.my_dict =Dict.new()@stub.local_entrypoint()defmain():
    stub.my_dict[""some key""] =""some value""stub.my_dict[123] =456assertstub.my_dict[""some key""] ==""some value""assertstub.my_dict[123] ==456 from import Dict Dict @stub.local_entrypoint() def main ""some key"" ""some value"" 123 456 assert ""some key"" ""some value"" assert 123 456 Copy Copy    Copy For more examples, see theguide. guide from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy new @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"":Copy @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked@staticmethoddefnew(data:Optional[dict] =None) ->""_Dict"": @typechecked @staticmethod def new data:Optional[dict] =None Optional dict None ""_Dict"" Copy Copy    Copy Create a new Dict, optionally with initial data. persisted @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"":Copy @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethoddefpersisted(label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None) ->""_Dict"": @staticmethod def persisted label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None ""_Dict"" Copy Copy    Copy Deploy a Modal app containing this object. The deployed object can then be imported from other apps, or by callingDict.from_name(label)from that same app. Dict.from_name(label) Examples Examples # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"")Copy # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app:stub.dict=Dict.persisted(""my-dict"")# Later, in another app or Python file:stub.dict=Dict.from_name(""my-dict"") # In one app: dict Dict ""my-dict"" # Later, in another app or Python file: dict Dict ""my-dict"" Copy Copy    Copy get @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any:Copy @live_methoddefget(self, key:Any) ->Any: @live_methoddefget(self, key:Any) ->Any: @live_methoddefget(self, key:Any) ->Any: @live_method def get self, key:Any Any Any Copy Copy    Copy Get the value associated with a key. RaisesKeyErrorif the key does not exist. KeyError contains @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool:Copy @live_methoddefcontains(self, key:Any) ->bool: @live_methoddefcontains(self, key:Any) ->bool: @live_methoddefcontains(self, key:Any) ->bool: @live_method def contains self, key:Any Any bool Copy Copy    Copy Return if a key is present. len @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int:Copy @live_methoddeflen(self) ->int: @live_methoddeflen(self) ->int: @live_methoddeflen(self) ->int: @live_method def len self int Copy Copy    Copy Return the length of the dictionary, including any expired keys. update @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None:Copy @live_methoddefupdate(self, **kwargs) ->None: @live_methoddefupdate(self, **kwargs) ->None: @live_methoddefupdate(self, **kwargs) ->None: @live_method def update self, **kwargs None Copy Copy    Copy Update the dictionary with additional items. put @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None:Copy @live_methoddefput(self, key:Any, value:Any) ->None: @live_methoddefput(self, key:Any, value:Any) ->None: @live_methoddefput(self, key:Any, value:Any) ->None: @live_method def put self, key:Any, value:Any Any Any None Copy Copy    Copy Add a specific key-value pair to the dictionary. pop @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any:Copy @live_methoddefpop(self, key:Any) ->Any: @live_methoddefpop(self, key:Any) ->Any: @live_methoddefpop(self, key:Any) ->Any: @live_method def pop self, key:Any Any Any Copy Copy    Copy Remove a key from the dictionary, returning the value if it exists. modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dictmodal.dict.Dictfrom_idfrom_namelookupnewpersistedgetcontainslenupdateputpop modal.dict modal.dict.Dict from_id from_name lookup new persisted get contains len update put pop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The lookup is a general-purpose method for objects like functions, network file systems and secrets. It gives a reference to the object in a running app."
0,What is the base class for container images to run functions in?,modalImage,"classImage(modal.object.Object)Copy classImage(modal.object.Object)Copy classImage(modal.object.Object)Copy classImage(modal.object.Object) classImage(modal.object.Object) classImage(modal.object.Object) class Image object Copy Copy    Copy Base class for container images to run functions in. Do not construct this class directly; instead use one of its static factory methods,
such asmodal.Image.debian_slim,modal.Image.from_registry, ormodal.Image.conda. modal.Image.debian_slim modal.Image.from_registry modal.Image.conda def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","The base class is ""Image""."
3,What are some of the static factory methods that can be used to construct the Image class?,modalImage,"classImage(modal.object.Object)Copy classImage(modal.object.Object)Copy classImage(modal.object.Object)Copy classImage(modal.object.Object) classImage(modal.object.Object) classImage(modal.object.Object) class Image object Copy Copy    Copy Base class for container images to run functions in. Do not construct this class directly; instead use one of its static factory methods,
such asmodal.Image.debian_slim,modal.Image.from_registry, ormodal.Image.conda. modal.Image.debian_slim modal.Image.from_registry modal.Image.conda def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","Some static factory methods to construct the Image class include ""modal.Image.debian_slim,"" ""modal.Image.from_registry,"" and ""modal.Image.conda."""
6,"What does the ""__init__"" method do?",modalImage,"classImage(modal.object.Object)Copy classImage(modal.object.Object)Copy classImage(modal.object.Object)Copy classImage(modal.object.Object) classImage(modal.object.Object) classImage(modal.object.Object) class Image object Copy Copy    Copy Base class for container images to run functions in. Do not construct this class directly; instead use one of its static factory methods,
such asmodal.Image.debian_slim,modal.Image.from_registry, ormodal.Image.conda. modal.Image.debian_slim modal.Image.from_registry modal.Image.conda def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","The specifics aren't detailed in this content, but typically, the ""__init__"" method in programming is used for initializing an instance of a class."
0,"What is the function called to persist a label, namespace and environment name in this API?",modalImage persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",defpersist
1,What is the name of the namespace that gets used for the defpersist function?,modalImage persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE
2,Are the labels of type string in the defpersist function?,modalImage persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",Yes
4,What are the alternatives for Object.persist as suggested in the context?,modalImage persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",NetworkFileSystem.persisted and Dict.persisted
0,"What is the purpose of the ""from_name"" method?",modalImage fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The ""from_name"" method is used to retrieve an object with a given name and tag. It's useful for referencing secrets and calling a function from a different app. It's also used when attaching the object to a stub or function. "
3,"How can you retrieve a function from a different application using the ""from_name"" method?",modalImage fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You can retrieve a function from a different application by using the syntax: stub.other_function = Function.from_name(""other-app"",""function"")."
6,"What kind of objects can be retrieved using the ""from_name"" method?",modalImage fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","Objects that can be retrieved using the ""from_name"" method include secrets, functions from different apps, and persisted Volumes, Queues, or Dicts."
0,"What method would be used to search for an item such as functions, network file systems and secrets in an app?",modalImage lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The method used would be the lookup method. 
3,"What would be the code to find a function called ""function"" from a different app known as ""other-app""?",modalImage lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The code would be ""other_function = Function.lookup(""other-app"",""function"")"
6,What is the purpose of the lookup method in this context?,modalImage lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ",The purpose of the lookup method is to give a reference to the object in a running app.
0,What is the extend function used for in this context?,modalImage extend,"defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"": defextend(self, **kwargs) ->""_Image"": defextend(self, **kwargs) ->""_Image"": def extend self, **kwargs ""_Image"" Copy Copy    Copy Extend an image (named “base”) with additional options or commands. This is a low-level command. Generally, you should prefer using functions
likeImage.pip_installorImage.apt_installif possible. Image.pip_install Image.apt_install Example Example image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) ""FROM base"" ""WORKDIR /pkg"" 'RUN echo ""hello world"" > hello.txt' Copy Copy    Copy ","The extend function is used to expand an image (named ""base"") with additional options or commands."
3,What are some preferred alternative methods to using the extend function?,modalImage extend,"defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"": defextend(self, **kwargs) ->""_Image"": defextend(self, **kwargs) ->""_Image"": def extend self, **kwargs ""_Image"" Copy Copy    Copy Extend an image (named “base”) with additional options or commands. This is a low-level command. Generally, you should prefer using functions
likeImage.pip_installorImage.apt_installif possible. Image.pip_install Image.apt_install Example Example image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) ""FROM base"" ""WORKDIR /pkg"" 'RUN echo ""hello world"" > hello.txt' Copy Copy    Copy ",The preferred alternative methods to using the extend function are Image.pip_install or Image.apt_install.
6,What type of image is used in the given example of the extend function?,modalImage extend,"defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"":Copy defextend(self, **kwargs) ->""_Image"": defextend(self, **kwargs) ->""_Image"": defextend(self, **kwargs) ->""_Image"": def extend self, **kwargs ""_Image"" Copy Copy    Copy Extend an image (named “base”) with additional options or commands. This is a low-level command. Generally, you should prefer using functions
likeImage.pip_installorImage.apt_installif possible. Image.pip_install Image.apt_install Example Example image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
)Copy image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) image = modal.Image.debian_slim().extend(
    dockerfile_commands=[""FROM base"",""WORKDIR /pkg"",'RUN echo ""hello world"" > hello.txt',
    ],
    secrets=[secret1, secret2],
) ""FROM base"" ""WORKDIR /pkg"" 'RUN echo ""hello world"" > hello.txt' Copy Copy    Copy ","In the given example, a debian_slim image from the modal.Image module is used in the extend function."
0,What type of mount is modal.Mount?,modalImage copymount,"@typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typechecked def copy_mount self, mount: _Mount, remote_path:Union[str, Path] =""."" Union str ""."" ""_Image"" Copy Copy    Copy Copy the entire contents of amodal.Mountinto an image.
Useful when files only available locally are required during the image
build process. modal.Mount Example Example static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") ""./static"" # place all static images in root of mount ""/"" # place mount's contents into /static directory of image. ""/static"" Copy Copy    Copy ",modal.Mount is a type of directory mount used in image building.
3,"What is a practical use of the ""copy_mount"" method?",modalImage copymount,"@typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typechecked def copy_mount self, mount: _Mount, remote_path:Union[str, Path] =""."" Union str ""."" ""_Image"" Copy Copy    Copy Copy the entire contents of amodal.Mountinto an image.
Useful when files only available locally are required during the image
build process. modal.Mount Example Example static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") ""./static"" # place all static images in root of mount ""/"" # place mount's contents into /static directory of image. ""/static"" Copy Copy    Copy ","The ""copy_mount"" method is useful when files only available locally are required during the image build process."
6,"What does this code do: ""image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")""?",modalImage copymount,"@typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"":Copy @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typecheckeddefcopy_mount(self, mount: _Mount, remote_path:Union[str, Path] =""."") ->""_Image"": @typechecked def copy_mount self, mount: _Mount, remote_path:Union[str, Path] =""."" Union str ""."" ""_Image"" Copy Copy    Copy Copy the entire contents of amodal.Mountinto an image.
Useful when files only available locally are required during the image
build process. modal.Mount Example Example static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"")Copy static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") static_images_dir =""./static""# place all static images in root of mountmount = modal.Mount.from_local_dir(static_images_dir, remote_path=""/"")# place mount's contents into /static directory of image.image = modal.Image.debian_slim().copy_mount(mount, remote_path=""/static"") ""./static"" # place all static images in root of mount ""/"" # place mount's contents into /static directory of image. ""/static"" Copy Copy    Copy ",This code is used to place the contents of the defined mount into the /static directory of the image being built.
0,"What is the function of the ""copy_local_file"" method?",modalImage copylocalfile,"defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": def copy_local_file self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"" Union str Union str ""./"" ""_Image"" Copy Copy    Copy Copy a file into the image as a part of building it. This works in a similar way toCOPYin aDockerfile. COPY COPY Dockerfile ",It copies a local file into the image as a part of building it.
3,What does the 'copy_local_file' function return?,modalImage copylocalfile,"defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": def copy_local_file self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"" Union str Union str ""./"" ""_Image"" Copy Copy    Copy Copy a file into the image as a part of building it. This works in a similar way toCOPYin aDockerfile. COPY COPY Dockerfile ","It returns ""_Image""."
6,How is 'copy_local_file' similar to 'COPY' in a Dockerfile?,modalImage copylocalfile,"defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"":Copy defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": defcopy_local_file(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"") ->""_Image"": def copy_local_file self, local_path:Union[str, Path], remote_path:Union[str, Path] =""./"" Union str Union str ""./"" ""_Image"" Copy Copy    Copy Copy a file into the image as a part of building it. This works in a similar way toCOPYin aDockerfile. COPY COPY Dockerfile ","Both are used to copy files, but 'copy_local_file' is a method in a programming language and 'COPY' is a command in a Dockerfile."
0,What does the method 'copy_local_dir' do? ,modalImage copylocaldir,"defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": def copy_local_dir self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."" Union str Union str ""."" ""_Image"" Copy Copy    Copy Copy a directory into the image as a part of building the image. This works in a similar way toCOPYin aDockerfile. COPY COPY Dockerfile ","This method copies a directory into the image during the image building process, similar to COPY in a Dockerfile."
3,Can 'copy_local_dir' function accept both string and Path types for local_path and remote_path parameters?,modalImage copylocaldir,"defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": def copy_local_dir self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."" Union str Union str ""."" ""_Image"" Copy Copy    Copy Copy a directory into the image as a part of building the image. This works in a similar way toCOPYin aDockerfile. COPY COPY Dockerfile ","Yes, 'copy_local_dir' function can accept both string and Path types for local_path and remote_path parameters."
6,What is the default value for the 'remote_path' parameter in the 'copy_local_dir' method?,modalImage copylocaldir,"defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"":Copy defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": defcopy_local_dir(self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."") ->""_Image"": def copy_local_dir self, local_path:Union[str, Path], remote_path:Union[str, Path] =""."" Union str Union str ""."" ""_Image"" Copy Copy    Copy Copy a directory into the image as a part of building the image. This works in a similar way toCOPYin aDockerfile. COPY COPY Dockerfile ","The default value for the 'remote_path' parameter in the 'copy_local_dir' method is "".""."
0,What does the pip_install function do?,modalImage pipinstall,"@typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] Optional str None # Passes -f (--find-links) pip install Optional str None # Passes -i (--index-url) to pip install Optional str None # Passes --extra-index-url to pip install bool False # Passes --pre (allow pre-releases) to pip install bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Python packages using pip. Example Example image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") ""click"" ""httpx~=0.23.3"" Copy Copy    Copy ",It installs a list of Python packages using pip.
3,What does the 'pre' argument in the pip_install function do?,modalImage pipinstall,"@typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] Optional str None # Passes -f (--find-links) pip install Optional str None # Passes -i (--index-url) to pip install Optional str None # Passes --extra-index-url to pip install bool False # Passes --pre (allow pre-releases) to pip install bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Python packages using pip. Example Example image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") ""click"" ""httpx~=0.23.3"" Copy Copy    Copy ","It passes the --pre argument to pip install, which allows for pre-releases."
6,Can you provide an example of how to use the pip_install function?,modalImage pipinstall,"@typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]find_links:Optional[str] =None,# Passes -f (--find-links) pip installindex_url:Optional[str] =None,# Passes -i (--index-url) to pip installextra_index_url:Optional[str] =None,# Passes --extra-index-url to pip installpre:bool=False,# Passes --pre (allow pre-releases) to pip installforce_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] Optional str None # Passes -f (--find-links) pip install Optional str None # Passes -i (--index-url) to pip install Optional str None # Passes --extra-index-url to pip install bool False # Passes --pre (allow pre-releases) to pip install bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Python packages using pip. Example Example image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")Copy image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"") ""click"" ""httpx~=0.23.3"" Copy Copy    Copy ","Yes, an example is presented as image = modal.Image.debian_slim().pip_install(""click"",""httpx~=0.23.3"")."
0,What does the method pip_install_private_repos do?,modalImage pipinstallprivaterepos,"@typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typechecked def pip_install_private_repos self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False, str str None Sequence bool False ""_Image"" Copy Copy    Copy Install a list of Python packages from private git repositories using pip. This method currently supports Github and Gitlab only. Github:Provide amodal.Secretthat contains aGITHUB_TOKENkey-value pairGitlab:Provide amodal.Secretthat contains aGITLAB_TOKENkey-value pair Github:Provide amodal.Secretthat contains aGITHUB_TOKENkey-value pair Github: modal.Secret GITHUB_TOKEN Gitlab:Provide amodal.Secretthat contains aGITLAB_TOKENkey-value pair Gitlab: modal.Secret GITLAB_TOKEN These API tokens should have permissions to read the list of private repositories provided as arguments. We recommend using Github’s‘fine-grained’ access tokens.
These tokens are repo-scoped, and avoid granting read permission across all of a user’s private repos. ‘fine-grained’ access tokens Example Example image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) ""github.com/ecorp/private-one@1.0.0"" ""github.com/ecorp/private-two@main"" ""github.com/ecorp/private-three@d4776502"" # install from 'inner' directory on default branch. ""github.com/ecorp/private-four#subdirectory=inner"" ""erikbern"" ""github-read-private"" Copy Copy    Copy ",It installs a list of Python packages from private git repositories using pip.
3,What type of tokens should be provided for Github and Gitlab when using pip_install_private_repos?,modalImage pipinstallprivaterepos,"@typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typechecked def pip_install_private_repos self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False, str str None Sequence bool False ""_Image"" Copy Copy    Copy Install a list of Python packages from private git repositories using pip. This method currently supports Github and Gitlab only. Github:Provide amodal.Secretthat contains aGITHUB_TOKENkey-value pairGitlab:Provide amodal.Secretthat contains aGITLAB_TOKENkey-value pair Github:Provide amodal.Secretthat contains aGITHUB_TOKENkey-value pair Github: modal.Secret GITHUB_TOKEN Gitlab:Provide amodal.Secretthat contains aGITLAB_TOKENkey-value pair Gitlab: modal.Secret GITLAB_TOKEN These API tokens should have permissions to read the list of private repositories provided as arguments. We recommend using Github’s‘fine-grained’ access tokens.
These tokens are repo-scoped, and avoid granting read permission across all of a user’s private repos. ‘fine-grained’ access tokens Example Example image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) ""github.com/ecorp/private-one@1.0.0"" ""github.com/ecorp/private-two@main"" ""github.com/ecorp/private-three@d4776502"" # install from 'inner' directory on default branch. ""github.com/ecorp/private-four#subdirectory=inner"" ""erikbern"" ""github-read-private"" Copy Copy    Copy ","For Github, a modal.Secret with a GITHUB_TOKEN key-value pair should be provided and for Gitlab, a modal.Secret with a GITLAB_TOKEN key-value pair should be provided."
6,What is the purpose of the 'fine-grained' access tokens mentioned in the context?,modalImage pipinstallprivaterepos,"@typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typecheckeddefpip_install_private_repos(self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False,) ->""_Image"": @typechecked def pip_install_private_repos self,
    *repositories:str,
    git_user:str,
    gpu: GPU_T =None,
    secrets:Sequence[_Secret] = [],
    force_build:bool=False, str str None Sequence bool False ""_Image"" Copy Copy    Copy Install a list of Python packages from private git repositories using pip. This method currently supports Github and Gitlab only. Github:Provide amodal.Secretthat contains aGITHUB_TOKENkey-value pairGitlab:Provide amodal.Secretthat contains aGITLAB_TOKENkey-value pair Github:Provide amodal.Secretthat contains aGITHUB_TOKENkey-value pair Github: modal.Secret GITHUB_TOKEN Gitlab:Provide amodal.Secretthat contains aGITLAB_TOKENkey-value pair Gitlab: modal.Secret GITLAB_TOKEN These API tokens should have permissions to read the list of private repositories provided as arguments. We recommend using Github’s‘fine-grained’ access tokens.
These tokens are repo-scoped, and avoid granting read permission across all of a user’s private repos. ‘fine-grained’ access tokens Example Example image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
)Copy image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) image = (
    modal.Image
    .debian_slim()
    .pip_install_private_repos(""github.com/ecorp/private-one@1.0.0"",""github.com/ecorp/private-two@main""""github.com/ecorp/private-three@d4776502""# install from 'inner' directory on default branch.""github.com/ecorp/private-four#subdirectory=inner"",
        git_user=""erikbern"",
        secrets=[modal.Secret.from_name(""github-read-private"")],
    )
) ""github.com/ecorp/private-one@1.0.0"" ""github.com/ecorp/private-two@main"" ""github.com/ecorp/private-three@d4776502"" # install from 'inner' directory on default branch. ""github.com/ecorp/private-four#subdirectory=inner"" ""erikbern"" ""github-read-private"" Copy Copy    Copy ","'Fine-grained' access tokens are recommended because they are repo-scoped, and avoid granting read permission across all of a user’s private repos."
0,What is the function pip_install_from_requirements used for?,modalImage pipinstallfromrequirements,"@typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install_from_requirements self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str # Path to a requirements.txt file. Optional str None bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Python packages from a localrequirements.txtfile. requirements.txt ",It is used for installing a list of Python packages from a local requirements.txt file.
3,What does the 'force_build' parameter in the function pip_install_from_requirements do?,modalImage pipinstallfromrequirements,"@typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install_from_requirements self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str # Path to a requirements.txt file. Optional str None bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Python packages from a localrequirements.txtfile. requirements.txt ","When set to 'True', the 'force_build' boolean parameter forces the build of the package."
6,What is the purpose of the parameter 'secrets' in the pip_install_from_requirements function?,modalImage pipinstallfromrequirements,"@typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_requirements(self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install_from_requirements self,
    requirements_txt:str,# Path to a requirements.txt file.find_links:Optional[str] =None,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str # Path to a requirements.txt file. Optional str None bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Python packages from a localrequirements.txtfile. requirements.txt ",The parameter 'secrets' is a Sequence that is used for secret injection.
0,"What does the function ""pip_install_from_pyproject"" do?",modalImage pipinstallfrompyproject,"@typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install_from_pyproject self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str List str bool False Sequence None ""_Image"" Copy Copy    Copy Install dependencies specified by a localpyproject.tomlfile. pyproject.toml optional_dependenciesis a list of the keys of the
optional-dependencies section(s) of thepyproject.tomlfile
(e.g. test, doc, experiment, etc). When provided,
all of the packages in each listed section are installed as well. optional_dependencies pyproject.toml ",It installs dependencies specified by a local pyproject.toml file.
3,"What are the ""optional_dependencies"" in the ""pip_install_from_pyproject"" function?",modalImage pipinstallfrompyproject,"@typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install_from_pyproject self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str List str bool False Sequence None ""_Image"" Copy Copy    Copy Install dependencies specified by a localpyproject.tomlfile. pyproject.toml optional_dependenciesis a list of the keys of the
optional-dependencies section(s) of thepyproject.tomlfile
(e.g. test, doc, experiment, etc). When provided,
all of the packages in each listed section are installed as well. optional_dependencies pyproject.toml ","They are a list of keys from the optional-dependencies sections of the pyproject.toml file, such as ""test"", ""doc"", ""experiment"", etc."
6,"What does the ""force_build"" parameter do in the ""pip_install_from_pyproject"" function?",modalImage pipinstallfrompyproject,"@typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpip_install_from_pyproject(self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def pip_install_from_pyproject self,
    pyproject_toml:str,
    optional_dependencies:List[str] = [],
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str List str bool False Sequence None ""_Image"" Copy Copy    Copy Install dependencies specified by a localpyproject.tomlfile. pyproject.toml optional_dependenciesis a list of the keys of the
optional-dependencies section(s) of thepyproject.tomlfile
(e.g. test, doc, experiment, etc). When provided,
all of the packages in each listed section are installed as well. optional_dependencies pyproject.toml ","If set to True, it forces the build to happen."
0,What does the function poetry_install_from_file execute?,modalImage poetryinstallfromfile,"@typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def poetry_install_from_file self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str # Path to the lockfile. If not provided, uses poetry.lock in the same directory. Optional str None # If set to True, it will not use poetry.lock bool False # If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336 bool False bool False # Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install) List str # Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install) List str # Only install dependency groups specifed in this list. List str Sequence None ""_Image"" Copy Copy    Copy Install poetrydependenciesspecified by a localpyproject.tomlfile. dependencies pyproject.toml If not provided as argument the path to the lockfile is inferred. However, the
file has to exist, unlessignore_lockfileis set toTrue. ignore_lockfile True Note that the root project of the poetry project is not installed,
only the dependencies. For including local packages seemodal.Mount.from_local_python_packages modal.Mount.from_local_python_packages ",It installs poetry dependencies specified by a local pyproject.toml file.
3,What happens if ignore_lockfile is set to True in the poetry_install_from_file function?,modalImage poetryinstallfromfile,"@typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def poetry_install_from_file self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str # Path to the lockfile. If not provided, uses poetry.lock in the same directory. Optional str None # If set to True, it will not use poetry.lock bool False # If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336 bool False bool False # Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install) List str # Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install) List str # Only install dependency groups specifed in this list. List str Sequence None ""_Image"" Copy Copy    Copy Install poetrydependenciesspecified by a localpyproject.tomlfile. dependencies pyproject.toml If not provided as argument the path to the lockfile is inferred. However, the
file has to exist, unlessignore_lockfileis set toTrue. ignore_lockfile True Note that the root project of the poetry project is not installed,
only the dependencies. For including local packages seemodal.Mount.from_local_python_packages modal.Mount.from_local_python_packages ","If ignore_lockfile is set to True, it will not use the poetry.lock file."
6,How can you include local packages when executing the function poetry_install_from_file?,modalImage poetryinstallfromfile,"@typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefpoetry_install_from_file(self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def poetry_install_from_file self,
    poetry_pyproject_toml:str,# Path to the lockfile. If not provided, uses poetry.lock in the same directory.poetry_lockfile:Optional[str] =None,# If set to True, it will not use poetry.lockignore_lockfile:bool=False,# If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336old_installer:bool=False,
    force_build:bool=False,# Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install)with_:List[str] = [],# Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install)without:List[str] = [],# Only install dependency groups specifed in this list.only:List[str] = [],
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str # Path to the lockfile. If not provided, uses poetry.lock in the same directory. Optional str None # If set to True, it will not use poetry.lock bool False # If set to True, use old installer. See https://github.com/python-poetry/poetry/issues/3336 bool False bool False # Selected optional dependency groups to install (See https://python-poetry.org/docs/cli/#install) List str # Selected optional dependency groups to exclude (See https://python-poetry.org/docs/cli/#install) List str # Only install dependency groups specifed in this list. List str Sequence None ""_Image"" Copy Copy    Copy Install poetrydependenciesspecified by a localpyproject.tomlfile. dependencies pyproject.toml If not provided as argument the path to the lockfile is inferred. However, the
file has to exist, unlessignore_lockfileis set toTrue. ignore_lockfile True Note that the root project of the poetry project is not installed,
only the dependencies. For including local packages seemodal.Mount.from_local_python_packages modal.Mount.from_local_python_packages ",Local packages can be included by using the function 'modal.Mount.from_local_python_packages'.
0,What does the dockerfile_commands function do?,modalImage dockerfilecommands,"@typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typechecked def dockerfile_commands self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False, Union str List str Dict str str Sequence None # modal.Mount with local files to supply as build context for COPY commands Optional None bool False ""_Image"" Copy Copy    Copy Extend an image with arbitrary Dockerfile-like commands. ",The dockerfile_commands function extends an image with arbitrary Dockerfile-like commands.
3,What is the output of the dockerfile_commands function?,modalImage dockerfilecommands,"@typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typechecked def dockerfile_commands self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False, Union str List str Dict str str Sequence None # modal.Mount with local files to supply as build context for COPY commands Optional None bool False ""_Image"" Copy Copy    Copy Extend an image with arbitrary Dockerfile-like commands. ",The output of the dockerfile_commands function is an image that has been extended with arbitrary Dockerfile-like commands.
6,What does the force_build parameter do in the dockerfile_commands function?,modalImage dockerfilecommands,"@typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefdockerfile_commands(self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False,) ->""_Image"": @typechecked def dockerfile_commands self,
    *dockerfile_commands:Union[str,List[str]],
    context_files:Dict[str,str] = {},
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,# modal.Mount with local files to supply as build context for COPY commandscontext_mount:Optional[_Mount] =None,
    force_build:bool=False, Union str List str Dict str str Sequence None # modal.Mount with local files to supply as build context for COPY commands Optional None bool False ""_Image"" Copy Copy    Copy Extend an image with arbitrary Dockerfile-like commands. ","If set to True, it will force a build to occur."
0,"What does the method ""run_commands"" do?",modalImage runcommands,"@typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typechecked def run_commands self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False, Union str List str Sequence None bool False ""_Image"" Copy Copy    Copy Extend an image with a list of shell commands to run. ",It extends an image with a list of shell commands to run.
3,"What are the inputs that the ""run_commands"" method accepts?",modalImage runcommands,"@typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typechecked def run_commands self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False, Union str List str Sequence None bool False ""_Image"" Copy Copy    Copy Extend an image with a list of shell commands to run. ","The ""run_commands"" method accepts commands (as a string or a list of strings), secrets (sequence of _Secret types), gpu (GPU_T type), and force_build (boolean) as inputs."
6,What happen when 'force_build' argument in 'run_commands' is set to 'True'?,modalImage runcommands,"@typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typecheckeddefrun_commands(self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False,) ->""_Image"": @typechecked def run_commands self,
    *commands:Union[str,List[str]],
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    force_build:bool=False, Union str List str Sequence None bool False ""_Image"" Copy Copy    Copy Extend an image with a list of shell commands to run. ","When 'force_build' is set to 'True', it forces the build process."
0,What is the default Python version used in the 'conda' method as per the content provided?,modalImage conda,"@staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod @typechecked def conda python_version:str=""3.9"", force_build:bool=False str ""3.9"" bool False ""_Image"" Copy Copy    Copy A Conda base image, using miniconda3 and derived from the official Docker Hub image.
In most cases, usingImage.micromamba()withmicromamba_installis recommended overImage.conda(), as it leads to significantly faster image build times. Image.micromamba() Image.micromamba() micromamba_install micromamba_install Image.conda() ","The default Python version is ""3.9""."
3,Which base image is used for Conda according to the provided content?,modalImage conda,"@staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod @typechecked def conda python_version:str=""3.9"", force_build:bool=False str ""3.9"" bool False ""_Image"" Copy Copy    Copy A Conda base image, using miniconda3 and derived from the official Docker Hub image.
In most cases, usingImage.micromamba()withmicromamba_installis recommended overImage.conda(), as it leads to significantly faster image build times. Image.micromamba() Image.micromamba() micromamba_install micromamba_install Image.conda() ","A Conda base image is used, which utilizes miniconda3 and is derived from the official Docker Hub image."
6,What does setting the 'force_build' parameter to 'False' imply?,modalImage conda,"@staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefconda(python_version:str=""3.9"", force_build:bool=False) ->""_Image"": @staticmethod @typechecked def conda python_version:str=""3.9"", force_build:bool=False str ""3.9"" bool False ""_Image"" Copy Copy    Copy A Conda base image, using miniconda3 and derived from the official Docker Hub image.
In most cases, usingImage.micromamba()withmicromamba_installis recommended overImage.conda(), as it leads to significantly faster image build times. Image.micromamba() Image.micromamba() micromamba_install micromamba_install Image.conda() ",Setting 'force_build' parameter to 'False' implies that the image will not be forcefully built unless necessary.
0,What type of values can the 'packages' parameter take in the 'conda_install' function?,modalImage condainstall,"@typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def conda_install self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] List str # A list of Conda channels, eg. [""conda-forge"", ""nvidia""] bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of additional packages using Conda. Note that in most cases, usingImage.micromamba()withmicromamba_installis recommended overconda_install, as it leads to significantly faster image build times. Image.micromamba() Image.micromamba() micromamba_install micromamba_install conda_install ","The 'packages' parameter can take a single string or a list of strings, which represent Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]."
3,Can I force build in the 'conda_install' function?,modalImage condainstall,"@typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def conda_install self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] List str # A list of Conda channels, eg. [""conda-forge"", ""nvidia""] bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of additional packages using Conda. Note that in most cases, usingImage.micromamba()withmicromamba_installis recommended overconda_install, as it leads to significantly faster image build times. Image.micromamba() Image.micromamba() micromamba_install micromamba_install conda_install ","Yes, by setting the 'force_build' parameter to True, you can force build in the 'conda_install' function."
6,What does 'conda_install' function do?,modalImage condainstall,"@typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_install(self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def conda_install self,
    *packages:Union[str,List[str]],# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]channels:List[str] = [],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] List str # A list of Conda channels, eg. [""conda-forge"", ""nvidia""] bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of additional packages using Conda. Note that in most cases, usingImage.micromamba()withmicromamba_installis recommended overconda_install, as it leads to significantly faster image build times. Image.micromamba() Image.micromamba() micromamba_install micromamba_install conda_install ","'conda_install' function is used to install a list of additional packages using Conda. However, Image.micromamba()withmicromamba_install is recommended over conda_install, as it leads to significantly faster image build times."
0,What is the function conda_update_from_environment used for?,modalImage condaupdatefromenvironment,"@typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def conda_update_from_environment self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str bool False Sequence None ""_Image"" Copy Copy    Copy Update a Conda environment using dependencies from a given environment.yml file. ",The function conda_update_from_environment is used to update a Conda environment using dependencies from a given environment.yml file.
3,What is the use of the 'force_build' parameter in the function conda_update_from_environment?,modalImage condaupdatefromenvironment,"@typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def conda_update_from_environment self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str bool False Sequence None ""_Image"" Copy Copy    Copy Update a Conda environment using dependencies from a given environment.yml file. ",The 'force_build' parameter in the function conda_update_from_environment determines whether to force build or not.
6,What type of object does the GPU_T parameter accept in the conda_update_from_environment function? ,modalImage condaupdatefromenvironment,"@typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefconda_update_from_environment(self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def conda_update_from_environment self,
    environment_yml:str,
    force_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, str bool False Sequence None ""_Image"" Copy Copy    Copy Update a Conda environment using dependencies from a given environment.yml file. ",The GPU_T parameter in the conda_update_from_environment function accepts None value.
0,What is a Micromamba base image used for?,modalImage micromamba,"@staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod @typechecked def micromamba python_version:str=""3.9"",
    force_build:bool=False, str ""3.9"" bool False ""_Image"" Copy Copy    Copy A Micromamba base image. Micromamba allows for fast building of small Conda-based containers.
In most cases it will be faster than usingImage.conda(). Image.conda() Image.conda() ",Micromamba base image is used for fast building of small Conda-based containers.
3,What does the force_build parameter in the micromamba method default to?,modalImage micromamba,"@staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod @typechecked def micromamba python_version:str=""3.9"",
    force_build:bool=False, str ""3.9"" bool False ""_Image"" Copy Copy    Copy A Micromamba base image. Micromamba allows for fast building of small Conda-based containers.
In most cases it will be faster than usingImage.conda(). Image.conda() Image.conda() ",The force_build parameter in the micromamba method defaults to False.
6,Can the micromamba method be referred as static?,modalImage micromamba,"@staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"":Copy @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod@typecheckeddefmicromamba(python_version:str=""3.9"",
    force_build:bool=False,) ->""_Image"": @staticmethod @typechecked def micromamba python_version:str=""3.9"",
    force_build:bool=False, str ""3.9"" bool False ""_Image"" Copy Copy    Copy A Micromamba base image. Micromamba allows for fast building of small Conda-based containers.
In most cases it will be faster than usingImage.conda(). Image.conda() Image.conda() ","Yes, the micromamba method can be referred to as static, as it uses the @staticmethod decorator."
0,What does the micromamba_install function do?,modalImage micromambainstall,"@typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def micromamba_install self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] Union str List str # A list of Conda channels, eg. [""conda-forge"", ""nvidia""] List str bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of additional packages using micromamba. ",The micromamba_install function installs a list of additional packages using micromamba.
3,What is an example of a list of Python packages that can be provided as input to the micromamba_install function?,modalImage micromambainstall,"@typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def micromamba_install self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] Union str List str # A list of Conda channels, eg. [""conda-forge"", ""nvidia""] List str bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of additional packages using micromamba. ","An example of a list of Python packages could be [""numpy"", ""matplotlib>=3.5.0""]."
6,What is the output of the function micromamba_install?,modalImage micromambainstall,"@typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefmicromamba_install(self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def micromamba_install self,# A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""]*packages:Union[str,List[str]],# A list of Conda channels, eg. [""conda-forge"", ""nvidia""]channels:List[str] = [],
    force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, # A list of Python packages, eg. [""numpy"", ""matplotlib>=3.5.0""] Union str List str # A list of Conda channels, eg. [""conda-forge"", ""nvidia""] List str bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of additional packages using micromamba. ","The output of the micromamba_install function is an ""_Image""."
0,"What is the purpose of the ""from_registry"" function?",modalImage fromregistry,"@staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_registry tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a public image registry, such as Docker Hub. The image must be built for thelinux/amd64platform and have Python 3.7 or above
installed and available on PATH aspython. It should also havepip. linux/amd64 python pip If your image does not come with Python installed, you can use theadd_pythonparameter
to specify a version of Python to add to the image. Supported versions are3.8,3.9,3.10, and3.11. For Alpine-based images, use3.8-muslthrough3.11-musl, which
are statically-linked Python installations. add_python 3.8 3.9 3.10 3.11 3.8-musl 3.11-musl You may also usesetup_dockerfile_commandsto run Dockerfile commands before the
remaining commands run. This might be useful if you want a custom Python installation or to
set aSHELL. Preferrun_commands()when possible though. setup_dockerfile_commands SHELL run_commands() Examples Examples modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") ""python:3.11-slim-bookworm"" ""ubuntu:22.04"" ""3.11"" ""alpine:3.18.3"" ""3.11-musl"" Copy Copy    Copy ","The function ""from_registry"" is used to build a Modal image from a public image registry, such as Docker Hub."
3,What software should be installed and available on the image's PATH?,modalImage fromregistry,"@staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_registry tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a public image registry, such as Docker Hub. The image must be built for thelinux/amd64platform and have Python 3.7 or above
installed and available on PATH aspython. It should also havepip. linux/amd64 python pip If your image does not come with Python installed, you can use theadd_pythonparameter
to specify a version of Python to add to the image. Supported versions are3.8,3.9,3.10, and3.11. For Alpine-based images, use3.8-muslthrough3.11-musl, which
are statically-linked Python installations. add_python 3.8 3.9 3.10 3.11 3.8-musl 3.11-musl You may also usesetup_dockerfile_commandsto run Dockerfile commands before the
remaining commands run. This might be useful if you want a custom Python installation or to
set aSHELL. Preferrun_commands()when possible though. setup_dockerfile_commands SHELL run_commands() Examples Examples modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") ""python:3.11-slim-bookworm"" ""ubuntu:22.04"" ""3.11"" ""alpine:3.18.3"" ""3.11-musl"" Copy Copy    Copy ",Python 3.7 or above should be installed and available on the image's PATH as python. It should also have pip.
6,What are some examples of commands used to build an image from a registry?,modalImage fromregistry,"@staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_registry(tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_registry tag:str,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a public image registry, such as Docker Hub. The image must be built for thelinux/amd64platform and have Python 3.7 or above
installed and available on PATH aspython. It should also havepip. linux/amd64 python pip If your image does not come with Python installed, you can use theadd_pythonparameter
to specify a version of Python to add to the image. Supported versions are3.8,3.9,3.10, and3.11. For Alpine-based images, use3.8-muslthrough3.11-musl, which
are statically-linked Python installations. add_python 3.8 3.9 3.10 3.11 3.8-musl 3.11-musl You may also usesetup_dockerfile_commandsto run Dockerfile commands before the
remaining commands run. This might be useful if you want a custom Python installation or to
set aSHELL. Preferrun_commands()when possible though. setup_dockerfile_commands SHELL run_commands() Examples Examples modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")Copy modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") modal.Image.from_registry(""python:3.11-slim-bookworm"")
modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"") ""python:3.11-slim-bookworm"" ""ubuntu:22.04"" ""3.11"" ""alpine:3.18.3"" ""3.11-musl"" Copy Copy    Copy ","Some examples include ""modal.Image.from_registry(""python:3.11-slim-bookworm"")"",  ""modal.Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")"", and ""modal.Image.from_registry(""alpine:3.18.3"", add_python=""3.11-musl"")""."
0,"What does the ""from_dockerhub"" method return?",modalImage fromdockerhub,"@staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_dockerhub tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs, str List str bool False ""_Image"" Copy Copy    Copy ","It returns an ""_Image""."
3,What is the default value for the 'force_build' argument in the 'from_dockerhub' method?,modalImage fromdockerhub,"@staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_dockerhub tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs, str List str bool False ""_Image"" Copy Copy    Copy ",The default value is False.
6,What does the 'tag' argument represent in the 'from_dockerhub' method?,modalImage fromdockerhub,"@staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerhub(tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_dockerhub tag:str,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    **kwargs, str List str bool False ""_Image"" Copy Copy    Copy ",The 'tag' represents a specific version of a Docker image.
0,What is the utility of the from_gcp_artifact_registry method in this content?,modalImage fromgcpartifactregistry,"@staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_gcp_artifact_registry tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str Optional None List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a private image in GCP Artifact Registry. You will need to pass amodal.Secretcontaining your GCP service account key
asSERVICE_ACCOUNT_JSON. This can be done from theSecretspage.
The service account needs to have at least an “Artifact Registry Reader” role. modal.Secret SERVICE_ACCOUNT_JSON Secrets SeeImage.from_registry()for information about the other parameters. Image.from_registry() Example Example modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) ""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"" ""my-gcp-secret"" ""3.11"" Copy Copy    Copy ",The from_gcp_artifact_registry method is used to build a Modal image from a private image in GCP Artifact Registry.
3,"What is the role that the service account needs to have at least, according to the given text?",modalImage fromgcpartifactregistry,"@staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_gcp_artifact_registry tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str Optional None List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a private image in GCP Artifact Registry. You will need to pass amodal.Secretcontaining your GCP service account key
asSERVICE_ACCOUNT_JSON. This can be done from theSecretspage.
The service account needs to have at least an “Artifact Registry Reader” role. modal.Secret SERVICE_ACCOUNT_JSON Secrets SeeImage.from_registry()for information about the other parameters. Image.from_registry() Example Example modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) ""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"" ""my-gcp-secret"" ""3.11"" Copy Copy    Copy ",The service account needs to have at least an “Artifact Registry Reader” role.
6,Can you provide an example of using the from_gcp_artifact_registry method?,modalImage fromgcpartifactregistry,"@staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_gcp_artifact_registry(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_gcp_artifact_registry tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str Optional None List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a private image in GCP Artifact Registry. You will need to pass amodal.Secretcontaining your GCP service account key
asSERVICE_ACCOUNT_JSON. This can be done from theSecretspage.
The service account needs to have at least an “Artifact Registry Reader” role. modal.Secret SERVICE_ACCOUNT_JSON Secrets SeeImage.from_registry()for information about the other parameters. Image.from_registry() Example Example modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
)Copy modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"",
    secret=modal.Secret.from_name(""my-gcp-secret""),
    add_python=""3.11"",
) ""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"" ""my-gcp-secret"" ""3.11"" Copy Copy    Copy ","Yes, here is an example: modal.Image.from_gcp_artifact_registry(""us-east1-docker.pkg.dev/my-project-1234/my-repo/my-image:my-version"", secret=modal.Secret.from_name(""my-gcp-secret""), add_python=""3.11"")."
0,What is the purpose of the from_aws_ecr method in the modal.Image class?,modalImage fromawsecr,"@staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_aws_ecr tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str Optional None List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a private image in AWS Elastic Container Registry (ECR). You will need to pass amodal.Secretcontaining an AWS key (AWS_ACCESS_KEY_ID) and
secret (AWS_SECRET_ACCESS_KEY) with permissions to access the target ECR registry. modal.Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY IAM configuration details can be found in the AWS documentation for“Private repository policies”. “Private repository policies” SeeImage.from_registry()for information about the other parameters. Image.from_registry() Example Example modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"" ""aws"" ""3.11"" Copy Copy    Copy ",The from_aws_ecr method is used to build a Modal image from a private image in the AWS Elastic Container Registry (ECR).
3,"What does the ""add_python"" parameter in the from_aws_ecr method indicate?",modalImage fromawsecr,"@staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_aws_ecr tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str Optional None List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a private image in AWS Elastic Container Registry (ECR). You will need to pass amodal.Secretcontaining an AWS key (AWS_ACCESS_KEY_ID) and
secret (AWS_SECRET_ACCESS_KEY) with permissions to access the target ECR registry. modal.Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY IAM configuration details can be found in the AWS documentation for“Private repository policies”. “Private repository policies” SeeImage.from_registry()for information about the other parameters. Image.from_registry() Example Example modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"" ""aws"" ""3.11"" Copy Copy    Copy ","The ""add_python"" parameter is used to add a specific version of Python to the image."
6,What is an example of a call to the from_aws_ecr method?,modalImage fromawsecr,"@staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod@typecheckeddeffrom_aws_ecr(tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs,) ->""_Image"": @staticmethod @typechecked def from_aws_ecr tag:str,
    secret:Optional[_Secret] =None,
    *,
    setup_dockerfile_commands:List[str] = [],
    force_build:bool=False,
    add_python:Optional[str] =None,
    **kwargs, str Optional None List str bool False Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a private image in AWS Elastic Container Registry (ECR). You will need to pass amodal.Secretcontaining an AWS key (AWS_ACCESS_KEY_ID) and
secret (AWS_SECRET_ACCESS_KEY) with permissions to access the target ECR registry. modal.Secret AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY IAM configuration details can be found in the AWS documentation for“Private repository policies”. “Private repository policies” SeeImage.from_registry()for information about the other parameters. Image.from_registry() Example Example modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
)Copy modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"",
    secret=modal.Secret.from_name(""aws""),
    add_python=""3.11"",
) ""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"" ""aws"" ""3.11"" Copy Copy    Copy ","An example call would be: modal.Image.from_aws_ecr(""000000000000.dkr.ecr.us-east-1.amazonaws.com/my-private-registry:my-version"", secret=modal.Secret.from_name(""aws""), add_python=""3.11"")."
0,What method can be used to build a Modal image from a local Dockerfile?,modalImage fromdockerfile,"@staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod @typechecked def from_dockerfile path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None, Union str Optional None # modal.Mount with local files to supply as build context for COPY commands bool False Sequence None Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a local Dockerfile. If your Dockerfile does not have Python installed, you can use theadd_pythonparameter
to specify a version of Python to add to the image. Supported versions are3.8,3.9,3.10, and3.11. For Alpine-based images, use3.8-muslthrough3.11-musl, which
are statically-linked Python installations. add_python 3.8 3.9 3.10 3.11 3.8-musl 3.11-musl Example Example image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") ""./Dockerfile"" ""3.10"" Copy Copy    Copy ","The method that can be used is ""from_dockerfile""."
3,What versions of Python should be used for Alpine-based images?,modalImage fromdockerfile,"@staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod @typechecked def from_dockerfile path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None, Union str Optional None # modal.Mount with local files to supply as build context for COPY commands bool False Sequence None Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a local Dockerfile. If your Dockerfile does not have Python installed, you can use theadd_pythonparameter
to specify a version of Python to add to the image. Supported versions are3.8,3.9,3.10, and3.11. For Alpine-based images, use3.8-muslthrough3.11-musl, which
are statically-linked Python installations. add_python 3.8 3.9 3.10 3.11 3.8-musl 3.11-musl Example Example image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") ""./Dockerfile"" ""3.10"" Copy Copy    Copy ","For Alpine-based images, you should use 3.8-musl through 3.11-musl, which are statically-linked Python installations."
6,What's an example of using the 'from_dockerfile' method with the 'add_python' parameter?,modalImage fromdockerfile,"@staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"":Copy @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod@typecheckeddeffrom_dockerfile(path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None,) ->""_Image"": @staticmethod @typechecked def from_dockerfile path:Union[str, Path],
    context_mount:Optional[
        _Mount
    ] =None,# modal.Mount with local files to supply as build context for COPY commandsforce_build:bool=False,
    *,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,
    add_python:Optional[str] =None, Union str Optional None # modal.Mount with local files to supply as build context for COPY commands bool False Sequence None Optional str None ""_Image"" Copy Copy    Copy Build a Modal image from a local Dockerfile. If your Dockerfile does not have Python installed, you can use theadd_pythonparameter
to specify a version of Python to add to the image. Supported versions are3.8,3.9,3.10, and3.11. For Alpine-based images, use3.8-muslthrough3.11-musl, which
are statically-linked Python installations. add_python 3.8 3.9 3.10 3.11 3.8-musl 3.11-musl Example Example image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")Copy image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"") ""./Dockerfile"" ""3.10"" Copy Copy    Copy ","An example would be ""image = modal.Image.from_dockerfile(""./Dockerfile"", add_python=""3.10"")""."
0,What is the method debian_slim in the content used for?,modalImage debianslim,"@staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod @typechecked def debian_slim python_version:Optional[str] =None, force_build:bool=False Optional str None bool False ""_Image"" Copy Copy    Copy Default image, based on the officialpython:X.Y.Z-slim-bullseyeDocker images. python:X.Y.Z-slim-bullseye ","The method debian_slim is used to define and potentially build an image, based on the official python:X.Y.Z-slim-bullseye Docker images."
3,Can the python version be specified when using the debian_slim method?,modalImage debianslim,"@staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod @typechecked def debian_slim python_version:Optional[str] =None, force_build:bool=False Optional str None bool False ""_Image"" Copy Copy    Copy Default image, based on the officialpython:X.Y.Z-slim-bullseyeDocker images. python:X.Y.Z-slim-bullseye ","Yes, the python version can be specified when using the debian_slim method."
6,What is the base of the default image used?,modalImage debianslim,"@staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"":Copy @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod@typecheckeddefdebian_slim(python_version:Optional[str] =None, force_build:bool=False) ->""_Image"": @staticmethod @typechecked def debian_slim python_version:Optional[str] =None, force_build:bool=False Optional str None bool False ""_Image"" Copy Copy    Copy Default image, based on the officialpython:X.Y.Z-slim-bullseyeDocker images. python:X.Y.Z-slim-bullseye ",The base of the default image used is the official python:X.Y.Z-slim-bullseye Docker images.
0,What function is being used to install a list of Debian packages?,modalImage aptinstall,"@typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def apt_install self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of packages, e.g. [""ssh"", ""libpq-dev""] bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Debian packages usingapt. apt Example Example image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"") image = modal.Image.debian_slim().apt_install(""git"") image = modal.Image.debian_slim().apt_install(""git"") ""git"" Copy Copy    Copy ",The function used is apt_install.
3,Can the apt_install be forced to build even when it's not needed?,modalImage aptinstall,"@typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def apt_install self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of packages, e.g. [""ssh"", ""libpq-dev""] bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Debian packages usingapt. apt Example Example image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"") image = modal.Image.debian_slim().apt_install(""git"") image = modal.Image.debian_slim().apt_install(""git"") ""git"" Copy Copy    Copy ","Yes, by setting the force_build argument to True."
6,How can you use apt_install function to install git using modal.Image?,modalImage aptinstall,"@typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"":Copy @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typecheckeddefapt_install(self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None,) ->""_Image"": @typechecked def apt_install self,
    *packages:Union[str,List[str]],# A list of packages, e.g. [""ssh"", ""libpq-dev""]force_build:bool=False,
    secrets:Sequence[_Secret] = [],
    gpu: GPU_T =None, Union str List str # A list of packages, e.g. [""ssh"", ""libpq-dev""] bool False Sequence None ""_Image"" Copy Copy    Copy Install a list of Debian packages usingapt. apt Example Example image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"")Copy image = modal.Image.debian_slim().apt_install(""git"") image = modal.Image.debian_slim().apt_install(""git"") image = modal.Image.debian_slim().apt_install(""git"") ""git"" Copy Copy    Copy ","You can use it in the following way: image = modal.Image.debian_slim().apt_install(""git"")."
0,What does the run_function in this context use as parameters?,modalImage runfunction,"@typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typechecked def run_function self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False, Callable Any Optional None # An optional Modal Secret with environment variables for the container Sequence  # Plural version of `secret` when multiple secrets are needed None # GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...) Sequence  Dict Union str Dict Union str Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Optional int 86400 # Maximum execution time of the function in seconds. bool False ""_Image"" Copy Copy    Copy Run user-defined functionraw_functionas an image build step. The function runs just like an ordinary Modal
function, and any kwargs accepted by@stub.function(such asMounts,NetworkFileSystems, and resource requests) can
be supplied to it. After it finishes execution, a snapshot of the resulting container file system is saved as an image. raw_function @stub.function Mount NetworkFileSystem Note Note Only the source code ofraw_function, the contents of**kwargs, and any referencedglobalvariables are used to determine whether the image has changed
and needs to be rebuilt. If this function references other functions or variables, the image will not be rebuilt if you
make changes to them. You can force a rebuild by changing the function’s source code itself. raw_function **kwargs global Example Example defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) def my_build_function open ""model.pt"" ""w"" ""parameters!"" ""torch"" Copy Copy    Copy ","raw_f: a Callable function, Optional Modal Secret for the containers, several secrets when necessary, GPU specifications as needed, mounting sequence, shared volumes, network file systems, CPU cores number, required memory in MiB, and a timeout limit in seconds."
3,"In the example script, what does my_build_function do?",modalImage runfunction,"@typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typechecked def run_function self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False, Callable Any Optional None # An optional Modal Secret with environment variables for the container Sequence  # Plural version of `secret` when multiple secrets are needed None # GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...) Sequence  Dict Union str Dict Union str Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Optional int 86400 # Maximum execution time of the function in seconds. bool False ""_Image"" Copy Copy    Copy Run user-defined functionraw_functionas an image build step. The function runs just like an ordinary Modal
function, and any kwargs accepted by@stub.function(such asMounts,NetworkFileSystems, and resource requests) can
be supplied to it. After it finishes execution, a snapshot of the resulting container file system is saved as an image. raw_function @stub.function Mount NetworkFileSystem Note Note Only the source code ofraw_function, the contents of**kwargs, and any referencedglobalvariables are used to determine whether the image has changed
and needs to be rebuilt. If this function references other functions or variables, the image will not be rebuilt if you
make changes to them. You can force a rebuild by changing the function’s source code itself. raw_function **kwargs global Example Example defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) def my_build_function open ""model.pt"" ""w"" ""parameters!"" ""torch"" Copy Copy    Copy ",my_build_function opens a file named 'model.pt' and writes 'parameters!' into the file.
6,What does the note about raw_function and **kwargs mean?,modalImage runfunction,"@typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"":Copy @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typecheckeddefrun_function(self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False,) ->""_Image"": @typechecked def run_function self,
    raw_f:Callable[[],Any],
    *,
    secret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.timeout:Optional[int] =86400,# Maximum execution time of the function in seconds.force_build:bool=False, Callable Any Optional None # An optional Modal Secret with environment variables for the container Sequence  # Plural version of `secret` when multiple secrets are needed None # GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...) Sequence  Dict Union str Dict Union str Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Optional int 86400 # Maximum execution time of the function in seconds. bool False ""_Image"" Copy Copy    Copy Run user-defined functionraw_functionas an image build step. The function runs just like an ordinary Modal
function, and any kwargs accepted by@stub.function(such asMounts,NetworkFileSystems, and resource requests) can
be supplied to it. After it finishes execution, a snapshot of the resulting container file system is saved as an image. raw_function @stub.function Mount NetworkFileSystem Note Note Only the source code ofraw_function, the contents of**kwargs, and any referencedglobalvariables are used to determine whether the image has changed
and needs to be rebuilt. If this function references other functions or variables, the image will not be rebuilt if you
make changes to them. You can force a rebuild by changing the function’s source code itself. raw_function **kwargs global Example Example defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
)Copy defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) defmy_build_function():open(""model.pt"",""w"").write(""parameters!"")

image = (
    modal.Image
        .debian_slim()
        .pip_install(""torch"")
        .run_function(my_build_function, secrets=[...], mounts=[...])
) def my_build_function open ""model.pt"" ""w"" ""parameters!"" ""torch"" Copy Copy    Copy ","It means only the source code of raw_function, the contents of **kwargs, and any referenced global variables are considered when deciding if the image has changed and needs to be rebuilt. Changes to other variables or included functions won't trigger a rebuild."
0,What type of image is being created in the code snippet?,modalImage env,"@typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typechecked def env self,vars:Dict[str,str] vars Dict str str ""_Image"" Copy Copy    Copy Sets the environmental variables of the image. Example Example image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) ""CONDA_OVERRIDE_CUDA"" ""11.2"" ""jax"" ""cuda-nvcc"" ""conda-forge"" ""nvidia"" ""dm-haiku"" ""optax"" Copy Copy    Copy ",A modal.Image is being created.
3,"Which method is used to install the packages ""jax"" and ""cuda-nvcc""?",modalImage env,"@typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typechecked def env self,vars:Dict[str,str] vars Dict str str ""_Image"" Copy Copy    Copy Sets the environmental variables of the image. Example Example image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) ""CONDA_OVERRIDE_CUDA"" ""11.2"" ""jax"" ""cuda-nvcc"" ""conda-forge"" ""nvidia"" ""dm-haiku"" ""optax"" Copy Copy    Copy ","The packages ""jax"" and ""cuda-nvcc"" are installed using the conda_install method."
6,Which packages are installed using the pip_install method?,modalImage env,"@typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"":Copy @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typecheckeddefenv(self,vars:Dict[str,str]) ->""_Image"": @typechecked def env self,vars:Dict[str,str] vars Dict str str ""_Image"" Copy Copy    Copy Sets the environmental variables of the image. Example Example image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
)Copy image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) image = (
    modal.Image.conda()
        .env({""CONDA_OVERRIDE_CUDA"":""11.2""})
        .conda_install(""jax"",""cuda-nvcc"", channels=[""conda-forge"",""nvidia""])
        .pip_install(""dm-haiku"",""optax"")
) ""CONDA_OVERRIDE_CUDA"" ""11.2"" ""jax"" ""cuda-nvcc"" ""conda-forge"" ""nvidia"" ""dm-haiku"" ""optax"" Copy Copy    Copy ","The packages ""dm-haiku"" and ""optax"" are installed using the pip_install method."
0,What does the 'workdir' function do in Modal.Image?,modalImage workdir,"@typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typechecked def workdir self, path:str str ""_Image"" Copy Copy    Copy Sets the working directory for subequent image build steps. Example Example image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) ""git clone https://xyz app"" ""/app"" ""yarn install"" Copy Copy    Copy modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Image from_id persist from_name lookup extend copy_mount copy_local_file copy_local_dir pip_install pip_install_private_repos pip_install_from_requirements pip_install_from_pyproject poetry_install_from_file dockerfile_commands run_commands conda conda_install conda_update_from_environment micromamba micromamba_install from_registry from_dockerhub from_gcp_artifact_registry from_aws_ecr from_dockerfile debian_slim apt_install run_function env workdir CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'workdir' function sets the working directory for subsequent image build steps.
3,What is the first command run in the provided code example?,modalImage workdir,"@typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typechecked def workdir self, path:str str ""_Image"" Copy Copy    Copy Sets the working directory for subequent image build steps. Example Example image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) ""git clone https://xyz app"" ""/app"" ""yarn install"" Copy Copy    Copy modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Image from_id persist from_name lookup extend copy_mount copy_local_file copy_local_dir pip_install pip_install_private_repos pip_install_from_requirements pip_install_from_pyproject poetry_install_from_file dockerfile_commands run_commands conda conda_install conda_update_from_environment micromamba micromamba_install from_registry from_dockerhub from_gcp_artifact_registry from_aws_ecr from_dockerfile debian_slim apt_install run_function env workdir CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The first command is ""git clone https://xyz app""."
6,What is the base image used in the provided code example?,modalImage workdir,"@typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typechecked def workdir self, path:str str ""_Image"" Copy Copy    Copy Sets the working directory for subequent image build steps. Example Example image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) ""git clone https://xyz app"" ""/app"" ""yarn install"" Copy Copy    Copy modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Image from_id persist from_name lookup extend copy_mount copy_local_file copy_local_dir pip_install pip_install_private_repos pip_install_from_requirements pip_install_from_pyproject poetry_install_from_file dockerfile_commands run_commands conda conda_install conda_update_from_environment micromamba micromamba_install from_registry from_dockerhub from_gcp_artifact_registry from_aws_ecr from_dockerfile debian_slim apt_install run_function env workdir CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The base image used is 'debian_slim'.
0,What is the function of the 'workdir' in the given code?,modalImage workdir,"@typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typechecked def workdir self, path:str str ""_Image"" Copy Copy    Copy Sets the working directory for subequent image build steps. Example Example image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) ""git clone https://xyz app"" ""/app"" ""yarn install"" Copy Copy    Copy modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Image from_id persist from_name lookup extend copy_mount copy_local_file copy_local_dir pip_install pip_install_private_repos pip_install_from_requirements pip_install_from_pyproject poetry_install_from_file dockerfile_commands run_commands conda conda_install conda_update_from_environment micromamba micromamba_install from_registry from_dockerhub from_gcp_artifact_registry from_aws_ecr from_dockerfile debian_slim apt_install run_function env workdir CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'workdir' function sets the working directory for subsequent image build steps.
3,What command is used to install dependencies in the provided example?,modalImage workdir,"@typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typechecked def workdir self, path:str str ""_Image"" Copy Copy    Copy Sets the working directory for subequent image build steps. Example Example image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) ""git clone https://xyz app"" ""/app"" ""yarn install"" Copy Copy    Copy modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Image from_id persist from_name lookup extend copy_mount copy_local_file copy_local_dir pip_install pip_install_private_repos pip_install_from_requirements pip_install_from_pyproject poetry_install_from_file dockerfile_commands run_commands conda conda_install conda_update_from_environment micromamba micromamba_install from_registry from_dockerhub from_gcp_artifact_registry from_aws_ecr from_dockerfile debian_slim apt_install run_function env workdir CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""yarn install"" command is used to install dependencies."
6,What programming language appears to be used in the given code snippet? ,modalImage workdir,"@typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"":Copy @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typecheckeddefworkdir(self, path:str) ->""_Image"": @typechecked def workdir self, path:str str ""_Image"" Copy Copy    Copy Sets the working directory for subequent image build steps. Example Example image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
)Copy image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) image = (
    modal.Image.debian_slim()
        .run_commands(""git clone https://xyz app"")
        .workdir(""/app"")
        .run_commands(""yarn install"")
) ""git clone https://xyz app"" ""/app"" ""yarn install"" Copy Copy    Copy modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Imagefrom_idpersistfrom_namelookupextendcopy_mountcopy_local_filecopy_local_dirpip_installpip_install_private_repospip_install_from_requirementspip_install_from_pyprojectpoetry_install_from_filedockerfile_commandsrun_commandscondaconda_installconda_update_from_environmentmicromambamicromamba_installfrom_registryfrom_dockerhubfrom_gcp_artifact_registryfrom_aws_ecrfrom_dockerfiledebian_slimapt_installrun_functionenvworkdir modal.Image from_id persist from_name lookup extend copy_mount copy_local_file copy_local_dir pip_install pip_install_private_repos pip_install_from_requirements pip_install_from_pyproject poetry_install_from_file dockerfile_commands run_commands conda conda_install conda_update_from_environment micromamba micromamba_install from_registry from_dockerhub from_gcp_artifact_registry from_aws_ecr from_dockerfile debian_slim apt_install run_function env workdir CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The given code snippet appears to be in Python.
0,"What does ""modal secret"" manage?",modal secret,"modal secret Manage secrets. Usage: Usage modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]... modal secret [OPTIONS] COMMAND [ARGS]... modal secret [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a new secret, or overwrite an existing one.list: List your published secrets. create: Create a new secret, or overwrite an existing one. create list: List your published secrets. list ",Modal secret manages secrets.
3,"What does the ""create"" command do in ""modal secret""?",modal secret,"modal secret Manage secrets. Usage: Usage modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]... modal secret [OPTIONS] COMMAND [ARGS]... modal secret [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a new secret, or overwrite an existing one.list: List your published secrets. create: Create a new secret, or overwrite an existing one. create list: List your published secrets. list ","The ""create"" command creates a new secret or overwrites an existing one."
6,"What is the function of the ""--help"" option in ""modal secret""?",modal secret,"modal secret Manage secrets. Usage: Usage modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]...Copy modal secret [OPTIONS] COMMAND [ARGS]... modal secret [OPTIONS] COMMAND [ARGS]... modal secret [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a new secret, or overwrite an existing one.list: List your published secrets. create: Create a new secret, or overwrite an existing one. create list: List your published secrets. list ","The ""--help"" option shows the message and exits."
0,"What is the ""modal secret list"" command used for?",modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",It is used to list your published secrets.
1,"What are the options available with the ""modal secret list"" command?",modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",Options include specifying an environment to interact with using --env TEXT and choosing whether to display the output in json format using --json / --no-json. 
2,What will Modal do if the environment is not specified?,modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","If not specified, Modal will use the default environment of your current profile, or the MODAL_ENVIRONMENT variable. "
3,What happens if the workspace has multiple environments and the environment is not specified?,modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","If this is the case, an error will be raised."
4,"Who is the owner of Modal Labs, Inc.?",modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The content does not specify an owner for Modal Labs, Inc."
0,"What is the function of the command ""modal secret list""?",modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",It is used to list all your published secrets.
3,What is the default for the --json / --no-json option?,modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The default is no-json.
6,Who owns Modal labs?,modal secret modal secret list,"modal secret list List your published secrets. Usage: Usage modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS]Copy modal secret list [OPTIONS] modal secret list [OPTIONS] modal secret list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secretmodal secret createmodal secret list modal secret modal secret create modal secret list CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs is owned by Modal Labs, Inc."
0,What are environments in the context of workspaces?,Environments beta,"Environments are sub-divisons of workspaces, allowing you to deploy the same app
(or set of apps) in multiple instances for different purposes without changing
your code. Typical use cases for environments include having onedevenvironment and oneprodenvironment, preventing overwriting production apps
when developing new features, while still being able to deploy changes to a
“live” and potentially complex structure of apps. dev prod Each environment has its own set ofSecretsand any
object lookups performed from an app in an environment will by default look for
objects in the same environment. Secrets By default, every workspace has a single environment called “main”. New
environments can be created on the CLI: modal environment create devCopy modal environment create devCopy modal environment create devCopy modal environment create dev modal environment create dev modal environment create dev Copy Copy    Copy (You can runmodal environment --helpfor more info) modal environment --help Once created, environments show up as a dropdown menu in the navbar of the
[/home](Modal dashboard), letting you set browse all Modal apps and Secrets
filtered by which environment they were deployed to. Most CLI commands also support an--envflag letting you specify which
environment you intend to interact with, e.g.: --env modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storage modal run --env=dev app.py
modal nfs create --env=dev storage modal run --env=dev app.py
modal nfs create --env=dev storage Copy Copy    Copy Note that if you have multiple environments in your workspace and try to
interact with it without specifying an environment, an error will be raised. To set a default environment for your current CLI profile you can usemodal config set-environment, e.g.: modal config set-environment modal config set-environment devCopy modal config set-environment devCopy modal config set-environment devCopy modal config set-environment dev modal config set-environment dev modal config set-environment dev Copy Copy    Copy Alternatively, you can set theMODAL_ENVIRONMENTenvironment variable. MODAL_ENVIRONMENT ",Environments are sub-divisions of workspaces that allow you to deploy the same app (or set of apps) in multiple instances for different purposes without changing your code.
3,What is the default name for an environment in a workspace?,Environments beta,"Environments are sub-divisons of workspaces, allowing you to deploy the same app
(or set of apps) in multiple instances for different purposes without changing
your code. Typical use cases for environments include having onedevenvironment and oneprodenvironment, preventing overwriting production apps
when developing new features, while still being able to deploy changes to a
“live” and potentially complex structure of apps. dev prod Each environment has its own set ofSecretsand any
object lookups performed from an app in an environment will by default look for
objects in the same environment. Secrets By default, every workspace has a single environment called “main”. New
environments can be created on the CLI: modal environment create devCopy modal environment create devCopy modal environment create devCopy modal environment create dev modal environment create dev modal environment create dev Copy Copy    Copy (You can runmodal environment --helpfor more info) modal environment --help Once created, environments show up as a dropdown menu in the navbar of the
[/home](Modal dashboard), letting you set browse all Modal apps and Secrets
filtered by which environment they were deployed to. Most CLI commands also support an--envflag letting you specify which
environment you intend to interact with, e.g.: --env modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storage modal run --env=dev app.py
modal nfs create --env=dev storage modal run --env=dev app.py
modal nfs create --env=dev storage Copy Copy    Copy Note that if you have multiple environments in your workspace and try to
interact with it without specifying an environment, an error will be raised. To set a default environment for your current CLI profile you can usemodal config set-environment, e.g.: modal config set-environment modal config set-environment devCopy modal config set-environment devCopy modal config set-environment devCopy modal config set-environment dev modal config set-environment dev modal config set-environment dev Copy Copy    Copy Alternatively, you can set theMODAL_ENVIRONMENTenvironment variable. MODAL_ENVIRONMENT ","By default, every workspace has a single environment called “main”."
6,What happens if you try to interact with multiple environments in your workspace without specifying an environment?,Environments beta,"Environments are sub-divisons of workspaces, allowing you to deploy the same app
(or set of apps) in multiple instances for different purposes without changing
your code. Typical use cases for environments include having onedevenvironment and oneprodenvironment, preventing overwriting production apps
when developing new features, while still being able to deploy changes to a
“live” and potentially complex structure of apps. dev prod Each environment has its own set ofSecretsand any
object lookups performed from an app in an environment will by default look for
objects in the same environment. Secrets By default, every workspace has a single environment called “main”. New
environments can be created on the CLI: modal environment create devCopy modal environment create devCopy modal environment create devCopy modal environment create dev modal environment create dev modal environment create dev Copy Copy    Copy (You can runmodal environment --helpfor more info) modal environment --help Once created, environments show up as a dropdown menu in the navbar of the
[/home](Modal dashboard), letting you set browse all Modal apps and Secrets
filtered by which environment they were deployed to. Most CLI commands also support an--envflag letting you specify which
environment you intend to interact with, e.g.: --env modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storageCopy modal run --env=dev app.py
modal nfs create --env=dev storage modal run --env=dev app.py
modal nfs create --env=dev storage modal run --env=dev app.py
modal nfs create --env=dev storage Copy Copy    Copy Note that if you have multiple environments in your workspace and try to
interact with it without specifying an environment, an error will be raised. To set a default environment for your current CLI profile you can usemodal config set-environment, e.g.: modal config set-environment modal config set-environment devCopy modal config set-environment devCopy modal config set-environment devCopy modal config set-environment dev modal config set-environment dev modal config set-environment dev Copy Copy    Copy Alternatively, you can set theMODAL_ENVIRONMENTenvironment variable. MODAL_ENVIRONMENT ","If you have multiple environments in your workspace and try to interact with it without specifying an environment, an error will be raised."
0,What is the purpose of using cross environment lookups in modal?,Environments beta Cross environment lookups,"It’s possible to explicitly look up objects from other environments than your
app runs in: production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") ""my-secret"" ""main"" ""my_app"" ""some_function"" ""dev"" Copy Copy    Copy However, theenvironment_nameargument is optional and omitting it will use
the environment from the object’s associated app or calling context. environment_name Environments (beta)Cross environment lookups Environments (beta)Cross environment lookups Environments (beta)Cross environment lookups Environments (beta) Cross environment lookups CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Cross environment lookups in modal allow you to explicitly look up objects from other environments than your app runs in.
3,What happens if the environment_name argument is omitted during a function or secret lookup?,Environments beta Cross environment lookups,"It’s possible to explicitly look up objects from other environments than your
app runs in: production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") ""my-secret"" ""main"" ""my_app"" ""some_function"" ""dev"" Copy Copy    Copy However, theenvironment_nameargument is optional and omitting it will use
the environment from the object’s associated app or calling context. environment_name Environments (beta)Cross environment lookups Environments (beta)Cross environment lookups Environments (beta)Cross environment lookups Environments (beta) Cross environment lookups CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Omitting the environment_name argument will use the environment from the object’s associated app or the calling context.
6,"What does the piece of code using ""__sveltekit_qfhbjo"" represent in this context?",Environments beta Cross environment lookups,"It’s possible to explicitly look up objects from other environments than your
app runs in: production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"")Copy production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") production_secret = modal.Secret.from_name(""my-secret"",
    environment_name=""main"")

modal.Function.lookup(""my_app"",""some_function"",
    environment_name=""dev"") ""my-secret"" ""main"" ""my_app"" ""some_function"" ""dev"" Copy Copy    Copy However, theenvironment_nameargument is optional and omitting it will use
the environment from the object’s associated app or calling context. environment_name Environments (beta)Cross environment lookups Environments (beta)Cross environment lookups Environments (beta)Cross environment lookups Environments (beta) Cross environment lookups CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The piece of code setting ""__sveltekit_qfhbjo"" seems to be initializing an environment context for a SvelteKit application, including a base URL and an empty environment object. It also sets up data handling and module imports for the application's startup sequence."
0,What is the command to display help in using modal nfs?,modal nfs,modal nfs Read and editmodal.NetworkFileSystemfile systems. modal.NetworkFileSystem Usage: Usage modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named network file system.get: Download a file from a network file system.list: List the names of all network file systems.ls: List files and directories in a network file system.put: Upload a file or directory to a network file system.rm: Delete a file or directory from a network file system. create: Create a named network file system. create get: Download a file from a network file system. get list: List the names of all network file systems. list ls: List files and directories in a network file system. ls put: Upload a file or directory to a network file system. put rm: Delete a file or directory from a network file system. rm ,--help
1,How do you create a named network file system using modal nfs?,modal nfs,modal nfs Read and editmodal.NetworkFileSystemfile systems. modal.NetworkFileSystem Usage: Usage modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named network file system.get: Download a file from a network file system.list: List the names of all network file systems.ls: List files and directories in a network file system.put: Upload a file or directory to a network file system.rm: Delete a file or directory from a network file system. create: Create a named network file system. create get: Download a file from a network file system. get list: List the names of all network file systems. list ls: List files and directories in a network file system. ls put: Upload a file or directory to a network file system. put rm: Delete a file or directory from a network file system. rm ,By using the 'create' command.
2,How would you download a file from a network file system using modal nfs?,modal nfs,modal nfs Read and editmodal.NetworkFileSystemfile systems. modal.NetworkFileSystem Usage: Usage modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named network file system.get: Download a file from a network file system.list: List the names of all network file systems.ls: List files and directories in a network file system.put: Upload a file or directory to a network file system.rm: Delete a file or directory from a network file system. create: Create a named network file system. create get: Download a file from a network file system. get list: List the names of all network file systems. list ls: List files and directories in a network file system. ls put: Upload a file or directory to a network file system. put rm: Delete a file or directory from a network file system. rm ,By using the 'get' command.
3,What command would you use to upload a file or directory to a network file system in modal nfs?,modal nfs,modal nfs Read and editmodal.NetworkFileSystemfile systems. modal.NetworkFileSystem Usage: Usage modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named network file system.get: Download a file from a network file system.list: List the names of all network file systems.ls: List files and directories in a network file system.put: Upload a file or directory to a network file system.rm: Delete a file or directory from a network file system. create: Create a named network file system. create get: Download a file from a network file system. get list: List the names of all network file systems. list ls: List files and directories in a network file system. ls put: Upload a file or directory to a network file system. put rm: Delete a file or directory from a network file system. rm ,The 'put' command.
4,What is the command to delete a file or a directory from a network file system using modal nfs?,modal nfs,modal nfs Read and editmodal.NetworkFileSystemfile systems. modal.NetworkFileSystem Usage: Usage modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]...Copy modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... modal nfs [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named network file system.get: Download a file from a network file system.list: List the names of all network file systems.ls: List files and directories in a network file system.put: Upload a file or directory to a network file system.rm: Delete a file or directory from a network file system. create: Create a named network file system. create get: Download a file from a network file system. get list: List the names of all network file systems. list ls: List files and directories in a network file system. ls put: Upload a file or directory to a network file system. put rm: Delete a file or directory from a network file system. rm ,The 'rm' command.
0,"What does the command ""modal nfs get"" accomplish?",modal nfs modal nfs get,"modal nfs get Download a file from a network file system. Specifying a glob pattern (using any*or**patterns) as theremote_pathwill download all matchingfiles, preserving
the source directory structure for the matched files. * ** remote_path files For example, to download an entire network file system intodump_volume: dump_volume modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volume modal nfs get <volume-name>""**""dump_volume modal nfs get <volume-name>""**""dump_volume ""**"" Copy Copy    Copy Use ”-” (a hyphen) as LOCAL_DESTINATION to write contents of file to stdout (only for non-glob paths). Usage: Usage modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required][LOCAL_DESTINATION]: [default: .] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH [LOCAL_DESTINATION]: [default: .] [LOCAL_DESTINATION] Options: Options --force / --no-force: [default: no-force]--env TEXT: Environment to interact with. --force / --no-force: [default: no-force] --force / --no-force --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The command ""modal nfs get"" downloads a file from a network file system."
3,"What is the default action when LOCAL_DESTINATION is not specifically defined in the ""modal nfs get"" function?",modal nfs modal nfs get,"modal nfs get Download a file from a network file system. Specifying a glob pattern (using any*or**patterns) as theremote_pathwill download all matchingfiles, preserving
the source directory structure for the matched files. * ** remote_path files For example, to download an entire network file system intodump_volume: dump_volume modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volume modal nfs get <volume-name>""**""dump_volume modal nfs get <volume-name>""**""dump_volume ""**"" Copy Copy    Copy Use ”-” (a hyphen) as LOCAL_DESTINATION to write contents of file to stdout (only for non-glob paths). Usage: Usage modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required][LOCAL_DESTINATION]: [default: .] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH [LOCAL_DESTINATION]: [default: .] [LOCAL_DESTINATION] Options: Options --force / --no-force: [default: no-force]--env TEXT: Environment to interact with. --force / --no-force: [default: no-force] --force / --no-force --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","If LOCAL_DESTINATION is not specified, it defaults to ""."" (the local directory)."
6,"What happens if environment interaction is not specified while executing ""modal nfs get""?",modal nfs modal nfs get,"modal nfs get Download a file from a network file system. Specifying a glob pattern (using any*or**patterns) as theremote_pathwill download all matchingfiles, preserving
the source directory structure for the matched files. * ** remote_path files For example, to download an entire network file system intodump_volume: dump_volume modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volumeCopy modal nfs get <volume-name>""**""dump_volume modal nfs get <volume-name>""**""dump_volume modal nfs get <volume-name>""**""dump_volume ""**"" Copy Copy    Copy Use ”-” (a hyphen) as LOCAL_DESTINATION to write contents of file to stdout (only for non-glob paths). Usage: Usage modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal nfs get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required][LOCAL_DESTINATION]: [default: .] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH [LOCAL_DESTINATION]: [default: .] [LOCAL_DESTINATION] Options: Options --force / --no-force: [default: no-force]--env TEXT: Environment to interact with. --force / --no-force: [default: no-force] --force / --no-force --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","If environment interaction, ""--env TEXT"", is not specified, Modal will use the default environment of your current profile, or the MODAL_ENVIRONMENT variable. If the workspace has multiple environments and none is specified, an error is raised."
0,What command is used to list the names of all network file systems?,modal nfs modal nfs list,"modal nfs list List the names of all network file systems. Usage: Usage modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS] modal nfs list [OPTIONS] modal nfs list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help ","The command is ""modal nfs list""."
3,What is the default setting for the --json / --no-json option?,modal nfs modal nfs list,"modal nfs list List the names of all network file systems. Usage: Usage modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS] modal nfs list [OPTIONS] modal nfs list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help ",The default setting is no-json.
6,What does the --help option provide?,modal nfs modal nfs list,"modal nfs list List the names of all network file systems. Usage: Usage modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS]Copy modal nfs list [OPTIONS] modal nfs list [OPTIONS] modal nfs list [OPTIONS] Copy Copy    Copy Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help ",The --help option shows the message and exits the program.
0,What is the usage of Modal NFS LS?,modal nfs modal nfs ls,"modal nfs ls List files and directories in a network file system. Usage: Usage modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH] modal nfs ls [OPTIONS] VOLUME_NAME [PATH] modal nfs ls [OPTIONS] VOLUME_NAME [PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required][PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME [PATH]: [default: /] [PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ",The usage is to list files and directories in a network file system.
3,What are the arguments in Modal NFS LS command?,modal nfs modal nfs ls,"modal nfs ls List files and directories in a network file system. Usage: Usage modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH] modal nfs ls [OPTIONS] VOLUME_NAME [PATH] modal nfs ls [OPTIONS] VOLUME_NAME [PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required][PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME [PATH]: [default: /] [PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The arguments are VOLUME_NAME, which is required, and PATH, which defaults to /."
6,What does the --help option do in Modal NFS LS command?,modal nfs modal nfs ls,"modal nfs ls List files and directories in a network file system. Usage: Usage modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH]Copy modal nfs ls [OPTIONS] VOLUME_NAME [PATH] modal nfs ls [OPTIONS] VOLUME_NAME [PATH] modal nfs ls [OPTIONS] VOLUME_NAME [PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required][PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME [PATH]: [default: /] [PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ",The --help option shows information about the command and exits.
0,"What is the function of the command ""modal nfs put""?",modal nfs modal nfs put,"modal nfs put Upload a file or directory to a network file system. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The command ""modal nfs put"" is used to upload a file or directory to a network file system. Remote parent directories are created as needed, and if the REMOTE_PATH ends with a forward slash (/), the file is assumed to be a directory and the file will be uploaded with its current name under that directory."
3,"What are the mandatory arguments when using ""modal nfs put"" command?",modal nfs modal nfs put,"modal nfs put Upload a file or directory to a network file system. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The mandatory arguments for the ""modal nfs put"" command are VOLUME_NAME and LOCAL_PATH."
6,"What is the function of ""--help"" option in the command ""modal nfs put""?",modal nfs modal nfs put,"modal nfs put Upload a file or directory to a network file system. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal nfs put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The ""--help"" option shows a message and exits the command."
0,What does the command 'modal nfs rm' do?,modal nfs modal nfs rm,"modal nfs rm Delete a file or directory from a network file system. Usage: Usage modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH Options: Options -r, --recursive: Delete directory recursively--env TEXT: Environment to interact with. -r, --recursive: Delete directory recursively -r, --recursive --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfs modal nfs create modal nfs get modal nfs list modal nfs ls modal nfs put modal nfs rm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",It deletes a file or directory from a network file system.
3,What options does the 'modal nfs rm' command offer?,modal nfs modal nfs rm,"modal nfs rm Delete a file or directory from a network file system. Usage: Usage modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH Options: Options -r, --recursive: Delete directory recursively--env TEXT: Environment to interact with. -r, --recursive: Delete directory recursively -r, --recursive --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfs modal nfs create modal nfs get modal nfs list modal nfs ls modal nfs put modal nfs rm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The options offered are -r, --recursive, which can delete a directory recursively, and --env TEXT, which specifies the environment to interact with."
6,What is the purpose of the --help option in 'modal nfs rm'?,modal nfs modal nfs rm,"modal nfs rm Delete a file or directory from a network file system. Usage: Usage modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH Options: Options -r, --recursive: Delete directory recursively--env TEXT: Environment to interact with. -r, --recursive: Delete directory recursively -r, --recursive --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfs modal nfs create modal nfs get modal nfs list modal nfs ls modal nfs put modal nfs rm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The --help option shows the usage message and exits.
0,What is the function of the 'modal nfs rm' command?,modal nfs modal nfs rm,"modal nfs rm Delete a file or directory from a network file system. Usage: Usage modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH Options: Options -r, --recursive: Delete directory recursively--env TEXT: Environment to interact with. -r, --recursive: Delete directory recursively -r, --recursive --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfs modal nfs create modal nfs get modal nfs list modal nfs ls modal nfs put modal nfs rm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'modal nfs rm' command is used to delete a file or directory from a network file system.
3,What is the purpose of the '--recursive' option in the 'modal nfs rm' command?,modal nfs modal nfs rm,"modal nfs rm Delete a file or directory from a network file system. Usage: Usage modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH Options: Options -r, --recursive: Delete directory recursively--env TEXT: Environment to interact with. -r, --recursive: Delete directory recursively -r, --recursive --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfs modal nfs create modal nfs get modal nfs list modal nfs ls modal nfs put modal nfs rm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The '--recursive' option in the 'modal nfs rm' command allows for the deletion of a directory recursively.
6,Who is the owner of the Modal software mentioned in the text?,modal nfs modal nfs rm,"modal nfs rm Delete a file or directory from a network file system. Usage: Usage modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATHCopy modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH modal nfs rm [OPTIONS] VOLUME_NAME REMOTE_PATH Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH Options: Options -r, --recursive: Delete directory recursively--env TEXT: Environment to interact with. -r, --recursive: Delete directory recursively -r, --recursive --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfsmodal nfs createmodal nfs getmodal nfs listmodal nfs lsmodal nfs putmodal nfs rm modal nfs modal nfs create modal nfs get modal nfs list modal nfs ls modal nfs put modal nfs rm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The Modal software is owned by Modal Labs, Inc."
0,What is the default reservation for memory for modal jobs?,Reserving CPU and memory,"Modal jobs are reserved 128 MiB of memory and 0.1 CPU cores by default. However,
if there is free memory or CPU capacity on a worker, containers are free to
spike above these limits. ",Modal jobs are reserved 128 MiB of memory by default.
3,What happens if there is free memory or CPU capacity on a worker?,Reserving CPU and memory,"Modal jobs are reserved 128 MiB of memory and 0.1 CPU cores by default. However,
if there is free memory or CPU capacity on a worker, containers are free to
spike above these limits. ","If there is free memory or CPU capacity on a worker, containers are free to spike above these limits."
6,What is the default reservation for modal jobs in terms of memory and CPU cores?,Reserving CPU and memory,"Modal jobs are reserved 128 MiB of memory and 0.1 CPU cores by default. However,
if there is free memory or CPU capacity on a worker, containers are free to
spike above these limits. ",Modal jobs are reserved 128 MiB of memory and 0.1 CPU cores by default.
0,What is the purpose of the 'memory' argument in this code?,Reserving CPU and memory Memory,"If you have code that needs more guaranteed memory, you can request it using thememoryargument. This expects an integer number of megabytes: memory importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... import @stub.function(memory=32768) memory=32768 32768 def my_function # code here will have access to at least 32 GiB of RAM Copy Copy    Copy ",The 'memory' argument is used to request more guaranteed memory for code that needs it.
3,What does the value '32768' in the 'memory' argument represent?,Reserving CPU and memory Memory,"If you have code that needs more guaranteed memory, you can request it using thememoryargument. This expects an integer number of megabytes: memory importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... import @stub.function(memory=32768) memory=32768 32768 def my_function # code here will have access to at least 32 GiB of RAM Copy Copy    Copy ",The value '32768' in the 'memory' argument represents 32 GiB of RAM.
6,"In the code snippet, what does 'modal.Stub()' do?",Reserving CPU and memory Memory,"If you have code that needs more guaranteed memory, you can request it using thememoryargument. This expects an integer number of megabytes: memory importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM...Copy importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... importmodal

stub = modal.Stub()@stub.function(memory=32768)defmy_function():# code here will have access to at least 32 GiB of RAM... import @stub.function(memory=32768) memory=32768 32768 def my_function # code here will have access to at least 32 GiB of RAM Copy Copy    Copy ",'modal.Stub()' creates an instance of the Stub class from the modal module.
0,What happens if both CPU and memory requests exceed the maximum at function creation time?,Reserving CPU and memory How much can I request,"For both CPU and memory, a maximum is enforced at function creation time to
ensure your application can be scheduled for execution. Requests exceeding the
maximum will be rejected with anInvalidError. InvalidError InvalidError As the platform grows, we plan to support larger CPU and memory reservations. ",Requests exceeding the maximum will be rejected with an InvalidError.
1,What kind of error is generated when the requests exceed the maximum capacity?,Reserving CPU and memory How much can I request,"For both CPU and memory, a maximum is enforced at function creation time to
ensure your application can be scheduled for execution. Requests exceeding the
maximum will be rejected with anInvalidError. InvalidError InvalidError As the platform grows, we plan to support larger CPU and memory reservations. ",An InvalidError is generated.
2,What is enforced at function creation time to ensure your application can be scheduled for execution?,Reserving CPU and memory How much can I request,"For both CPU and memory, a maximum is enforced at function creation time to
ensure your application can be scheduled for execution. Requests exceeding the
maximum will be rejected with anInvalidError. InvalidError InvalidError As the platform grows, we plan to support larger CPU and memory reservations. ",A maximum for both CPU and memory is enforced at function creation time.
3,What are the plans for the platform as it grows?,Reserving CPU and memory How much can I request,"For both CPU and memory, a maximum is enforced at function creation time to
ensure your application can be scheduled for execution. Requests exceeding the
maximum will be rejected with anInvalidError. InvalidError InvalidError As the platform grows, we plan to support larger CPU and memory reservations. ","As the platform grows, there are plans to support larger CPU and memory reservations."
4,What is the limit applied to when reserving CPU and memory?,Reserving CPU and memory How much can I request,"For both CPU and memory, a maximum is enforced at function creation time to
ensure your application can be scheduled for execution. Requests exceeding the
maximum will be rejected with anInvalidError. InvalidError InvalidError As the platform grows, we plan to support larger CPU and memory reservations. ",The limit is applied at the function creation time.
0,What is currently not supported in terms of resource usage on Modal applications?,Reserving CPU and memory Resource limits,"We currently don’t support setting a hard limit on the resource usage of a
function. But we do plan to add this feature so that users have more control
over the resource consumption of their Modal applications. Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limits Reserving CPU and memory CPU cores Memory How much can I request? Resource limits See it in actionRequest minimum CPUs for sentiment analysis See it in actionRequest minimum CPUs for sentiment analysis See it in action Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Setting a hard limit on the resource usage of a function is currently not supported.
3,What kind of control can users expect to have over their Modal applications in the future?,Reserving CPU and memory Resource limits,"We currently don’t support setting a hard limit on the resource usage of a
function. But we do plan to add this feature so that users have more control
over the resource consumption of their Modal applications. Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limits Reserving CPU and memory CPU cores Memory How much can I request? Resource limits See it in actionRequest minimum CPUs for sentiment analysis See it in actionRequest minimum CPUs for sentiment analysis See it in action Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In the future, users can expect to have more control over the resource consumption of their Modal applications."
6,"Who owns the copyright to Modal Labs, Inc?",Reserving CPU and memory Resource limits,"We currently don’t support setting a hard limit on the resource usage of a
function. But we do plan to add this feature so that users have more control
over the resource consumption of their Modal applications. Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limits Reserving CPU and memory CPU cores Memory How much can I request? Resource limits See it in actionRequest minimum CPUs for sentiment analysis See it in actionRequest minimum CPUs for sentiment analysis See it in action Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright to Modal Labs, Inc. belongs to the company itself, as indicated by the ""© 2023 Modal Labs, Inc."" at the footer."
0,"Does Modal Labs, Inc. currently support setting a hard limit on the resource usage of a function?",Reserving CPU and memory Resource limits,"We currently don’t support setting a hard limit on the resource usage of a
function. But we do plan to add this feature so that users have more control
over the resource consumption of their Modal applications. Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limits Reserving CPU and memory CPU cores Memory How much can I request? Resource limits See it in actionRequest minimum CPUs for sentiment analysis See it in actionRequest minimum CPUs for sentiment analysis See it in action Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","No, Modal Labs, Inc. does not currently support setting a hard limit on the resource usage of a function. "
3,What might a user request in relation to sentiment analysis?,Reserving CPU and memory Resource limits,"We currently don’t support setting a hard limit on the resource usage of a
function. But we do plan to add this feature so that users have more control
over the resource consumption of their Modal applications. Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limits Reserving CPU and memory CPU cores Memory How much can I request? Resource limits See it in actionRequest minimum CPUs for sentiment analysis See it in actionRequest minimum CPUs for sentiment analysis See it in action Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",A user might request minimum CPUs for sentiment analysis.
6,What components does the Modal Labs' software have?,Reserving CPU and memory Resource limits,"We currently don’t support setting a hard limit on the resource usage of a
function. But we do plan to add this feature so that users have more control
over the resource consumption of their Modal applications. Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limitsSee it in actionRequest minimum CPUs for sentiment analysis Reserving CPU and memoryCPU coresMemoryHow much can I request?Resource limits Reserving CPU and memory CPU cores Memory How much can I request? Resource limits See it in actionRequest minimum CPUs for sentiment analysis See it in actionRequest minimum CPUs for sentiment analysis See it in action Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis Request minimum CPUs for sentiment analysis     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The software Modal Labs provided has components including base, env element, data and node_ids."
0,What environment do Modal functions run in by default?,Custom containers,"By default, Modal functions are executed in a Debian Linux container with a
basic Python installation of the same minor versionv3.xas your local Python
interpreter. v3.x Oftentimes you might need some third party Python packages, or some other
pre-installed dependencies for your function. Modal provides a few different
options to customize the container image. ",Modal functions are executed in a Debian Linux container with a basic Python installation of the same minor versionv3.x as your local Python interpreter.
3,What options does Modal provide if I need to customize the container image?,Custom containers,"By default, Modal functions are executed in a Debian Linux container with a
basic Python installation of the same minor versionv3.xas your local Python
interpreter. v3.x Oftentimes you might need some third party Python packages, or some other
pre-installed dependencies for your function. Modal provides a few different
options to customize the container image. ",Modal provides a few different options to customize the container image.
6,What third party tools might be needed for executing some Modal functions?,Custom containers,"By default, Modal functions are executed in a Debian Linux container with a
basic Python installation of the same minor versionv3.xas your local Python
interpreter. v3.x Oftentimes you might need some third party Python packages, or some other
pre-installed dependencies for your function. Modal provides a few different
options to customize the container image. ",Third party Python packages might be needed for executing some Modal functions.
0,What does the python command 'import pandas' do? ,Custom containers Importing Python packages,"You might want to use packages inside your Modal code that you don’t have on
your local computer. In the example above, we build a container that usespandas. But if we don’t have pandas locally, on the computer launching the
Modal job, we can’t putimport pandasat the top of the script, since it would
cause anImportError. pandas import pandas ImportError The easiest solution to this is to putimport pandasin the function body
instead, as you can see above. This means thatpandasis only imported when
running inside the remote Modal container, which haspandasinstalled. import pandas pandas pandas If you have a lot of functions and a lot of Python packages, you might want to
keep the imports in the global scope so that every function can use the same
imports. In that case, you can use thestub.is_inside()function: stub.is_inside() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() from import ""pandas"" ""numpy"" if import as import as @stub.function(image=pandas_image) image=pandas_image def my_function Copy Copy    Copy Note thatis_insideis considered beta and its interface may change in the
future. is_inside ",This command imports the pandas package for use in the python script.
3,What is a possible solution if you have many functions and Python packages to import?,Custom containers Importing Python packages,"You might want to use packages inside your Modal code that you don’t have on
your local computer. In the example above, we build a container that usespandas. But if we don’t have pandas locally, on the computer launching the
Modal job, we can’t putimport pandasat the top of the script, since it would
cause anImportError. pandas import pandas ImportError The easiest solution to this is to putimport pandasin the function body
instead, as you can see above. This means thatpandasis only imported when
running inside the remote Modal container, which haspandasinstalled. import pandas pandas pandas If you have a lot of functions and a lot of Python packages, you might want to
keep the imports in the global scope so that every function can use the same
imports. In that case, you can use thestub.is_inside()function: stub.is_inside() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() from import ""pandas"" ""numpy"" if import as import as @stub.function(image=pandas_image) image=pandas_image def my_function Copy Copy    Copy Note thatis_insideis considered beta and its interface may change in the
future. is_inside ",You might want to keep the imports in the global scope so that every function can use the same imports. Use the stub.is_inside() function. 
6,What could potentially happen to the function 'is_inside' in the future?,Custom containers Importing Python packages,"You might want to use packages inside your Modal code that you don’t have on
your local computer. In the example above, we build a container that usespandas. But if we don’t have pandas locally, on the computer launching the
Modal job, we can’t putimport pandasat the top of the script, since it would
cause anImportError. pandas import pandas ImportError The easiest solution to this is to putimport pandasin the function body
instead, as you can see above. This means thatpandasis only imported when
running inside the remote Modal container, which haspandasinstalled. import pandas pandas pandas If you have a lot of functions and a lot of Python packages, you might want to
keep the imports in the global scope so that every function can use the same
imports. In that case, you can use thestub.is_inside()function: stub.is_inside() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame()Copy frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() frommodalimportImage

pandas_image = Image.debian_slim().pip_install(""pandas"",""numpy"")ifstub.is_inside():importpandasaspdimportnumpyasnp@stub.function(image=pandas_image)defmy_function():
    df = pd.DataFrame() from import ""pandas"" ""numpy"" if import as import as @stub.function(image=pandas_image) image=pandas_image def my_function Copy Copy    Copy Note thatis_insideis considered beta and its interface may change in the
future. is_inside ","The function 'is_inside' is considered beta, and its interface may change in the future."
0,What type of image is being created for ffmpeg installation?,Custom containers Shell commands,"You can also supply shell commands that should be executed when building the
container image. This can be useful for installing additional binary
dependencies: frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) from import ""ffmpeg"" @stub.function(image=ffmpeg_image) image=ffmpeg_image def process_video ""ffmpeg"" Copy Copy    Copy Or for preloading custom assets into the container: frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... from import ""curl"" ""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"" @stub.function(image=image_with_model) image=image_with_model def find_cats open ""/haarcascade_frontalcatface.xml"" Copy Copy    Copy ",An Image.debian_slim() is being created.
3,What type of function is created after the installation of ffmpeg?,Custom containers Shell commands,"You can also supply shell commands that should be executed when building the
container image. This can be useful for installing additional binary
dependencies: frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) from import ""ffmpeg"" @stub.function(image=ffmpeg_image) image=ffmpeg_image def process_video ""ffmpeg"" Copy Copy    Copy Or for preloading custom assets into the container: frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... from import ""curl"" ""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"" @stub.function(image=image_with_model) image=image_with_model def find_cats open ""/haarcascade_frontalcatface.xml"" Copy Copy    Copy ",A stub function called process_video() is created.
6,What is being read in the find_cats function?,Custom containers Shell commands,"You can also supply shell commands that should be executed when building the
container image. This can be useful for installing additional binary
dependencies: frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...])Copy frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) frommodalimportImage

ffmpeg_image = Image.debian_slim().apt_install(""ffmpeg"")@stub.function(image=ffmpeg_image)defprocess_video():
    subprocess.call([""ffmpeg"", ...]) from import ""ffmpeg"" @stub.function(image=ffmpeg_image) image=ffmpeg_image def process_video ""ffmpeg"" Copy Copy    Copy Or for preloading custom assets into the container: frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ...Copy frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... frommodalimportImage

image_with_model = (
    Image.debian_slim().apt_install(""curl"").run_commands(""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"",
    )
)@stub.function(image=image_with_model)deffind_cats():
    content =open(""/haarcascade_frontalcatface.xml"").read()
    ... from import ""curl"" ""curl -O https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalcatface.xml"" @stub.function(image=image_with_model) image=image_with_model def find_cats open ""/haarcascade_frontalcatface.xml"" Copy Copy    Copy ","The file ""/haarcascade_frontalcatface.xml"" is being read in the find_cats function."
0,What software packages can Docker Hub provide images for?,Custom containers Using existing Docker Hub images,"Docker Hubhas many pre-built images for common
software packages. You can use any public image in your function usingImage.from_registry, as long as: Docker Hub Image.from_registry Python 3.7 or above is present, and is available aspythonpipis installed correctlyThe image is built for thelinux/amd64platform Python 3.7 or above is present, and is available aspython python pipis installed correctly pip The image is built for thelinux/amd64platform linux/amd64 frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... from import ""huanjason/scikit-learn"" @stub.function(image=sklearn_image) image=sklearn_image def fit_knn from import Copy Copy    Copy Ifpythonorpipisn’t set up properly, we provide anadd_pythonargument
that installs a reproducible,standalone buildof
Python: python pip add_python standalone build frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") from import ""ubuntu:22.04"" ""3.11"" ""gisops/valhalla:latest"" ""3.11"" Copy Copy    Copy Thefrom_registryfunction can load images from all public registries, such asNvidia’snvcr.io,AWS ECR, andGitHub’sghcr.io. from_registry Nvidia’snvcr.io nvcr.io AWS ECR GitHub’sghcr.io ghcr.io We also support access to private AWS ECR and GCP Artifact Registry images. ","Docker Hub can provide images for many common software packages, including Python 3.7 or above and others. "
3,What is the platform requirement for the Docker Hub image?,Custom containers Using existing Docker Hub images,"Docker Hubhas many pre-built images for common
software packages. You can use any public image in your function usingImage.from_registry, as long as: Docker Hub Image.from_registry Python 3.7 or above is present, and is available aspythonpipis installed correctlyThe image is built for thelinux/amd64platform Python 3.7 or above is present, and is available aspython python pipis installed correctly pip The image is built for thelinux/amd64platform linux/amd64 frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... from import ""huanjason/scikit-learn"" @stub.function(image=sklearn_image) image=sklearn_image def fit_knn from import Copy Copy    Copy Ifpythonorpipisn’t set up properly, we provide anadd_pythonargument
that installs a reproducible,standalone buildof
Python: python pip add_python standalone build frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") from import ""ubuntu:22.04"" ""3.11"" ""gisops/valhalla:latest"" ""3.11"" Copy Copy    Copy Thefrom_registryfunction can load images from all public registries, such asNvidia’snvcr.io,AWS ECR, andGitHub’sghcr.io. from_registry Nvidia’snvcr.io nvcr.io AWS ECR GitHub’sghcr.io ghcr.io We also support access to private AWS ECR and GCP Artifact Registry images. ",The Docker Hub image should be built for the linux/amd64 platform.
6,Which public registries can the from_registry function load images from?,Custom containers Using existing Docker Hub images,"Docker Hubhas many pre-built images for common
software packages. You can use any public image in your function usingImage.from_registry, as long as: Docker Hub Image.from_registry Python 3.7 or above is present, and is available aspythonpipis installed correctlyThe image is built for thelinux/amd64platform Python 3.7 or above is present, and is available aspython python pipis installed correctly pip The image is built for thelinux/amd64platform linux/amd64 frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ...Copy frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... frommodalimportImage

sklearn_image = Image.from_registry(""huanjason/scikit-learn"")@stub.function(image=sklearn_image)deffit_knn():fromsklearn.neighborsimportKNeighborsClassifier
    ... from import ""huanjason/scikit-learn"" @stub.function(image=sklearn_image) image=sklearn_image def fit_knn from import Copy Copy    Copy Ifpythonorpipisn’t set up properly, we provide anadd_pythonargument
that installs a reproducible,standalone buildof
Python: python pip add_python standalone build frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"")Copy frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") frommodalimportImage

image1 = Image.from_registry(""ubuntu:22.04"", add_python=""3.11"")
image2 = Image.from_registry(""gisops/valhalla:latest"", add_python=""3.11"") from import ""ubuntu:22.04"" ""3.11"" ""gisops/valhalla:latest"" ""3.11"" Copy Copy    Copy Thefrom_registryfunction can load images from all public registries, such asNvidia’snvcr.io,AWS ECR, andGitHub’sghcr.io. from_registry Nvidia’snvcr.io nvcr.io AWS ECR GitHub’sghcr.io ghcr.io We also support access to private AWS ECR and GCP Artifact Registry images. ","The from_registry function can load images from all public registries, such as Nvidia’s nvcr.io, AWS ECR, and GitHub’s ghcr.io."
0,What package management system does Modal provide a pre-built base image for?,Custom containers Using Conda instead of pip,"Modal provides a pre-built Conda base image, if you would like to usecondafor package management. The Python version available is whatever version the
officialminiconda3 imagecurrently comes with (3.9.12at this time). conda miniconda3 image 3.9.12 frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... from import ""theano-pymc==1.1.2"" ""pymc3==3.11.2"" @stub.function(image=pymc_image) image=pymc_image def fit import as Copy Copy    Copy ",Modal provides a pre-built Conda base image for package management.
3,How do you install packages using Conda in Modal?,Custom containers Using Conda instead of pip,"Modal provides a pre-built Conda base image, if you would like to usecondafor package management. The Python version available is whatever version the
officialminiconda3 imagecurrently comes with (3.9.12at this time). conda miniconda3 image 3.9.12 frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... from import ""theano-pymc==1.1.2"" ""pymc3==3.11.2"" @stub.function(image=pymc_image) image=pymc_image def fit import as Copy Copy    Copy ","You can install packages using Conda in Modal by using the conda_install function, like so: ""Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")""."
6,How do you define a function using a custom Conda image in Modal?,Custom containers Using Conda instead of pip,"Modal provides a pre-built Conda base image, if you would like to usecondafor package management. The Python version available is whatever version the
officialminiconda3 imagecurrently comes with (3.9.12at this time). conda miniconda3 image 3.9.12 frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ...Copy frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... frommodalimportImage

pymc_image = Image.conda().conda_install(""theano-pymc==1.1.2"",""pymc3==3.11.2"")@stub.function(image=pymc_image)deffit():importpymc3aspm
    ... from import ""theano-pymc==1.1.2"" ""pymc3==3.11.2"" @stub.function(image=pymc_image) image=pymc_image def fit import as Copy Copy    Copy ","You define a function using a custom Conda image in Modal by using the @stub.function decorator along with specifying the image, like so: ""@stub.function(image=pymc_image)def fit():importpymc3aspm..."""
0,What is the command used to run the installation of sklearn in the Dockerfile?,Custom containers Using a Dockerfile,"Modal also supports using a Dockerfile using theImage.from_dockerfilefunction. It takes a path to an existing Dockerfile. For instance: Image.from_dockerfile FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearn FROM python:3.9
RUN pip install sklearn FROM python:3.9
RUN pip install sklearn Copy Copy    Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... from import ""Dockerfile"" @stub.function(image=dockerfile_image) image=dockerfile_image def fit import Copy Copy    Copy ","The command is ""RUN pip install sklearn""."
3,What is the parameter passed into the Image.from_dockerfile function?,Custom containers Using a Dockerfile,"Modal also supports using a Dockerfile using theImage.from_dockerfilefunction. It takes a path to an existing Dockerfile. For instance: Image.from_dockerfile FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearn FROM python:3.9
RUN pip install sklearn FROM python:3.9
RUN pip install sklearn Copy Copy    Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... from import ""Dockerfile"" @stub.function(image=dockerfile_image) image=dockerfile_image def fit import Copy Copy    Copy ","The parameter is ""Dockerfile""."
6,"What is being imported inside the ""fit"" function?",Custom containers Using a Dockerfile,"Modal also supports using a Dockerfile using theImage.from_dockerfilefunction. It takes a path to an existing Dockerfile. For instance: Image.from_dockerfile FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearnCopy FROM python:3.9
RUN pip install sklearn FROM python:3.9
RUN pip install sklearn FROM python:3.9
RUN pip install sklearn Copy Copy    Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ...Copy frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... frommodalimportImage

dockerfile_image = Image.from_dockerfile(""Dockerfile"")@stub.function(image=dockerfile_image)deffit():importsklearn
    ... from import ""Dockerfile"" @stub.function(image=dockerfile_image) image=dockerfile_image def fit import Copy Copy    Copy ","""sklearn"" is being imported inside the ""fit"" function."
0,What doesn't Modal use to build containers?,Custom containers Dockerfile command compatibility,"Since Modal doesn’t use Docker to build containers, we have our own
implementation of theDockerfile specification.
Most Dockerfiles should work out of the box, but there are some differences to
be aware of. Dockerfile specification First, a few minor Dockerfile commands and flags have not been implemented yet.
Please reach out to us if your use case requires any of these. Next, there are some command-specific things that may be useful when porting a
Dockerfile to Modal. ENTRYPOINT ENTRYPOINT While theENTRYPOINTcommand is supported, there is an additional constraint to the entrypoint script
provided: it must alsoexecthe arguments passed to it at some point. This is
so that Modal’s own Python entrypoint can run after your own. Most entrypoint
scripts in Docker containers are typically “wrapper” scripts so this is already
the case. ENTRYPOINT ENTRYPOINT exec If you wish to write your own entrypoint script, you can use the following as a
template: #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash # Your custom startup commands here. exec ""$@"" $@ # Runs the command passed to the entrypoint script. Copy Copy    Copy If the above file is saved as/usr/bin/my_entrypoint.shin your container,
then you can register it as an entrypoint withENTRYPOINT [""/usr/bin/my_entrypoint.sh""]in your Dockerfile, or withdockerfile_commandsas an
Image build step. /usr/bin/my_entrypoint.sh ENTRYPOINT [""/usr/bin/my_entrypoint.sh""] dockerfile_commands dockerfile_commands frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') from import ""foo"" 'ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]' Copy Copy    Copy ENV ENV While simpleENVcommands are supported, we don’t currently supportenvironment replacement.
This means you can’t yet doENV PATH=$PATH:/foo. ENV environment replacement ENV PATH=$PATH:/foo A work-around is to useENTRYPOINTinstead, and use regular bash commands to
achieve this. ENTRYPOINT ",Modal doesn't use Docker to build containers.
3,What is a constraint to the ENTRYPOINT command in Modal?,Custom containers Dockerfile command compatibility,"Since Modal doesn’t use Docker to build containers, we have our own
implementation of theDockerfile specification.
Most Dockerfiles should work out of the box, but there are some differences to
be aware of. Dockerfile specification First, a few minor Dockerfile commands and flags have not been implemented yet.
Please reach out to us if your use case requires any of these. Next, there are some command-specific things that may be useful when porting a
Dockerfile to Modal. ENTRYPOINT ENTRYPOINT While theENTRYPOINTcommand is supported, there is an additional constraint to the entrypoint script
provided: it must alsoexecthe arguments passed to it at some point. This is
so that Modal’s own Python entrypoint can run after your own. Most entrypoint
scripts in Docker containers are typically “wrapper” scripts so this is already
the case. ENTRYPOINT ENTRYPOINT exec If you wish to write your own entrypoint script, you can use the following as a
template: #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash # Your custom startup commands here. exec ""$@"" $@ # Runs the command passed to the entrypoint script. Copy Copy    Copy If the above file is saved as/usr/bin/my_entrypoint.shin your container,
then you can register it as an entrypoint withENTRYPOINT [""/usr/bin/my_entrypoint.sh""]in your Dockerfile, or withdockerfile_commandsas an
Image build step. /usr/bin/my_entrypoint.sh ENTRYPOINT [""/usr/bin/my_entrypoint.sh""] dockerfile_commands dockerfile_commands frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') from import ""foo"" 'ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]' Copy Copy    Copy ENV ENV While simpleENVcommands are supported, we don’t currently supportenvironment replacement.
This means you can’t yet doENV PATH=$PATH:/foo. ENV environment replacement ENV PATH=$PATH:/foo A work-around is to useENTRYPOINTinstead, and use regular bash commands to
achieve this. ENTRYPOINT ",The constraint to the ENTRYPOINT command in Modal is that the entrypoint script must 'exec' the arguments passed to it at some point.
6,What Environment (ENV) command does Modal currently not support?,Custom containers Dockerfile command compatibility,"Since Modal doesn’t use Docker to build containers, we have our own
implementation of theDockerfile specification.
Most Dockerfiles should work out of the box, but there are some differences to
be aware of. Dockerfile specification First, a few minor Dockerfile commands and flags have not been implemented yet.
Please reach out to us if your use case requires any of these. Next, there are some command-specific things that may be useful when porting a
Dockerfile to Modal. ENTRYPOINT ENTRYPOINT While theENTRYPOINTcommand is supported, there is an additional constraint to the entrypoint script
provided: it must alsoexecthe arguments passed to it at some point. This is
so that Modal’s own Python entrypoint can run after your own. Most entrypoint
scripts in Docker containers are typically “wrapper” scripts so this is already
the case. ENTRYPOINT ENTRYPOINT exec If you wish to write your own entrypoint script, you can use the following as a
template: #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script.Copy #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash# Your custom startup commands here.exec""$@""# Runs the command passed to the entrypoint script. #!/usr/bin/env bash # Your custom startup commands here. exec ""$@"" $@ # Runs the command passed to the entrypoint script. Copy Copy    Copy If the above file is saved as/usr/bin/my_entrypoint.shin your container,
then you can register it as an entrypoint withENTRYPOINT [""/usr/bin/my_entrypoint.sh""]in your Dockerfile, or withdockerfile_commandsas an
Image build step. /usr/bin/my_entrypoint.sh ENTRYPOINT [""/usr/bin/my_entrypoint.sh""] dockerfile_commands dockerfile_commands frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]')Copy frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') frommodalimportImage

Image.debian_slim().pip_install(""foo"").dockerfile_commands('ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]') from import ""foo"" 'ENTRYPOINT [""/usr/bin/my_entrypoint.sh""]' Copy Copy    Copy ENV ENV While simpleENVcommands are supported, we don’t currently supportenvironment replacement.
This means you can’t yet doENV PATH=$PATH:/foo. ENV environment replacement ENV PATH=$PATH:/foo A work-around is to useENTRYPOINTinstead, and use regular bash commands to
achieve this. ENTRYPOINT ","Modal currently does not support environment replacement, meaning you can't yet do ENV PATH=$PATH:/foo."
0,What function can you run as an image build step in Python instead of using shell commands?,Custom containers Running a function as a build step beta,"Instead of using shell commands, you can also run a Python function as an image
build step using theImage.run_functionmethod. For
example, you can use this to download model parameters to your image: Image.run_function Image.run_function frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) from import def download_models import ""HUGGINGFACE_TOKEN"" ""/model"" ""diffusers[torch]"" ""transformers"" ""ftfy"" ""accelerate"" ""huggingface"" Copy Copy    Copy Any kwargs accepted by@stub.function(such asMounts,NetworkFileSystems, and resource requests)
can be supplied to it. Essentially, this is equivalent to running a Modal
function and snapshotting the resulting filesystem as an image. @stub.function @stub.function Mounts Mount NetworkFileSystems NetworkFileSystem Please see thereference documentationfor an
explanation of which changes to your build function trigger image rebuilds. reference documentation ",You can run a Python function as an image build step using the Image.run_function method.
3,What libraries are being installed in the image in the example?,Custom containers Running a function as a build step beta,"Instead of using shell commands, you can also run a Python function as an image
build step using theImage.run_functionmethod. For
example, you can use this to download model parameters to your image: Image.run_function Image.run_function frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) from import def download_models import ""HUGGINGFACE_TOKEN"" ""/model"" ""diffusers[torch]"" ""transformers"" ""ftfy"" ""accelerate"" ""huggingface"" Copy Copy    Copy Any kwargs accepted by@stub.function(such asMounts,NetworkFileSystems, and resource requests)
can be supplied to it. Essentially, this is equivalent to running a Modal
function and snapshotting the resulting filesystem as an image. @stub.function @stub.function Mounts Mount NetworkFileSystems NetworkFileSystem Please see thereference documentationfor an
explanation of which changes to your build function trigger image rebuilds. reference documentation ","The Image.debian_slim() command is installing ""diffusers[torch]"", ""transformers"", ""ftfy"", and ""accelerate""."
6,Where can you find explanations of changes that might trigger image rebuilds?,Custom containers Running a function as a build step beta,"Instead of using shell commands, you can also run a Python function as an image
build step using theImage.run_functionmethod. For
example, you can use this to download model parameters to your image: Image.run_function Image.run_function frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
)Copy frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) frommodalimportImage, Secretdefdownload_models():importdiffusers

    pipe = diffusers.StableDiffusionPipeline.from_pretrained(
        model_id, use_auth_token=os.environ[""HUGGINGFACE_TOKEN""]
    )
    pipe.save_pretrained(""/model"")


image = (
    Image.debian_slim()
        .pip_install(""diffusers[torch]"",""transformers"",""ftfy"",""accelerate"")
        .run_function(download_models, secrets=[Secret.from_name(""huggingface"")])
) from import def download_models import ""HUGGINGFACE_TOKEN"" ""/model"" ""diffusers[torch]"" ""transformers"" ""ftfy"" ""accelerate"" ""huggingface"" Copy Copy    Copy Any kwargs accepted by@stub.function(such asMounts,NetworkFileSystems, and resource requests)
can be supplied to it. Essentially, this is equivalent to running a Modal
function and snapshotting the resulting filesystem as an image. @stub.function @stub.function Mounts Mount NetworkFileSystems NetworkFileSystem Please see thereference documentationfor an
explanation of which changes to your build function trigger image rebuilds. reference documentation ",You can find explanations of such changes in the reference documentation.
0,What does Modal use to determine if an image needs to be rebuilt?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal uses the definition of an image to determine whether it needs to be rebuilt.
1,How can we force an image to rebuild in Modal?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can force an image to rebuild by adding the force_build=True argument to any of the image build steps.
2,What does the force_build=True argument do if left in the code?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If left in the code, force_build=True will cause the image to rebuild every time you run your code."
3,What functions will run again if force_build=True is implemented?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In the provided code, both pip_install(""slack-sdk"") and run_commands(""echo hi"") will run again if force_build=True is implemented."
4,What should you remember to do after rebuilding the image in Modal?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Remember to remove force_build=True after you’ve rebuilt the image.
0,What is the use of force_build=True argument in Modal application?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The force_build=True argument is used to force an image to be rebuilt in Modal, even if the definition hasn't been changed."
3,Should 'force_build=True' be removed after an image has been rebuilt in Modal?,Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Yes, it should be removed after you’ve rebuilt the image, otherwise it will rebuild every time you run your code."
6,"What commands will run again if 'force_build=True' is used for 'pip_install(""slack-sdk"")' and 'run_commands(""echo hi"")' but not for 'apt_install(""git"")'?",Custom containers Forcing an image to rebuild,"Modal uses the definition of an image to determine whether it needs to be
rebuilt. In some cases, you may want to force an image to rebuild, even if the
definition hasn’t changed. You can do this by adding theforce_build=Trueargument to any of the image build steps. force_build=True frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
)Copy frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) frommodalimportImage

image = (
    Image.debian_slim()
    .apt_install(""git"")
    .pip_install(""slack-sdk"", force_build=True)
    .run_commands(""echo hi"")
) from import ""git"" ""slack-sdk"" True ""echo hi"" Copy Copy    Copy In the above example, bothpip_install(""slack-sdk"")andrun_commands(""echo hi"")will run again, butapt_install(""git"")will not.
Remember to removeforce_build=Trueafter you’ve rebuilt the image, otherwise
it will rebuild every time you run your code. pip_install(""slack-sdk"") run_commands(""echo hi"") apt_install(""git"") force_build=True Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuildSee it in actionDependencies for YouTube processingRegistry image for Algolia indexing Custom containersAdditional Python packagesImporting Python packagesShell commandsUsing existing Docker Hub imagesUsing Conda instead of pipUsing a DockerfileDockerfile command compatibilityENTRYPOINTENVRunning a function as a build step (beta)Forcing an image to rebuild Custom containers Additional Python packages Importing Python packages Shell commands Using existing Docker Hub images Using Conda instead of pip Using a Dockerfile Dockerfile command compatibility ENTRYPOINT ENV Running a function as a build step (beta) Forcing an image to rebuild See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in actionDependencies for YouTube processingRegistry image for Algolia indexing See it in action Dependencies for YouTube processing Dependencies for YouTube processing Dependencies for YouTube processing     Registry image for Algolia indexing Registry image for Algolia indexing Registry image for Algolia indexing     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If 'force_build=True' is used, both 'pip_install(""slack-sdk"")' and 'run_commands(""echo hi"")' will run again. However, 'apt_install(""git"")' will not run again."
0,What class supports streaming responses in Modal web endpoints?,Streaming endpoints,"Modal web endpoints support streaming responses using FastAPI’sStreamingResponseclass. This class accepts asynchronous generators, synchronous generators, or
any Python object that implements theiterator protocol,
and can be used with Modal Functions! StreamingResponse StreamingResponse iterator protocol iterator protocol ",FastAPI’sStreamingResponseclass
3,What type of Python object can be used with this class?,Streaming endpoints,"Modal web endpoints support streaming responses using FastAPI’sStreamingResponseclass. This class accepts asynchronous generators, synchronous generators, or
any Python object that implements theiterator protocol,
and can be used with Modal Functions! StreamingResponse StreamingResponse iterator protocol iterator protocol ",Any Python object that implements the iterator protocol
6,Can the StreamingResponseclass be used with Modal Functions?,Streaming endpoints,"Modal web endpoints support streaming responses using FastAPI’sStreamingResponseclass. This class accepts asynchronous generators, synchronous generators, or
any Python object that implements theiterator protocol,
and can be used with Modal Functions! StreamingResponse StreamingResponse iterator protocol iterator protocol ","Yes, it can be used with Modal Functions."
0,What is the purpose of the 'fake_video_render' function in the given code?,Streaming endpoints Streaming responses with remote,".remote A Modal Function wrapping a generator function body can have its response passed
directly into aStreamingResponse. This is particularly useful if you want to
do some GPU processing in one Modal Function that is called by a CPU-based web
endpoint Modal Function. StreamingResponse frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") from import @stub.function(gpu=""any"") gpu=""any"" ""any"" def fake_video_render for in range 10 yield f""frame{i}: some fake data from GPU\n"" {i} 1 @stub.function() @web_endpoint() def hook return ""application/octet-stream"" Copy Copy    Copy ","The 'fake_video_render' function generates fake data that simulates a streaming video, with each line of data representing one frame."
3,"What does '@stub.function(gpu=""any"")' mean in this context?",Streaming endpoints Streaming responses with remote,".remote A Modal Function wrapping a generator function body can have its response passed
directly into aStreamingResponse. This is particularly useful if you want to
do some GPU processing in one Modal Function that is called by a CPU-based web
endpoint Modal Function. StreamingResponse frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") from import @stub.function(gpu=""any"") gpu=""any"" ""any"" def fake_video_render for in range 10 yield f""frame{i}: some fake data from GPU\n"" {i} 1 @stub.function() @web_endpoint() def hook return ""application/octet-stream"" Copy Copy    Copy ","It's a decorator that specifies that the function it precedes, 'fake_video_render', can run on any GPU."
6,What type of media does the 'hook' function specify its response as?,Streaming endpoints Streaming responses with remote,".remote A Modal Function wrapping a generator function body can have its response passed
directly into aStreamingResponse. This is particularly useful if you want to
do some GPU processing in one Modal Function that is called by a CPU-based web
endpoint Modal Function. StreamingResponse frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function(gpu=""any"")deffake_video_render():foriinrange(10):yieldf""frame{i}: some fake data from GPU\n"".encode()
        time.sleep(1)@stub.function()@web_endpoint()defhook():returnStreamingResponse(
        fake_video_render.remote(), media_type=""application/octet-stream"") from import @stub.function(gpu=""any"") gpu=""any"" ""any"" def fake_video_render for in range 10 yield f""frame{i}: some fake data from GPU\n"" {i} 1 @stub.function() @web_endpoint() def hook return ""application/octet-stream"" Copy Copy    Copy ","The 'hook' function specifies its response as an 'application/octet-stream', which represents binary data."
0,"What does the ""map_me"" function do in the provided code?",Streaming endpoints Streaming responses with map and starmap,".map .starmap You can also combine Modal Function parallelization with streaming responses,
enabling applications to service a request by farming out to dozens of
containers and iteratively returning result chunks to the client. frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") from import @stub.function() def map_me i # stagger the results for demo purposes return f""hello from{i}\n"" {i} @stub.function() @web_endpoint() def mapped return map range 10 ""text/event-stream"" Copy Copy    Copy This snippet will spread the tenmap_me(i)executions across containers, and
return each string response part as it completes. By default the results will be
ordered, but if this isn’t necessary passorder_outputs=Falseas keyword
argument to the.mapcall. map_me(i) order_outputs=False .map Cooperative yielding In asynchronous applications a loop over a.mapor.starmapcall can block
the main thread and not allow theStreamingResponseto return response parts
iteratively to the client. .map .starmap StreamingResponse To avoid this, it’s important to do some ‘cooperative yielding’ inside the loop.
For example: @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"") gpu=""any"" ""any"" def transcribe_video segment # Notice that this is an `async` function. async def stream_response_wrapper request for in map await 0.5 # Cooperatively yield here by sleeping. yield Copy Copy    Copy ","In the provided code, the ""map_me"" function takes an integer ""i"", sleeps for ""i"" seconds to stagger the results for demonstration purposes, and then returns a string ""hello from {i}\n""."
3,"What is the purpose of the ""stream_response_wrapper"" function in the code?",Streaming endpoints Streaming responses with map and starmap,".map .starmap You can also combine Modal Function parallelization with streaming responses,
enabling applications to service a request by farming out to dozens of
containers and iteratively returning result chunks to the client. frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") from import @stub.function() def map_me i # stagger the results for demo purposes return f""hello from{i}\n"" {i} @stub.function() @web_endpoint() def mapped return map range 10 ""text/event-stream"" Copy Copy    Copy This snippet will spread the tenmap_me(i)executions across containers, and
return each string response part as it completes. By default the results will be
ordered, but if this isn’t necessary passorder_outputs=Falseas keyword
argument to the.mapcall. map_me(i) order_outputs=False .map Cooperative yielding In asynchronous applications a loop over a.mapor.starmapcall can block
the main thread and not allow theStreamingResponseto return response parts
iteratively to the client. .map .starmap StreamingResponse To avoid this, it’s important to do some ‘cooperative yielding’ inside the loop.
For example: @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"") gpu=""any"" ""any"" def transcribe_video segment # Notice that this is an `async` function. async def stream_response_wrapper request for in map await 0.5 # Cooperatively yield here by sleeping. yield Copy Copy    Copy ","The ""stream_response_wrapper"" function oversees the taking in of a request, splitting the video into segments based on that request, processing each segment with the ""transcribe_video"" function, pausing for half a second to allow other operations (cooperative yielding), and then yielding the partial result for each segment."
6,How can we ensure the results are returned in order in the provided code?,Streaming endpoints Streaming responses with map and starmap,".map .starmap You can also combine Modal Function parallelization with streaming responses,
enabling applications to service a request by farming out to dozens of
containers and iteratively returning result chunks to the client. frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()defmap_me(i):
    time.sleep(i)# stagger the results for demo purposesreturnf""hello from{i}\n""@stub.function()@web_endpoint()defmapped():returnStreamingResponse(
        map_me.map(range(10)), media_type=""text/event-stream"") from import @stub.function() def map_me i # stagger the results for demo purposes return f""hello from{i}\n"" {i} @stub.function() @web_endpoint() def mapped return map range 10 ""text/event-stream"" Copy Copy    Copy This snippet will spread the tenmap_me(i)executions across containers, and
return each string response part as it completes. By default the results will be
ordered, but if this isn’t necessary passorder_outputs=Falseas keyword
argument to the.mapcall. map_me(i) order_outputs=False .map Cooperative yielding In asynchronous applications a loop over a.mapor.starmapcall can block
the main thread and not allow theStreamingResponseto return response parts
iteratively to the client. .map .starmap StreamingResponse To avoid this, it’s important to do some ‘cooperative yielding’ inside the loop.
For example: @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_resultCopy @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"")deftranscribe_video(segment):
    ...# Notice that this is an `async` function.asyncdefstream_response_wrapper(request)
    segments = split_video(request)forpartial_resultintranscribe_video.map(segments):awaitasyncio.sleep(0.5)# Cooperatively yield here by sleeping.yieldpartial_result @stub.function(gpu=""any"") gpu=""any"" ""any"" def transcribe_video segment # Notice that this is an `async` function. async def stream_response_wrapper request for in map await 0.5 # Cooperatively yield here by sleeping. yield Copy Copy    Copy ","By default, the results will be ordered. If this is not necessary, you can pass 'order_outputs=False' as a keyword argument to the '.map' call."
0,What are some ways responses can be streamed as demonstrated in the content?,Streaming endpoints Further examples,"Complete code the for the simple examples given above is availablein our modal-examples Github repository.An example of streaming ChatGPT responses over HTTPAn end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Complete code the for the simple examples given above is availablein our modal-examples Github repository. in our modal-examples Github repository An example of streaming ChatGPT responses over HTTP An example of streaming ChatGPT responses over HTTP An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examples Streaming endpoints Simple example Streaming responses with .remote Streaming responses with .map and .starmap Cooperative yielding Further examples See it in actionLLM Voice ChatText Generation InferenceMLC model See it in actionLLM Voice ChatText Generation InferenceMLC model See it in action LLM Voice Chat LLM Voice Chat LLM Voice Chat     Text Generation Inference Text Generation Inference Text Generation Inference     MLC model MLC model MLC model     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The responses can be streamed with .remote, .map and .starmap."
3,"What are some features showcased in the ""See it in action"" section?",Streaming endpoints Further examples,"Complete code the for the simple examples given above is availablein our modal-examples Github repository.An example of streaming ChatGPT responses over HTTPAn end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Complete code the for the simple examples given above is availablein our modal-examples Github repository. in our modal-examples Github repository An example of streaming ChatGPT responses over HTTP An example of streaming ChatGPT responses over HTTP An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examples Streaming endpoints Simple example Streaming responses with .remote Streaming responses with .map and .starmap Cooperative yielding Further examples See it in actionLLM Voice ChatText Generation InferenceMLC model See it in actionLLM Voice ChatText Generation InferenceMLC model See it in action LLM Voice Chat LLM Voice Chat LLM Voice Chat     Text Generation Inference Text Generation Inference Text Generation Inference     MLC model MLC model MLC model     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The featured functions are LLM Voice Chat, Text Generation Inference, and MLC model."
6,Which company is this document related to?,Streaming endpoints Further examples,"Complete code the for the simple examples given above is availablein our modal-examples Github repository.An example of streaming ChatGPT responses over HTTPAn end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Complete code the for the simple examples given above is availablein our modal-examples Github repository. in our modal-examples Github repository An example of streaming ChatGPT responses over HTTP An example of streaming ChatGPT responses over HTTP An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examples Streaming endpoints Simple example Streaming responses with .remote Streaming responses with .map and .starmap Cooperative yielding Further examples See it in actionLLM Voice ChatText Generation InferenceMLC model See it in actionLLM Voice ChatText Generation InferenceMLC model See it in action LLM Voice Chat LLM Voice Chat LLM Voice Chat     Text Generation Inference Text Generation Inference Text Generation Inference     MLC model MLC model MLC model     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The document is related to Modal Labs, Inc."
0,What examples are provided on the Github repository mentioned in the content?,Streaming endpoints Further examples,"Complete code the for the simple examples given above is availablein our modal-examples Github repository.An example of streaming ChatGPT responses over HTTPAn end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Complete code the for the simple examples given above is availablein our modal-examples Github repository. in our modal-examples Github repository An example of streaming ChatGPT responses over HTTP An example of streaming ChatGPT responses over HTTP An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examples Streaming endpoints Simple example Streaming responses with .remote Streaming responses with .map and .starmap Cooperative yielding Further examples See it in actionLLM Voice ChatText Generation InferenceMLC model See it in actionLLM Voice ChatText Generation InferenceMLC model See it in action LLM Voice Chat LLM Voice Chat LLM Voice Chat     Text Generation Inference Text Generation Inference Text Generation Inference     MLC model MLC model MLC model     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Streaming ChatGPT responses over HTTP and streaming Youtube video transcriptions with OpenAI’s whisper model.
3,What are the different responses mentioned in the content?,Streaming endpoints Further examples,"Complete code the for the simple examples given above is availablein our modal-examples Github repository.An example of streaming ChatGPT responses over HTTPAn end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Complete code the for the simple examples given above is availablein our modal-examples Github repository. in our modal-examples Github repository An example of streaming ChatGPT responses over HTTP An example of streaming ChatGPT responses over HTTP An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examples Streaming endpoints Simple example Streaming responses with .remote Streaming responses with .map and .starmap Cooperative yielding Further examples See it in actionLLM Voice ChatText Generation InferenceMLC model See it in actionLLM Voice ChatText Generation InferenceMLC model See it in action LLM Voice Chat LLM Voice Chat LLM Voice Chat     Text Generation Inference Text Generation Inference Text Generation Inference     MLC model MLC model MLC model     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The responses mentioned are .remote, .map, and .starmap."
6,Who owns the copyright as stated in the content?,Streaming endpoints Further examples,"Complete code the for the simple examples given above is availablein our modal-examples Github repository.An example of streaming ChatGPT responses over HTTPAn end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Complete code the for the simple examples given above is availablein our modal-examples Github repository. in our modal-examples Github repository An example of streaming ChatGPT responses over HTTP An example of streaming ChatGPT responses over HTTP An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. An end-to-end example of streaming Youtube video transcriptions with OpenAI’s whisper model. Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examplesSee it in actionLLM Voice ChatText Generation InferenceMLC model Streaming endpointsSimple exampleStreaming responses with .remoteStreaming responses with .map and .starmapCooperative yieldingFurther examples Streaming endpoints Simple example Streaming responses with .remote Streaming responses with .map and .starmap Cooperative yielding Further examples See it in actionLLM Voice ChatText Generation InferenceMLC model See it in actionLLM Voice ChatText Generation InferenceMLC model See it in action LLM Voice Chat LLM Voice Chat LLM Voice Chat     Text Generation Inference Text Generation Inference Text Generation Inference     MLC model MLC model MLC model     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright belongs to Modal Labs, Inc. in 2023."
0,What does the provided example allow users to try out?,Play with the ControlNet demos,"This example allows you to play with all 10 demonstration Gradio apps from the new and amazing ControlNet project.
ControlNet provides a minimal interface allowing users to use images to constrain StableDiffusion’s generation process.
With ControlNet, users can easily condition the StableDiffusion image generation with different spatial contexts
including a depth maps, segmentation maps, scribble drawings, and keypoints!    ",It allows users to play with all 10 demonstration Gradio apps from the ControlNet project.
3,How does ControlNet condition the StableDiffusion image generation?,Play with the ControlNet demos,"This example allows you to play with all 10 demonstration Gradio apps from the new and amazing ControlNet project.
ControlNet provides a minimal interface allowing users to use images to constrain StableDiffusion’s generation process.
With ControlNet, users can easily condition the StableDiffusion image generation with different spatial contexts
including a depth maps, segmentation maps, scribble drawings, and keypoints!    ","It conditions the StableDiffusion image generation with different spatial contexts including depth maps, segmentation maps, scribble drawings, and keypoints."
6,What is one specific feature of the ControlNet project?,Play with the ControlNet demos,"This example allows you to play with all 10 demonstration Gradio apps from the new and amazing ControlNet project.
ControlNet provides a minimal interface allowing users to use images to constrain StableDiffusion’s generation process.
With ControlNet, users can easily condition the StableDiffusion image generation with different spatial contexts
including a depth maps, segmentation maps, scribble drawings, and keypoints!    ",One feature of the ControlNet project is that it allows users to use images to influence StableDiffusion's generation process.
0,What is the purpose of changing the DEMO_NAME in the ControlNet demo?,Play with the ControlNet demos Pick a demo any demo,"Simply by changing theDEMO_NAMEbelow, you can change which ControlNet demo app is setup
and run by this Modal script. DEMO_NAME DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] ""scribble2image"" # Change this value to change the active demo app. Copy Copy    Copy ","By changing the DEMO_NAME, you can change which ControlNet demo app is setup and run by the Modal script."
3,"What is the effect of changing the DEMO_NAME to ""scribble2image""?",Play with the ControlNet demos Pick a demo any demo,"Simply by changing theDEMO_NAMEbelow, you can change which ControlNet demo app is setup
and run by this Modal script. DEMO_NAME DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] ""scribble2image"" # Change this value to change the active demo app. Copy Copy    Copy ","Changing the DEMO_NAME to ""scribble2image"" sets up and runs the ""scribble2image"" demo app."
6,What function does the Modal script serve in the ControlNet demo?,Play with the ControlNet demos Pick a demo any demo,"Simply by changing theDEMO_NAMEbelow, you can change which ControlNet demo app is setup
and run by this Modal script. DEMO_NAME DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME]Copy DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] DEMO_NAME =""scribble2image""# Change this value to change the active demo app.selected_demo = demos_map[DEMO_NAME] ""scribble2image"" # Change this value to change the active demo app. Copy Copy    Copy ",The Modal script sets up and runs the chosen ControlNet demo app.
0,What is the purpose of the ControlNet gradio demo module?,Play with the ControlNet demos Serving the Gradio web UI,"Each ControlNet gradio demo module exposes ablockGradio interface running in queue-mode,
which is initialized in module scope on import and served on0.0.0.0. We want the block interface object,
but the queueing and launched webserver aren’t compatible with Modal’s serverless web endpoint interface,
so in theimport_gradio_app_blocksfunction we patch out these behaviors. block 0.0.0.0 import_gradio_app_blocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks def import_gradio_app_blocks demo: DemoApp from import # The ControlNet repo demo scripts are written to be run as # standalone scripts, and have a lot of code that executes # in global scope on import, including the launch of a Gradio web server. # We want Modal to control the Gradio web app serving, so we # monkeypatch the .launch() function to be a no-op. lambda print ""launch() has been monkeypatched to do nothing."" # each demo app module is a file like gradio_{name}.py f""gradio_{demo.name}"" {demo.name} # disable queueing mode, which is incompatible with our Modal web app setup. False return Copy Copy    Copy Because the ControlNet gradio app’s are so time and compute intensive to cold-start
the web app function is limited to running just 1 warm container. This way, while playing
with the demos we can pay the cold-start cost once and have all web requests hit the warm
container. Spinning up extra containers to handle additional requests would not be efficient
given the cold-start time. @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,) gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1, ""A10G"" 1 1 @asgi_app() def run from import # mount for execution on Modal return ""/"" Copy Copy    Copy ",The purpose of the ControlNet gradio demo module is to expose a blockGradio interface that is initialized in module scope on import and served on 0.0.0.0.
3,What does the .launch() function do in this context?,Play with the ControlNet demos Serving the Gradio web UI,"Each ControlNet gradio demo module exposes ablockGradio interface running in queue-mode,
which is initialized in module scope on import and served on0.0.0.0. We want the block interface object,
but the queueing and launched webserver aren’t compatible with Modal’s serverless web endpoint interface,
so in theimport_gradio_app_blocksfunction we patch out these behaviors. block 0.0.0.0 import_gradio_app_blocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks def import_gradio_app_blocks demo: DemoApp from import # The ControlNet repo demo scripts are written to be run as # standalone scripts, and have a lot of code that executes # in global scope on import, including the launch of a Gradio web server. # We want Modal to control the Gradio web app serving, so we # monkeypatch the .launch() function to be a no-op. lambda print ""launch() has been monkeypatched to do nothing."" # each demo app module is a file like gradio_{name}.py f""gradio_{demo.name}"" {demo.name} # disable queueing mode, which is incompatible with our Modal web app setup. False return Copy Copy    Copy Because the ControlNet gradio app’s are so time and compute intensive to cold-start
the web app function is limited to running just 1 warm container. This way, while playing
with the demos we can pay the cold-start cost once and have all web requests hit the warm
container. Spinning up extra containers to handle additional requests would not be efficient
given the cold-start time. @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,) gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1, ""A10G"" 1 1 @asgi_app() def run from import # mount for execution on Modal return ""/"" Copy Copy    Copy ","In this context, the .launch() function, which is normally responsible for starting the Gradio web server, has been monkeypatched and is a no-op, meaning it does nothing."
6,Why is the web app function limited to running just 1 warm container?,Play with the ControlNet demos Serving the Gradio web UI,"Each ControlNet gradio demo module exposes ablockGradio interface running in queue-mode,
which is initialized in module scope on import and served on0.0.0.0. We want the block interface object,
but the queueing and launched webserver aren’t compatible with Modal’s serverless web endpoint interface,
so in theimport_gradio_app_blocksfunction we patch out these behaviors. block 0.0.0.0 import_gradio_app_blocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =FalsereturnblocksCopy defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks defimport_gradio_app_blocks(demo: DemoApp):fromgradioimportblocks# The ControlNet repo demo scripts are written to be run as# standalone scripts, and have a lot of code that executes# in global scope on import, including the launch of a Gradio web server.# We want Modal to control the Gradio web app serving, so we# monkeypatch the .launch() function to be a no-op.blocks.Blocks.launch =lambdaself, server_name:print(""launch() has been monkeypatched to do nothing."")# each demo app module is a file like gradio_{name}.pymodule_name =f""gradio_{demo.name}""mod = importlib.import_module(module_name)
    blocks = mod.block# disable queueing mode, which is incompatible with our Modal web app setup.blocks.enable_queue =Falsereturnblocks def import_gradio_app_blocks demo: DemoApp from import # The ControlNet repo demo scripts are written to be run as # standalone scripts, and have a lot of code that executes # in global scope on import, including the launch of a Gradio web server. # We want Modal to control the Gradio web app serving, so we # monkeypatch the .launch() function to be a no-op. lambda print ""launch() has been monkeypatched to do nothing."" # each demo app module is a file like gradio_{name}.py f""gradio_{demo.name}"" {demo.name} # disable queueing mode, which is incompatible with our Modal web app setup. False return Copy Copy    Copy Because the ControlNet gradio app’s are so time and compute intensive to cold-start
the web app function is limited to running just 1 warm container. This way, while playing
with the demos we can pay the cold-start cost once and have all web requests hit the warm
container. Spinning up extra containers to handle additional requests would not be efficient
given the cold-start time. @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    )Copy @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,)@asgi_app()defrun():fromgradio.routesimportmount_gradio_app# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=import_gradio_app_blocks(demo=selected_demo),
        path=""/"",
    ) @stub.function(gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1,) gpu=""A10G"",
    concurrency_limit=1,
    keep_warm=1, ""A10G"" 1 1 @asgi_app() def run from import # mount for execution on Modal return ""/"" Copy Copy    Copy ","The web app function is limited to running just 1 warm container because the ControlNet gradio app's are time and compute intensive to cold-start. This way, all web requests hit the warm container after paying the cold-start cost once, making it more efficient."
0,What command is used to run a ControlNet demo app?,Play with the ControlNet demos Have fun,"Serve your chosen demo app withmodal serve controlnet_gradio_demos.py. If you don’t have any images ready at hand,
try one that’s in the06_gpu_and_ml/controlnet/demo_images/folder. modal serve controlnet_gradio_demos.py 06_gpu_and_ml/controlnet/demo_images/ StableDiffusion was already impressive enough, but ControlNet’s ability to so accurately and intuitively constrain
the image generation process is sure to put a big, dumb grin on your face. Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun! Play with the ControlNet demos Imports and config preamble Pick a demo, any demo Setting up the dependencies Serving the Gradio web UI Have fun! Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy ",The command is: modal serve controlnet_gradio_demos.py
3,What is required to run this example on Modal?,Play with the ControlNet demos Have fun,"Serve your chosen demo app withmodal serve controlnet_gradio_demos.py. If you don’t have any images ready at hand,
try one that’s in the06_gpu_and_ml/controlnet/demo_images/folder. modal serve controlnet_gradio_demos.py 06_gpu_and_ml/controlnet/demo_images/ StableDiffusion was already impressive enough, but ControlNet’s ability to so accurately and intuitively constrain
the image generation process is sure to put a big, dumb grin on your face. Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun! Play with the ControlNet demos Imports and config preamble Pick a demo, any demo Setting up the dependencies Serving the Gradio web UI Have fun! Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy ","You need to create a free account, install the Modal Python package, and create an API token."
6,What is one of the notable attributes of ControlNet's image generation process?,Play with the ControlNet demos Have fun,"Serve your chosen demo app withmodal serve controlnet_gradio_demos.py. If you don’t have any images ready at hand,
try one that’s in the06_gpu_and_ml/controlnet/demo_images/folder. modal serve controlnet_gradio_demos.py 06_gpu_and_ml/controlnet/demo_images/ StableDiffusion was already impressive enough, but ControlNet’s ability to so accurately and intuitively constrain
the image generation process is sure to put a big, dumb grin on your face. Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun! Play with the ControlNet demos Imports and config preamble Pick a demo, any demo Setting up the dependencies Serving the Gradio web UI Have fun! Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy ",ControlNet's ability to accurately and intuitively constrain the image generation process is notable.
0,What is the purpose of ControlNet demos?,Play with the ControlNet demos Have fun,"Serve your chosen demo app withmodal serve controlnet_gradio_demos.py. If you don’t have any images ready at hand,
try one that’s in the06_gpu_and_ml/controlnet/demo_images/folder. modal serve controlnet_gradio_demos.py 06_gpu_and_ml/controlnet/demo_images/ StableDiffusion was already impressive enough, but ControlNet’s ability to so accurately and intuitively constrain
the image generation process is sure to put a big, dumb grin on your face. Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun! Play with the ControlNet demos Imports and config preamble Pick a demo, any demo Setting up the dependencies Serving the Gradio web UI Have fun! Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py $ modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The purpose of the ControlNet demos is to accurately and intuitively constrain the image generation process. 
3,What is the procedure to run an example on Modal?,Play with the ControlNet demos Have fun,"Serve your chosen demo app withmodal serve controlnet_gradio_demos.py. If you don’t have any images ready at hand,
try one that’s in the06_gpu_and_ml/controlnet/demo_images/folder. modal serve controlnet_gradio_demos.py 06_gpu_and_ml/controlnet/demo_images/ StableDiffusion was already impressive enough, but ControlNet’s ability to so accurately and intuitively constrain
the image generation process is sure to put a big, dumb grin on your face. Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun! Play with the ControlNet demos Imports and config preamble Pick a demo, any demo Setting up the dependencies Serving the Gradio web UI Have fun! Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py $ modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","To run an example on Modal, first, a free account needs to be created. After that, the Modal Python package should be installed, an API token should be created, then clone the modal-examples repository and run the code lines provided."
6,What is the repository for modal-examples?,Play with the ControlNet demos Have fun,"Serve your chosen demo app withmodal serve controlnet_gradio_demos.py. If you don’t have any images ready at hand,
try one that’s in the06_gpu_and_ml/controlnet/demo_images/folder. modal serve controlnet_gradio_demos.py 06_gpu_and_ml/controlnet/demo_images/ StableDiffusion was already impressive enough, but ControlNet’s ability to so accurately and intuitively constrain
the image generation process is sure to put a big, dumb grin on your face. Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun!Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Play with the ControlNet demosImports and config preamblePick a demo, any demoSetting up the dependenciesServing the Gradio web UIHave fun! Play with the ControlNet demos Imports and config preamble Pick a demo, any demo Setting up the dependencies Serving the Gradio web UI Have fun! Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py $ modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py modal serve 06_gpu_and_ml/controlnet/controlnet_gradio_demos.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The repository for modal-examples is https://github.com/modal-labs/modal-examples.
0,What is a Stub in a Modal application? ,modalStub,"classStub(object)Copy classStub(object)Copy classStub(object)Copy classStub(object) classStub(object) classStub(object) class Stub object Copy Copy    Copy AStubis a description of how to create a Modal application. Stub The stub object principally describes Modal objects (Function,Image,Secret, etc.) associated with the application. It has three responsibilities: Function Image Secret Syncing of identities across processes (your local Python interpreter and
every Modal worker active in your application).Making Objects stay alive and not be garbage collected for as long as the
app lives (see App lifetime below).Manage log collection for everything that happens inside your code. Syncing of identities across processes (your local Python interpreter and
every Modal worker active in your application). Making Objects stay alive and not be garbage collected for as long as the
app lives (see App lifetime below). Manage log collection for everything that happens inside your code. Registering functions with an app Registering functions with an app The most common way to explicitly register an Object with an app is through the@stub.function()decorator. It both registers the annotated function itself and
other passed objects, like schedules and secrets, with the app: @stub.function() importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass import @stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),) secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1), ""some_secret"" ""some_secret"" days=1 1 def foo pass Copy Copy    Copy In this example, the secret and schedule are registered with the app. @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typechecked def __init__ self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.) Optional str None Optional None # default image for all functions (default is `modal.Image.debian_slim()`) Sequence # default mounts for all functions Sequence # default secrets for all functions # any Modal Object dependencies (Dict, Queue, etc.) None Copy Copy    Copy Construct a new app stub, optionally with default image, mounts, secrets Any “blueprint” objects are loaded as part of running or deploying the app,
and are accessible by name on the running container app, e.g.: stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) Dict @stub.function() def store_something key:str, value:str str str Copy Copy    Copy ","A Stub in a Modal application is a description of how to create a Modal application. It principally describes Modal objects such as Function, Image, Secret, etc. associated with the application."
3,How can you explicitly register an Object with an app?,modalStub,"classStub(object)Copy classStub(object)Copy classStub(object)Copy classStub(object) classStub(object) classStub(object) class Stub object Copy Copy    Copy AStubis a description of how to create a Modal application. Stub The stub object principally describes Modal objects (Function,Image,Secret, etc.) associated with the application. It has three responsibilities: Function Image Secret Syncing of identities across processes (your local Python interpreter and
every Modal worker active in your application).Making Objects stay alive and not be garbage collected for as long as the
app lives (see App lifetime below).Manage log collection for everything that happens inside your code. Syncing of identities across processes (your local Python interpreter and
every Modal worker active in your application). Making Objects stay alive and not be garbage collected for as long as the
app lives (see App lifetime below). Manage log collection for everything that happens inside your code. Registering functions with an app Registering functions with an app The most common way to explicitly register an Object with an app is through the@stub.function()decorator. It both registers the annotated function itself and
other passed objects, like schedules and secrets, with the app: @stub.function() importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass import @stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),) secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1), ""some_secret"" ""some_secret"" days=1 1 def foo pass Copy Copy    Copy In this example, the secret and schedule are registered with the app. @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typechecked def __init__ self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.) Optional str None Optional None # default image for all functions (default is `modal.Image.debian_slim()`) Sequence # default mounts for all functions Sequence # default secrets for all functions # any Modal Object dependencies (Dict, Queue, etc.) None Copy Copy    Copy Construct a new app stub, optionally with default image, mounts, secrets Any “blueprint” objects are loaded as part of running or deploying the app,
and are accessible by name on the running container app, e.g.: stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) Dict @stub.function() def store_something key:str, value:str str str Copy Copy    Copy ","The most common way to explicitly register an Object with an app is through the @stub.function() decorator. This both registers the annotated function itself and other passed objects, such as schedules and secrets, with the app."
6,"How can you add a default image, mounts, secrets, and blueprint objects while constructing a new app stub?",modalStub,"classStub(object)Copy classStub(object)Copy classStub(object)Copy classStub(object) classStub(object) classStub(object) class Stub object Copy Copy    Copy AStubis a description of how to create a Modal application. Stub The stub object principally describes Modal objects (Function,Image,Secret, etc.) associated with the application. It has three responsibilities: Function Image Secret Syncing of identities across processes (your local Python interpreter and
every Modal worker active in your application).Making Objects stay alive and not be garbage collected for as long as the
app lives (see App lifetime below).Manage log collection for everything that happens inside your code. Syncing of identities across processes (your local Python interpreter and
every Modal worker active in your application). Making Objects stay alive and not be garbage collected for as long as the
app lives (see App lifetime below). Manage log collection for everything that happens inside your code. Registering functions with an app Registering functions with an app The most common way to explicitly register an Object with an app is through the@stub.function()decorator. It both registers the annotated function itself and
other passed objects, like schedules and secrets, with the app: @stub.function() importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():passCopy importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass importmodal

stub = modal.Stub()@stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),)deffoo():pass import @stub.function(secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1),) secret=modal.Secret.from_name(""some_secret""),
    schedule=modal.Period(days=1), ""some_secret"" ""some_secret"" days=1 1 def foo pass Copy Copy    Copy In this example, the secret and schedule are registered with the app. @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None:Copy @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typecheckeddef__init__(self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.)) ->None: @typechecked def __init__ self,
    name:Optional[str] =None,
    *,
    image:Optional[_Image] =None,# default image for all functions (default is `modal.Image.debian_slim()`)mounts:Sequence[_Mount] = [],# default mounts for all functionssecrets:Sequence[_Secret] = [],# default secrets for all functions**blueprint: _Object,# any Modal Object dependencies (Dict, Queue, etc.) Optional str None Optional None # default image for all functions (default is `modal.Image.debian_slim()`) Sequence # default mounts for all functions Sequence # default secrets for all functions # any Modal Object dependencies (Dict, Queue, etc.) None Copy Copy    Copy Construct a new app stub, optionally with default image, mounts, secrets Any “blueprint” objects are loaded as part of running or deploying the app,
and are accessible by name on the running container app, e.g.: stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value)Copy stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) stub = modal.Stub(key_value_store=modal.Dict.new())@stub.function()defstore_something(key:str, value:str):
    stub.app.key_value_store.put(key, value) Dict @stub.function() def store_something key:str, value:str str str Copy Copy    Copy ","You can add a default image, mounts, secrets, and ""blueprint"" objects while constructing a new app stub by passing them as parameters to the stub's __init__ method. Any “blueprint” objects are loaded as part of running or deploying the app and are accessible by name on the running container app."
0,What is the recommended method to access objects on the running app?,modalStub app,@propertydefapp(self):Copy @propertydefapp(self):Copy @propertydefapp(self):Copy @propertydefapp(self): @propertydefapp(self): @propertydefapp(self): @property def app self Copy Copy    Copy stub.appis deprecated: use e.g.stub.objinstead ofstub.app.objif you need to access objects on the running app. stub.app stub.obj stub.app.obj ,The recommended method to access objects on the running app is to use e.g.stub.obj instead of stub.app.obj.
3,"What does the string ""stub.app is deprecated"" imply?",modalStub app,@propertydefapp(self):Copy @propertydefapp(self):Copy @propertydefapp(self):Copy @propertydefapp(self): @propertydefapp(self): @propertydefapp(self): @property def app self Copy Copy    Copy stub.appis deprecated: use e.g.stub.objinstead ofstub.app.objif you need to access objects on the running app. stub.app stub.obj stub.app.obj ,"The string ""stub.app is deprecated"" means that stub.app is outdated or no longer recommended for use."
6,What is the suggested method for accessing objects on the running app according to the given content? ,modalStub app,@propertydefapp(self):Copy @propertydefapp(self):Copy @propertydefapp(self):Copy @propertydefapp(self): @propertydefapp(self): @propertydefapp(self): @property def app self Copy Copy    Copy stub.appis deprecated: use e.g.stub.objinstead ofstub.app.objif you need to access objects on the running app. stub.app stub.obj stub.app.obj ,"The suggested method for accessing objects on the running app, according to the given content, is by using e.g. stub.obj."
0,What does the method @propertydefapp_id return?,modalStub appid,"@propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]: @propertydefapp_id(self) ->Optional[str]: @propertydefapp_id(self) ->Optional[str]: @property def app_id self Optional str Copy Copy    Copy Return the app_id, if the stub is running. ","It returns the app_id, if the stub is running."
3,"What does ""@propertydefapp_id(self) ->Optional[str]"" represent?",modalStub appid,"@propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]: @propertydefapp_id(self) ->Optional[str]: @propertydefapp_id(self) ->Optional[str]: @property def app_id self Optional str Copy Copy    Copy Return the app_id, if the stub is running. ","It represents a method that potentially returns a string data, which might be the application id."
6,Where does @propertydefapp_id get the app_id from?,modalStub appid,"@propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]:Copy @propertydefapp_id(self) ->Optional[str]: @propertydefapp_id(self) ->Optional[str]: @propertydefapp_id(self) ->Optional[str]: @property def app_id self Optional str Copy Copy    Copy Return the app_id, if the stub is running. ",It gets the app_id from the stub when it's running.
0,What does @propertydefdescription(self) represent?,modalStub description,"@propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]: @propertydefdescription(self) ->Optional[str]: @propertydefdescription(self) ->Optional[str]: @property def description self Optional str Copy Copy    Copy The Stub’sname, if available, or a fallback descriptive identifier. name ",It represents an optional string.
3,What can @propertydefdescription(self) return if the Stub's name isn't available? ,modalStub description,"@propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]: @propertydefdescription(self) ->Optional[str]: @propertydefdescription(self) ->Optional[str]: @property def description self Optional str Copy Copy    Copy The Stub’sname, if available, or a fallback descriptive identifier. name ",It can return a fallback descriptive identifier.
6,What is a probable output for @propertydefdescription(self)? ,modalStub description,"@propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]:Copy @propertydefdescription(self) ->Optional[str]: @propertydefdescription(self) ->Optional[str]: @propertydefdescription(self) ->Optional[str]: @property def description self Optional str Copy Copy    Copy The Stub’sname, if available, or a fallback descriptive identifier. name ",The probable output could be the Stub's name or a fallback descriptive identifier.
0,What is the function of set_description method in the code?,modalStub setdescription,"defset_description(self, description:str):Copy defset_description(self, description:str):Copy defset_description(self, description:str):Copy defset_description(self, description:str): defset_description(self, description:str): defset_description(self, description:str): def set_description self, description:str str Copy Copy    Copy ",The set_description method is used to set the description of the object.
3,What is the argument type of the method set_description?,modalStub setdescription,"defset_description(self, description:str):Copy defset_description(self, description:str):Copy defset_description(self, description:str):Copy defset_description(self, description:str): defset_description(self, description:str): defset_description(self, description:str): def set_description self, description:str str Copy Copy    Copy ",The argument type of the set_description method is a string (str).
6,How many times does the 'set_description' method appear in the content?,modalStub setdescription,"defset_description(self, description:str):Copy defset_description(self, description:str):Copy defset_description(self, description:str):Copy defset_description(self, description:str): defset_description(self, description:str): defset_description(self, description:str): def set_description self, description:str str Copy Copy    Copy ",The 'set_description' method appears six times in the content.
0,What is the purpose of the function defget_objects(self)?,modalStub getobjects,"defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]: defget_objects(self) ->List[Tuple[str, _Object]]: defget_objects(self) ->List[Tuple[str, _Object]]: def get_objects self List Tuple str Copy Copy    Copy Used by the container app to initialize objects. ",It is used by the container app to initialize objects.
3,What argument does the function defget_objects(self) take?,modalStub getobjects,"defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]: defget_objects(self) ->List[Tuple[str, _Object]]: defget_objects(self) ->List[Tuple[str, _Object]]: def get_objects self List Tuple str Copy Copy    Copy Used by the container app to initialize objects. ",It takes 'self' as an argument.
6,How many times is the function defget_objects(self) mentioned in the text?,modalStub getobjects,"defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]:Copy defget_objects(self) ->List[Tuple[str, _Object]]: defget_objects(self) ->List[Tuple[str, _Object]]: defget_objects(self) ->List[Tuple[str, _Object]]: def get_objects self List Tuple str Copy Copy    Copy Used by the container app to initialize objects. ",It is mentioned six times.
0,"What does the ""is_inside"" function do?",modalStub isinside,"@typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typechecked def is_inside self, image:Optional[_Image] =None Optional None bool Copy Copy    Copy Returns if the program is currently running inside a container for this app. ",It returns if the program is currently running inside a container for this app.
1,"What is required to run the ""is_inside"" function?",modalStub isinside,"@typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typechecked def is_inside self, image:Optional[_Image] =None Optional None bool Copy Copy    Copy Returns if the program is currently running inside a container for this app. ","A self parameter and an optional image parameter of the type ""_Image""."
2,"What does the function ""is_inside"" return?",modalStub isinside,"@typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typechecked def is_inside self, image:Optional[_Image] =None Optional None bool Copy Copy    Copy Returns if the program is currently running inside a container for this app. ","It returns a boolean, indicating whether the program is currently running inside a container."
3,"What type does the ""is_inside"" function expect for the ""image"" parameter?",modalStub isinside,"@typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typechecked def is_inside self, image:Optional[_Image] =None Optional None bool Copy Copy    Copy Returns if the program is currently running inside a container for this app. ","The ""image"" parameter is expected to be of type ""_Image"", but it's an optional parameter. "
4,"What keyword is used to ensure static type checking in the function ""is_inside""?",modalStub isinside,"@typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool:Copy @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typecheckeddefis_inside(self, image:Optional[_Image] =None) ->bool: @typechecked def is_inside self, image:Optional[_Image] =None Optional None bool Copy Copy    Copy Returns if the program is currently running inside a container for this app. ","The keyword ""@typechecked"" is used to ensure static type checking."
0,"What does the ""run"" method do in this context?",modalStub run,"@asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanager def run self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None, Optional None None bool True bool False Optional None ""_Stub"" None Copy Copy    Copy Context manager that runs an app on Modal. Use this as the main entry point for your Modal application. All calls
to Modal functions should be made within the scope of this context
manager, and they will correspond to the current app. Note that this method used to return a separate “App” object. This is
no longer useful since you can use the stub itself for access to all
objects. For backwards compatibility reasons, it returns the same stub. ","The ""run"" method serves as the main entry point for a Modal application. All calls to Modal functions should be made within the scope of this context manager and will correspond to the current app."
3,"Can the ""show_progress"" parameter be set to False in the ""run"" method?",modalStub run,"@asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanager def run self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None, Optional None None bool True bool False Optional None ""_Stub"" None Copy Copy    Copy Context manager that runs an app on Modal. Use this as the main entry point for your Modal application. All calls
to Modal functions should be made within the scope of this context
manager, and they will correspond to the current app. Note that this method used to return a separate “App” object. This is
no longer useful since you can use the stub itself for access to all
objects. For backwards compatibility reasons, it returns the same stub. ","Yes, the ""show_progress"" parameter can be set to False in the ""run"" method."
6,"What type of object does the ""client"" parameter in the ""run"" method expect?",modalStub run,"@asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]:Copy @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanagerdefrun(self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None,) -> AsyncGenerator[""_Stub"",None]: @asynccontextmanager def run self,
    client:Optional[_Client] =None,
    stdout=None,
    show_progress:bool=True,
    detach:bool=False,
    output_mgr:Optional[OutputManager] =None, Optional None None bool True bool False Optional None ""_Stub"" None Copy Copy    Copy Context manager that runs an app on Modal. Use this as the main entry point for your Modal application. All calls
to Modal functions should be made within the scope of this context
manager, and they will correspond to the current app. Note that this method used to return a separate “App” object. This is
no longer useful since you can use the stub itself for access to all
objects. For backwards compatibility reasons, it returns the same stub. ","The ""client"" parameter in the ""run"" method accepts an object of the ""_Client"" type or None."
0,"What does the ""registered_functions"" property return in this context?",modalStub registeredfunctions,"@propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]: @propertydefregistered_functions(self) ->Dict[str, _Function]: @propertydefregistered_functions(self) ->Dict[str, _Function]: @property def registered_functions self Dict str Copy Copy    Copy All modal.Function objects registered on the stub. ",A Dictionary with string keys and Function objects.
3,What does the '@property' annotation denote in the given code?,modalStub registeredfunctions,"@propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]: @propertydefregistered_functions(self) ->Dict[str, _Function]: @propertydefregistered_functions(self) ->Dict[str, _Function]: @property def registered_functions self Dict str Copy Copy    Copy All modal.Function objects registered on the stub. ","It denotes that the ""registered_functions"" is a property of a class and can be accessed like an attribute."
6,What are modal.Function objects in this context?,modalStub registeredfunctions,"@propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]:Copy @propertydefregistered_functions(self) ->Dict[str, _Function]: @propertydefregistered_functions(self) ->Dict[str, _Function]: @propertydefregistered_functions(self) ->Dict[str, _Function]: @property def registered_functions self Dict str Copy Copy    Copy All modal.Function objects registered on the stub. ",They are functions registered on the stub.
0,What is the function of the registered_classes property in modal.Stub?,modalStub registeredclasses,"@propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]: @propertydefregistered_classes(self) ->Dict[str, _Function]: @propertydefregistered_classes(self) ->Dict[str, _Function]: @property def registered_classes self Dict str Copy Copy    Copy All modal.Cls objects registered on the stub. ",It returns all modal.Cls objects registered on the stub.
3,What is returned by the @property def registered_classes(self)?,modalStub registeredclasses,"@propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]: @propertydefregistered_classes(self) ->Dict[str, _Function]: @propertydefregistered_classes(self) ->Dict[str, _Function]: @property def registered_classes self Dict str Copy Copy    Copy All modal.Cls objects registered on the stub. ",It returns a dictionary mapping strings to _Function objects.
6,What is the type of objects that registered_classes manages in its dictionary?,modalStub registeredclasses,"@propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]:Copy @propertydefregistered_classes(self) ->Dict[str, _Function]: @propertydefregistered_classes(self) ->Dict[str, _Function]: @propertydefregistered_classes(self) ->Dict[str, _Function]: @property def registered_classes self Dict str Copy Copy    Copy All modal.Cls objects registered on the stub. ",The objects are of type '_Function'.
0,What does the property 'registered_entrypoints' within 'modal.Stub' return?,modalStub registeredentrypoints,"@propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @property def registered_entrypoints self Dict str Copy Copy    Copy All local CLI entrypoints registered on the stub. ",It returns a dictionary with strings as keys and '_LocalEntrypoint' as values.
1,What are registered on the stub according to the content?,modalStub registeredentrypoints,"@propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @property def registered_entrypoints self Dict str Copy Copy    Copy All local CLI entrypoints registered on the stub. ",All local CLI entrypoints are registered on the stub.
2,What data type does the property 'registered_entrypoints' return?,modalStub registeredentrypoints,"@propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @property def registered_entrypoints self Dict str Copy Copy    Copy All local CLI entrypoints registered on the stub. ",It returns a dictionary (Dict).
3,What does the '@property' decorator do in this context?,modalStub registeredentrypoints,"@propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @property def registered_entrypoints self Dict str Copy Copy    Copy All local CLI entrypoints registered on the stub. ",@property signals that the method following is a getter method for a property of an object.
4,What is the return type mentioned within the arrow bracket syntax in the provided code?,modalStub registeredentrypoints,"@propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]:Copy @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @propertydefregistered_entrypoints(self) ->Dict[str, _LocalEntrypoint]: @property def registered_entrypoints self Dict str Copy Copy    Copy All local CLI entrypoints registered on the stub. ","The type mentioned is 'Dict[str, _LocalEntrypoint]', a dictionary with keys of type 'str' and values of type '_LocalEntrypoint'."
0,What does 'registered_web_endpoints' return?,modalStub registeredwebendpoints,@propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]: @propertydefregistered_web_endpoints(self) ->List[str]: @propertydefregistered_web_endpoints(self) ->List[str]: @property def registered_web_endpoints self List str Copy Copy    Copy Names of web endpoint (ie. webhook) functions registered on the stub. ,It returns a list of strings.
3,What type of functions does 'registered_web_endpoints' contain?,modalStub registeredwebendpoints,@propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]: @propertydefregistered_web_endpoints(self) ->List[str]: @propertydefregistered_web_endpoints(self) ->List[str]: @property def registered_web_endpoints self List str Copy Copy    Copy Names of web endpoint (ie. webhook) functions registered on the stub. ,It contains web endpoint (webhook) functions.
6,Can 'registered_web_endpoints' be used to register new web endpoints?,modalStub registeredwebendpoints,@propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]:Copy @propertydefregistered_web_endpoints(self) ->List[str]: @propertydefregistered_web_endpoints(self) ->List[str]: @propertydefregistered_web_endpoints(self) ->List[str]: @property def registered_web_endpoints self List str Copy Copy    Copy Names of web endpoint (ie. webhook) functions registered on the stub. ,"No, it provides the names of already registered web endpoint functions."
0,What is the purpose of local_entrypoint in a Modal App?,modalStub localentrypoint,"deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: def local_entrypoint self, _warn_parentheses_missing=None, *, name:Optional[str] =None None Optional str None Callable Callable Any None Copy Copy    Copy Decorate a function to be used as a CLI entrypoint for a Modal App. These functions can be used to define code that runs locally to set up the app,
and act as an entrypoint to start Modal functions from. Note that regular
Modal functions can also be used as CLI entrypoints, but unlikelocal_entrypoint,
those functions are executed remotely directly. local_entrypoint Example Example @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint() def main Copy Copy    Copy You can call the function usingmodal rundirectly from the CLI: modal run modal run stub_module.pyCopy modal run stub_module.pyCopy modal run stub_module.pyCopy modal run stub_module.py modal run stub_module.py modal run stub_module.py Copy Copy    Copy Note that an explicitstub.run()is not needed, as anappis automatically created for you. stub.run() stub.run() app Multiple Entrypoints Multiple Entrypoints If you have multiplelocal_entrypointfunctions, you can qualify the name of your stub and function: local_entrypoint modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_function modal run stub_module.py::stub.some_other_function modal run stub_module.py::stub.some_other_function Copy Copy    Copy Parsing Arguments Parsing Arguments If your entrypoint function take arguments with primitive types,modal runautomatically parses them as
CLI options. For example, the following function can be called withmodal run stub_module.py --foo 1 --bar ""hello"": modal run modal run stub_module.py --foo 1 --bar ""hello"" @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Currently,str,int,float,bool, anddatetime.datetimeare supported. Usemodal run stub_module.py --helpfor more
information on usage. str int float bool datetime.datetime modal run stub_module.py --help ","Local_entrypoint is used to decorate a function to be used as a CLI entrypoint for a Modal App. These functions can be used to define code that runs locally to set up the app, and act as an entrypoint to start Modal functions from."
3,Is an explicit stub.run() needed in a Modal App?,modalStub localentrypoint,"deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: def local_entrypoint self, _warn_parentheses_missing=None, *, name:Optional[str] =None None Optional str None Callable Callable Any None Copy Copy    Copy Decorate a function to be used as a CLI entrypoint for a Modal App. These functions can be used to define code that runs locally to set up the app,
and act as an entrypoint to start Modal functions from. Note that regular
Modal functions can also be used as CLI entrypoints, but unlikelocal_entrypoint,
those functions are executed remotely directly. local_entrypoint Example Example @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint() def main Copy Copy    Copy You can call the function usingmodal rundirectly from the CLI: modal run modal run stub_module.pyCopy modal run stub_module.pyCopy modal run stub_module.pyCopy modal run stub_module.py modal run stub_module.py modal run stub_module.py Copy Copy    Copy Note that an explicitstub.run()is not needed, as anappis automatically created for you. stub.run() stub.run() app Multiple Entrypoints Multiple Entrypoints If you have multiplelocal_entrypointfunctions, you can qualify the name of your stub and function: local_entrypoint modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_function modal run stub_module.py::stub.some_other_function modal run stub_module.py::stub.some_other_function Copy Copy    Copy Parsing Arguments Parsing Arguments If your entrypoint function take arguments with primitive types,modal runautomatically parses them as
CLI options. For example, the following function can be called withmodal run stub_module.py --foo 1 --bar ""hello"": modal run modal run stub_module.py --foo 1 --bar ""hello"" @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Currently,str,int,float,bool, anddatetime.datetimeare supported. Usemodal run stub_module.py --helpfor more
information on usage. str int float bool datetime.datetime modal run stub_module.py --help ","No, an explicit stub.run() is not needed, as an app is automatically created for the users."
6,Which data types are supported if your entrypoint function takes arguments?,modalStub localentrypoint,"deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]:Copy deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: deflocal_entrypoint(self, _warn_parentheses_missing=None, *, name:Optional[str] =None) ->Callable[[Callable[...,Any]],None]: def local_entrypoint self, _warn_parentheses_missing=None, *, name:Optional[str] =None None Optional str None Callable Callable Any None Copy Copy    Copy Decorate a function to be used as a CLI entrypoint for a Modal App. These functions can be used to define code that runs locally to set up the app,
and act as an entrypoint to start Modal functions from. Note that regular
Modal functions can also be used as CLI entrypoints, but unlikelocal_entrypoint,
those functions are executed remotely directly. local_entrypoint Example Example @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call()Copy @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint()defmain():
    some_modal_function.call() @stub.local_entrypoint() def main Copy Copy    Copy You can call the function usingmodal rundirectly from the CLI: modal run modal run stub_module.pyCopy modal run stub_module.pyCopy modal run stub_module.pyCopy modal run stub_module.py modal run stub_module.py modal run stub_module.py Copy Copy    Copy Note that an explicitstub.run()is not needed, as anappis automatically created for you. stub.run() stub.run() app Multiple Entrypoints Multiple Entrypoints If you have multiplelocal_entrypointfunctions, you can qualify the name of your stub and function: local_entrypoint modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_functionCopy modal run stub_module.py::stub.some_other_function modal run stub_module.py::stub.some_other_function modal run stub_module.py::stub.some_other_function Copy Copy    Copy Parsing Arguments Parsing Arguments If your entrypoint function take arguments with primitive types,modal runautomatically parses them as
CLI options. For example, the following function can be called withmodal run stub_module.py --foo 1 --bar ""hello"": modal run modal run stub_module.py --foo 1 --bar ""hello"" @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar)Copy @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint()defmain(foo:int, bar:str):
    some_modal_function.call(foo, bar) @stub.local_entrypoint() def main foo:int, bar:str int str Copy Copy    Copy Currently,str,int,float,bool, anddatetime.datetimeare supported. Usemodal run stub_module.py --helpfor more
information on usage. str int float bool datetime.datetime modal run stub_module.py --help ","Currently, str, int, float, bool, and datetime.datetime are supported."
0,What is the purpose of the 'image' parameter in the given content?,modalStub cls,"defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: def cls self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build. None Optional None # The image to run as the container for the function Optional None # An optional Modal Secret with environment variables for the container Sequence  # Plural version of `secret` when multiple secrets are needed None # GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...) bool False # Whether to send the function over using cloudpickle. Sequence  Dict Union str # Deprecated, use `network_file_systems` instead Dict Union str bool False # Whether using network file systems from other regions is allowed. Dict Union str # Experimental. Do not use! Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Optional None # Reference to a Modal Proxy to use in front of this function. Optional Union int None # Number of times to retry each input in case of failure. Optional int None # Limit for max concurrent containers running the function. Optional int None # Number of inputs the container may fetch to run concurrently. Optional int None # Timeout for idle containers waiting for inputs to shut down. Optional int None # Maximum execution time of the function in seconds. bool False # Whether to run the function in interactive mode. Optional int None # An optional number of containers to always keep warm. Optional str None # Cloud provider to run the function on. Possible values are aws, gcp, oci, auto. Optional bool None # Whether to run and snapshot __enter__ as part of image build. Callable Copy Copy    Copy ",The 'image' parameter is used to specify the image to run as the container for the function.
3,"In the given context, what does 'interactive' refer to?",modalStub cls,"defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: def cls self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build. None Optional None # The image to run as the container for the function Optional None # An optional Modal Secret with environment variables for the container Sequence  # Plural version of `secret` when multiple secrets are needed None # GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...) bool False # Whether to send the function over using cloudpickle. Sequence  Dict Union str # Deprecated, use `network_file_systems` instead Dict Union str bool False # Whether using network file systems from other regions is allowed. Dict Union str # Experimental. Do not use! Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Optional None # Reference to a Modal Proxy to use in front of this function. Optional Union int None # Number of times to retry each input in case of failure. Optional int None # Limit for max concurrent containers running the function. Optional int None # Number of inputs the container may fetch to run concurrently. Optional int None # Timeout for idle containers waiting for inputs to shut down. Optional int None # Maximum execution time of the function in seconds. bool False # Whether to run the function in interactive mode. Optional int None # An optional number of containers to always keep warm. Optional str None # Cloud provider to run the function on. Possible values are aws, gcp, oci, auto. Optional bool None # Whether to run and snapshot __enter__ as part of image build. Callable Copy Copy    Copy ",'Interactive' is a boolean parameter that dictates whether to run the function in interactive mode or not.
6,What is the role of 'auto_snapshot_enabled' in the given content?,modalStub cls,"defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]:Copy defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: defcls(self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build.) ->Callable[[CLS_T], _Cls]: def cls self,
    _warn_parentheses_missing=None,
    *,
    image:Optional[_Image] =None,# The image to run as the container for the functionsecret:Optional[_Secret] =None,# An optional Modal Secret with environment variables for the containersecrets:Sequence[_Secret] = (),# Plural version of `secret` when multiple secrets are neededgpu: GPU_T =None,# GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...)serialized:bool=False,# Whether to send the function over using cloudpickle.mounts:Sequence[_Mount] = (),
    shared_volumes:Dict[Union[str, os.PathLike], _NetworkFileSystem
    ] = {},# Deprecated, use `network_file_systems` insteadnetwork_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    allow_cross_region_volumes:bool=False,# Whether using network file systems from other regions is allowed.volumes:Dict[Union[str, os.PathLike], _Volume] = {},# Experimental. Do not use!cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.proxy:Optional[_Proxy] =None,# Reference to a Modal Proxy to use in front of this function.retries:Optional[Union[int, Retries]] =None,# Number of times to retry each input in case of failure.concurrency_limit:Optional[int] =None,# Limit for max concurrent containers running the function.allow_concurrent_inputs:Optional[int] =None,# Number of inputs the container may fetch to run concurrently.container_idle_timeout:Optional[int] =None,# Timeout for idle containers waiting for inputs to shut down.timeout:Optional[int] =None,# Maximum execution time of the function in seconds.interactive:bool=False,# Whether to run the function in interactive mode.keep_warm:Optional[int] =None,# An optional number of containers to always keep warm.cloud:Optional[str] =None,# Cloud provider to run the function on. Possible values are aws, gcp, oci, auto.auto_snapshot_enabled:Optional[bool] =None,# Whether to run and snapshot __enter__ as part of image build. None Optional None # The image to run as the container for the function Optional None # An optional Modal Secret with environment variables for the container Sequence  # Plural version of `secret` when multiple secrets are needed None # GPU specification as string (""any"", ""T4"", ""A10G"", ...) or object (`modal.GPU.A100()`, ...) bool False # Whether to send the function over using cloudpickle. Sequence  Dict Union str # Deprecated, use `network_file_systems` instead Dict Union str bool False # Whether using network file systems from other regions is allowed. Dict Union str # Experimental. Do not use! Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Optional None # Reference to a Modal Proxy to use in front of this function. Optional Union int None # Number of times to retry each input in case of failure. Optional int None # Limit for max concurrent containers running the function. Optional int None # Number of inputs the container may fetch to run concurrently. Optional int None # Timeout for idle containers waiting for inputs to shut down. Optional int None # Maximum execution time of the function in seconds. bool False # Whether to run the function in interactive mode. Optional int None # An optional number of containers to always keep warm. Optional str None # Cloud provider to run the function on. Possible values are aws, gcp, oci, auto. Optional bool None # Whether to run and snapshot __enter__ as part of image build. Callable Copy Copy    Copy ",The 'auto_snapshot_enabled' parameter decides whether to run and snapshot __enter__ as part of image build or not.
0,"What does the ""defspawn_sandbox"" function do?",modalStub spawnsandbox,"defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: def spawn_sandbox self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit. str Optional None # The image to run as the container for the sandbox. Sequence  # Mounts to attach to the sandbox. Sequence  # Environment variables to inject into the sandbox. Dict Union str Optional int None # Maximum execution time of the sandbox in seconds. Optional str None # Working directory of the sandbox. None Optional str None Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Copy Copy    Copy Sandboxes are a way to run arbitrary commands in dynamically defined environments. This function returns aSandboxHandle, which can be used to interact with the running sandbox. SandboxHandle Refer to thedocson how to spawn and use sandboxes. docs modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stub name app app_id description set_description get_objects is_inside run registered_functions registered_classes registered_entrypoints registered_web_endpoints local_entrypoint function cls spawn_sandbox CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","It provides a way to run arbitrary commands in dynamically defined environments, returning a SandboxHandle to interact with the running sandbox."
3,"What is the function of ""cloud"" argument in defspawn_sandbox function?",modalStub spawnsandbox,"defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: def spawn_sandbox self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit. str Optional None # The image to run as the container for the sandbox. Sequence  # Mounts to attach to the sandbox. Sequence  # Environment variables to inject into the sandbox. Dict Union str Optional int None # Maximum execution time of the sandbox in seconds. Optional str None # Working directory of the sandbox. None Optional str None Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Copy Copy    Copy Sandboxes are a way to run arbitrary commands in dynamically defined environments. This function returns aSandboxHandle, which can be used to interact with the running sandbox. SandboxHandle Refer to thedocson how to spawn and use sandboxes. docs modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stub name app app_id description set_description get_objects is_inside run registered_functions registered_classes registered_entrypoints registered_web_endpoints local_entrypoint function cls spawn_sandbox CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""cloud"" argument is used to specify the type of cloud environment in which the sandbox is to run."
6,"What is signified by the phrase ""This is a soft limit"" in relation to the ""cpu"" and ""memory"" arguments in the defspawn_sandbox function?",modalStub spawnsandbox,"defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: def spawn_sandbox self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit. str Optional None # The image to run as the container for the sandbox. Sequence  # Mounts to attach to the sandbox. Sequence  # Environment variables to inject into the sandbox. Dict Union str Optional int None # Maximum execution time of the sandbox in seconds. Optional str None # Working directory of the sandbox. None Optional str None Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Copy Copy    Copy Sandboxes are a way to run arbitrary commands in dynamically defined environments. This function returns aSandboxHandle, which can be used to interact with the running sandbox. SandboxHandle Refer to thedocson how to spawn and use sandboxes. docs modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stub name app app_id description set_description get_objects is_inside run registered_functions registered_classes registered_entrypoints registered_web_endpoints local_entrypoint function cls spawn_sandbox CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","This phrase means that the values for ""cpu"" and ""memory"" are not strict constraints; they are flexible limits that the system may surpass if necessary and if resources allow."
0,What can the spawn_sandbox function be used for?,modalStub spawnsandbox,"defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: def spawn_sandbox self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit. str Optional None # The image to run as the container for the sandbox. Sequence  # Mounts to attach to the sandbox. Sequence  # Environment variables to inject into the sandbox. Dict Union str Optional int None # Maximum execution time of the sandbox in seconds. Optional str None # Working directory of the sandbox. None Optional str None Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Copy Copy    Copy Sandboxes are a way to run arbitrary commands in dynamically defined environments. This function returns aSandboxHandle, which can be used to interact with the running sandbox. SandboxHandle Refer to thedocson how to spawn and use sandboxes. docs modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stub name app app_id description set_description get_objects is_inside run registered_functions registered_classes registered_entrypoints registered_web_endpoints local_entrypoint function cls spawn_sandbox CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The spawn_sandbox function can be used to run arbitrary commands in dynamically defined environments.
3,What are the arguments of the spawn_sandbox function?,modalStub spawnsandbox,"defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: def spawn_sandbox self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit. str Optional None # The image to run as the container for the sandbox. Sequence  # Mounts to attach to the sandbox. Sequence  # Environment variables to inject into the sandbox. Dict Union str Optional int None # Maximum execution time of the sandbox in seconds. Optional str None # Working directory of the sandbox. None Optional str None Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Copy Copy    Copy Sandboxes are a way to run arbitrary commands in dynamically defined environments. This function returns aSandboxHandle, which can be used to interact with the running sandbox. SandboxHandle Refer to thedocson how to spawn and use sandboxes. docs modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stub name app app_id description set_description get_objects is_inside run registered_functions registered_classes registered_entrypoints registered_web_endpoints local_entrypoint function cls spawn_sandbox CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The arguments of the spawn_sandbox function include entrypoint_args, image, mounts, secrets, network_file_systems, timeout, workdir, GPU, cloud, CPU, memory."
6,What does the 'timeout' argument in the spawn_sandbox function specify?,modalStub spawnsandbox,"defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox:Copy defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: defspawn_sandbox(self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit.) -> _Sandbox: def spawn_sandbox self,
    *entrypoint_args:str,
    image:Optional[_Image] =None,# The image to run as the container for the sandbox.mounts:Sequence[_Mount] = (),# Mounts to attach to the sandbox.secrets:Sequence[_Secret] = (),# Environment variables to inject into the sandbox.network_file_systems:Dict[Union[str, os.PathLike], _NetworkFileSystem] = {},
    timeout:Optional[int] =None,# Maximum execution time of the sandbox in seconds.workdir:Optional[str] =None,# Working directory of the sandbox.gpu: GPU_T =None,
    cloud:Optional[str] =None,
    cpu:Optional[float] =None,# How many CPU cores to request. This is a soft limit.memory:Optional[int] =None,# How much memory to request, in MiB. This is a soft limit. str Optional None # The image to run as the container for the sandbox. Sequence  # Mounts to attach to the sandbox. Sequence  # Environment variables to inject into the sandbox. Dict Union str Optional int None # Maximum execution time of the sandbox in seconds. Optional str None # Working directory of the sandbox. None Optional str None Optional float None # How many CPU cores to request. This is a soft limit. Optional int None # How much memory to request, in MiB. This is a soft limit. Copy Copy    Copy Sandboxes are a way to run arbitrary commands in dynamically defined environments. This function returns aSandboxHandle, which can be used to interact with the running sandbox. SandboxHandle Refer to thedocson how to spawn and use sandboxes. docs modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stubnameappapp_iddescriptionset_descriptionget_objectsis_insiderunregistered_functionsregistered_classesregistered_entrypointsregistered_web_endpointslocal_entrypointfunctionclsspawn_sandbox modal.Stub name app app_id description set_description get_objects is_inside run registered_functions registered_classes registered_entrypoints registered_web_endpoints local_entrypoint function cls spawn_sandbox CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'timeout' argument specifies the maximum execution time of the sandbox in seconds.
0,What is the main advantage of Text Generation Inference (TGI)?,Hosting any LLaMA 2 model with Text Generation Inference TGI,"In this example, we show how to run an optimized inference server usingText Generation Inference (TGI)with performance advantages over standard text generation pipelines including: Text Generation Inference (TGI) continuous batching, so multiple generations can take place at the same time on a single containerPagedAttention, an optimization that increases throughput. continuous batching, so multiple generations can take place at the same time on a single container PagedAttention, an optimization that increases throughput. This example deployment,accessible here, can serve LLaMA 2 70B with
70 second cold starts, up to 200 tokens/s of throughput and per-token latency of 55ms. accessible here ","TGI has performance advantages over standard text generation pipelines including continuous batching which allows for multiple generations to occur at the same time on a single container, and PagedAttention, an optimization that increases throughput."
3,What does PagedAttention do in TGI?,Hosting any LLaMA 2 model with Text Generation Inference TGI,"In this example, we show how to run an optimized inference server usingText Generation Inference (TGI)with performance advantages over standard text generation pipelines including: Text Generation Inference (TGI) continuous batching, so multiple generations can take place at the same time on a single containerPagedAttention, an optimization that increases throughput. continuous batching, so multiple generations can take place at the same time on a single container PagedAttention, an optimization that increases throughput. This example deployment,accessible here, can serve LLaMA 2 70B with
70 second cold starts, up to 200 tokens/s of throughput and per-token latency of 55ms. accessible here ",PagedAttention is an optimization that increases throughput in TGI.
6,Where can one access the example deployment of the hosting LLaMA 2 model with Text Generation Inference?,Hosting any LLaMA 2 model with Text Generation Inference TGI,"In this example, we show how to run an optimized inference server usingText Generation Inference (TGI)with performance advantages over standard text generation pipelines including: Text Generation Inference (TGI) continuous batching, so multiple generations can take place at the same time on a single containerPagedAttention, an optimization that increases throughput. continuous batching, so multiple generations can take place at the same time on a single container PagedAttention, an optimization that increases throughput. This example deployment,accessible here, can serve LLaMA 2 70B with
70 second cold starts, up to 200 tokens/s of throughput and per-token latency of 55ms. accessible here ",The example deployment for the LLaMA 2 model with TGI is accessible here.
0,What is the advantage of creating a Modal image with the Huggingface model cache pre-populated?,Hosting any LLaMA 2 model with Text Generation Inference TGI Define a container image,"We want to create a Modal image which has the Huggingface model cache pre-populated.
The benefit of this is that the container no longer has to re-download the model from Huggingface -
instead, it will take advantage of Modal’s internal filesystem for faster cold starts. On
the largest 70B model, the 135GB model can be loaded in as little as 70 seconds. Download the weights We can use the included utilities to download the model weights (and convert to safetensors, if necessary)
as part of the image build. defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) def download_model import ""text-generation-server"" ""download-weights"" Copy Copy    Copy Image definition We’ll start from a Dockerhub image recommended by TGI, and override the defaultENTRYPOINTfor
Modal to run its own which enables seamless serverless deployments. ENTRYPOINT Next we run the download step to pre-populate the image with our model weights. For this step to work on a gated model such as LLaMA 2, the HUGGING_FACE_HUB_TOKEN environment
variable must be set (reference).
Aftercreating a HuggingFace access token,
head to thesecrets pageto create a Modal secret. reference creating a HuggingFace access token secrets page The key should beHUGGING_FACE_HUB_TOKENand the value should be your access token. HUGGING_FACE_HUB_TOKEN Finally, we install thetext-generationclient to interface with TGI’s Rust webserver overlocalhost. text-generation localhost image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) ""ghcr.io/huggingface/text-generation-inference:1.0.3"" ""ENTRYPOINT []"" ""huggingface"" ""text-generation"" ""example-tgi-"" ""/"" 1 Copy Copy    Copy ","The benefit of this is that the container no longer has to re-download the model from Huggingface, instead, it will take advantage of Modal’s internal filesystem for faster cold starts."
3,What needs to be set for the download step to work on a gated model such as LLaMA 2?,Hosting any LLaMA 2 model with Text Generation Inference TGI Define a container image,"We want to create a Modal image which has the Huggingface model cache pre-populated.
The benefit of this is that the container no longer has to re-download the model from Huggingface -
instead, it will take advantage of Modal’s internal filesystem for faster cold starts. On
the largest 70B model, the 135GB model can be loaded in as little as 70 seconds. Download the weights We can use the included utilities to download the model weights (and convert to safetensors, if necessary)
as part of the image build. defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) def download_model import ""text-generation-server"" ""download-weights"" Copy Copy    Copy Image definition We’ll start from a Dockerhub image recommended by TGI, and override the defaultENTRYPOINTfor
Modal to run its own which enables seamless serverless deployments. ENTRYPOINT Next we run the download step to pre-populate the image with our model weights. For this step to work on a gated model such as LLaMA 2, the HUGGING_FACE_HUB_TOKEN environment
variable must be set (reference).
Aftercreating a HuggingFace access token,
head to thesecrets pageto create a Modal secret. reference creating a HuggingFace access token secrets page The key should beHUGGING_FACE_HUB_TOKENand the value should be your access token. HUGGING_FACE_HUB_TOKEN Finally, we install thetext-generationclient to interface with TGI’s Rust webserver overlocalhost. text-generation localhost image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) ""ghcr.io/huggingface/text-generation-inference:1.0.3"" ""ENTRYPOINT []"" ""huggingface"" ""text-generation"" ""example-tgi-"" ""/"" 1 Copy Copy    Copy ","For this step to work on a gated model such as LLaMA 2, the HUGGING_FACE_HUB_TOKEN environment variable must be set."
6,What is installed to interface with TGI’s Rust webserver over localhost?,Hosting any LLaMA 2 model with Text Generation Inference TGI Define a container image,"We want to create a Modal image which has the Huggingface model cache pre-populated.
The benefit of this is that the container no longer has to re-download the model from Huggingface -
instead, it will take advantage of Modal’s internal filesystem for faster cold starts. On
the largest 70B model, the 135GB model can be loaded in as little as 70 seconds. Download the weights We can use the included utilities to download the model weights (and convert to safetensors, if necessary)
as part of the image build. defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID])Copy defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) defdownload_model():importsubprocess

    subprocess.run([""text-generation-server"",""download-weights"", MODEL_ID]) def download_model import ""text-generation-server"" ""download-weights"" Copy Copy    Copy Image definition We’ll start from a Dockerhub image recommended by TGI, and override the defaultENTRYPOINTfor
Modal to run its own which enables seamless serverless deployments. ENTRYPOINT Next we run the download step to pre-populate the image with our model weights. For this step to work on a gated model such as LLaMA 2, the HUGGING_FACE_HUB_TOKEN environment
variable must be set (reference).
Aftercreating a HuggingFace access token,
head to thesecrets pageto create a Modal secret. reference creating a HuggingFace access token secrets page The key should beHUGGING_FACE_HUB_TOKENand the value should be your access token. HUGGING_FACE_HUB_TOKEN Finally, we install thetext-generationclient to interface with TGI’s Rust webserver overlocalhost. text-generation localhost image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image)Copy image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) image = (
    Image.from_registry(""ghcr.io/huggingface/text-generation-inference:1.0.3"")
    .dockerfile_commands(""ENTRYPOINT []"")
    .run_function(download_model, secret=Secret.from_name(""huggingface""))
    .pip_install(""text-generation"")
)

stub = Stub(""example-tgi-""+ MODEL_ID.split(""/"")[-1], image=image) ""ghcr.io/huggingface/text-generation-inference:1.0.3"" ""ENTRYPOINT []"" ""huggingface"" ""text-generation"" ""example-tgi-"" ""/"" 1 Copy Copy    Copy ",The text-generation client is installed to interface with TGI’s Rust webserver over localhost.
0,What does the __enter__ method do in the context of this LLaMA 2 model?,Hosting any LLaMA 2 model with Text Generation Inference TGI The model class,"The inference function is best represented with Modal’sclass syntax.
The class syntax is a special representation for a Modal function which splits logic into two parts: class syntax the__enter__method, which runs once per container when it starts up, andthe@method()function, which runs per inference request. the__enter__method, which runs once per container when it starts up, and __enter__ the@method()function, which runs per inference request. @method() This means the model is loaded into the GPUs, and the backend for TGI is launched just once when each
container starts, and this state is cached for each subsequent invocation of the function.
Note that on start-up, we must wait for the Rust webserver to accept connections before considering the
container ready. Here, we also specify the secret so theHUGGING_FACE_HUB_TOKENenvironment variable is setspecify how many A100s we need per containerspecify that each container is allowed to handle up to 10 inputs (i.e. requests) simultaneouslykeep idle containers for 10 minutes before spinning downlift the timeout of each request. specify the secret so theHUGGING_FACE_HUB_TOKENenvironment variable is set HUGGING_FACE_HUB_TOKEN specify how many A100s we need per container specify that each container is allowed to handle up to 10 inputs (i.e. requests) simultaneously keep idle containers for 10 minutes before spinning down lift the timeout of each request. @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,) secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60, ""huggingface"" ""huggingface"" 10 60 10 60 60 class Model def __enter__ self import import import from import ""text-generation-launcher"" ""http://127.0.0.1:8000"" 60 """"""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """""" # Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs. def webserver_ready try ""127.0.0.1"" 8000 1 return True except # Check if launcher webserving process has exited. # If so, a connection can never be made. if is not None raise f""launcher exited unexpectedly with code{retcode}"" {retcode} return False while not 1.0 print ""Webserver ready!"" def __exit__ self, _exc_type, _exc_value, _traceback @method() async def generate self, question:str str format """" await 1024 return @method() async def generate_stream self, question:str str format """" async for in 1024 if not yield Copy Copy    Copy ","The __enter__ method runs once per container when it starts up, loading the model into the GPUs and launching the backend for Text Generation Inference (TGI)."
3,What happens when the container starts up?,Hosting any LLaMA 2 model with Text Generation Inference TGI The model class,"The inference function is best represented with Modal’sclass syntax.
The class syntax is a special representation for a Modal function which splits logic into two parts: class syntax the__enter__method, which runs once per container when it starts up, andthe@method()function, which runs per inference request. the__enter__method, which runs once per container when it starts up, and __enter__ the@method()function, which runs per inference request. @method() This means the model is loaded into the GPUs, and the backend for TGI is launched just once when each
container starts, and this state is cached for each subsequent invocation of the function.
Note that on start-up, we must wait for the Rust webserver to accept connections before considering the
container ready. Here, we also specify the secret so theHUGGING_FACE_HUB_TOKENenvironment variable is setspecify how many A100s we need per containerspecify that each container is allowed to handle up to 10 inputs (i.e. requests) simultaneouslykeep idle containers for 10 minutes before spinning downlift the timeout of each request. specify the secret so theHUGGING_FACE_HUB_TOKENenvironment variable is set HUGGING_FACE_HUB_TOKEN specify how many A100s we need per container specify that each container is allowed to handle up to 10 inputs (i.e. requests) simultaneously keep idle containers for 10 minutes before spinning down lift the timeout of each request. @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,) secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60, ""huggingface"" ""huggingface"" 10 60 10 60 60 class Model def __enter__ self import import import from import ""text-generation-launcher"" ""http://127.0.0.1:8000"" 60 """"""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """""" # Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs. def webserver_ready try ""127.0.0.1"" 8000 1 return True except # Check if launcher webserving process has exited. # If so, a connection can never be made. if is not None raise f""launcher exited unexpectedly with code{retcode}"" {retcode} return False while not 1.0 print ""Webserver ready!"" def __exit__ self, _exc_type, _exc_value, _traceback @method() async def generate self, question:str str format """" await 1024 return @method() async def generate_stream self, question:str str format """" async for in 1024 if not yield Copy Copy    Copy ","When the container starts up, the model is loaded into the GPUs, the backend for Text Generation Inference is launched, and the rust webserver is prepared to accept connections."
6,What are some of the container settings specified in the code?,Hosting any LLaMA 2 model with Text Generation Inference TGI The model class,"The inference function is best represented with Modal’sclass syntax.
The class syntax is a special representation for a Modal function which splits logic into two parts: class syntax the__enter__method, which runs once per container when it starts up, andthe@method()function, which runs per inference request. the__enter__method, which runs once per container when it starts up, and __enter__ the@method()function, which runs per inference request. @method() This means the model is loaded into the GPUs, and the backend for TGI is launched just once when each
container starts, and this state is cached for each subsequent invocation of the function.
Note that on start-up, we must wait for the Rust webserver to accept connections before considering the
container ready. Here, we also specify the secret so theHUGGING_FACE_HUB_TOKENenvironment variable is setspecify how many A100s we need per containerspecify that each container is allowed to handle up to 10 inputs (i.e. requests) simultaneouslykeep idle containers for 10 minutes before spinning downlift the timeout of each request. specify the secret so theHUGGING_FACE_HUB_TOKENenvironment variable is set HUGGING_FACE_HUB_TOKEN specify how many A100s we need per container specify that each container is allowed to handle up to 10 inputs (i.e. requests) simultaneously keep idle containers for 10 minutes before spinning down lift the timeout of each request. @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.textCopy @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,)classModel:def__enter__(self):importsocketimportsubprocessimporttimefromtext_generationimportAsyncClient

        self.launcher = subprocess.Popen(
            [""text-generation-launcher""] + LAUNCH_FLAGS
        )
        self.client = AsyncClient(""http://127.0.0.1:8000"", timeout=60)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""# Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs.defwebserver_ready():try:
                socket.create_connection((""127.0.0.1"",8000), timeout=1).close()returnTrueexcept(socket.timeout, ConnectionRefusedError):# Check if launcher webserving process has exited.# If so, a connection can never be made.retcode = self.launcher.poll()ifretcodeisnotNone:raiseRuntimeError(f""launcher exited unexpectedly with code{retcode}"")returnFalsewhilenotwebserver_ready():
            time.sleep(1.0)print(""Webserver ready!"")def__exit__(self, _exc_type, _exc_value, _traceback):
        self.launcher.terminate()@method()asyncdefgenerate(self, question:str):
        prompt = self.template.format(system="""", user=question)
        result =awaitself.client.generate(prompt, max_new_tokens=1024)returnresult.generated_text@method()asyncdefgenerate_stream(self, question:str):
        prompt = self.template.format(system="""", user=question)asyncforresponseinself.client.generate_stream(
            prompt, max_new_tokens=1024):ifnotresponse.token.special:yieldresponse.token.text @stub.cls(secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60,) secret=Secret.from_name(""huggingface""),
    gpu=GPU_CONFIG,
    allow_concurrent_inputs=10,
    container_idle_timeout=60*10,
    timeout=60*60, ""huggingface"" ""huggingface"" 10 60 10 60 60 class Model def __enter__ self import import import from import ""text-generation-launcher"" ""http://127.0.0.1:8000"" 60 """"""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """""" # Poll until webserver at 127.0.0.1:8000 accepts connections before running inputs. def webserver_ready try ""127.0.0.1"" 8000 1 return True except # Check if launcher webserving process has exited. # If so, a connection can never be made. if is not None raise f""launcher exited unexpectedly with code{retcode}"" {retcode} return False while not 1.0 print ""Webserver ready!"" def __exit__ self, _exc_type, _exc_value, _traceback @method() async def generate self, question:str str format """" await 1024 return @method() async def generate_stream self, question:str str format """" async for in 1024 if not yield Copy Copy    Copy ","Some container settings specified in the code include allowing up to 10 concurrent inputs, setting a container idle timeout of 10 minutes, and lifting the request timeout."
0,What is the purpose of the local_entrypoint in the provided content?,Hosting any LLaMA 2 model with Text Generation Inference TGI Run the model,"We define alocal_entrypointto invoke
our remote function. You can run this script locally withmodal run text_generation_inference.py. local_entrypoint local_entrypoint modal run text_generation_inference.py @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint() def main print ""Implement a Python function to compute the Fibonacci numbers."" Copy Copy    Copy ",The purpose of local_entrypoint is to invoke the remote function that runs the text generation model.
3,What model is being run in the defined local_entrypoint function?,Hosting any LLaMA 2 model with Text Generation Inference TGI Run the model,"We define alocal_entrypointto invoke
our remote function. You can run this script locally withmodal run text_generation_inference.py. local_entrypoint local_entrypoint modal run text_generation_inference.py @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint() def main print ""Implement a Python function to compute the Fibonacci numbers."" Copy Copy    Copy ",The LLaMA 2 model with Text Generation Inference (TGI) is being run.
6,What command is used to run the local script for text generation inference?,Hosting any LLaMA 2 model with Text Generation Inference TGI Run the model,"We define alocal_entrypointto invoke
our remote function. You can run this script locally withmodal run text_generation_inference.py. local_entrypoint local_entrypoint modal run text_generation_inference.py @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    )Copy @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint()defmain():print(
        Model().generate.remote(""Implement a Python function to compute the Fibonacci numbers."")
    ) @stub.local_entrypoint() def main print ""Implement a Python function to compute the Fibonacci numbers."" Copy Copy    Copy ","The command used is ""modal run text_generation_inference.py""."
0,What is the function of the text_generation_inference.py file?,Hosting any LLaMA 2 model with Text Generation Inference TGI Serve the model,"Once we deploy this model withmodal deploy text_generation_inference.py, we can serve it
behind an ASGI app front-end. The front-end code (a single file of Alpine.js) is availablehere. modal deploy text_generation_inference.py here You can try our deploymenthere. here frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app ""llm-frontend"" @stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,) mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10, frontend_path, remote_path=""/assets"" ""/assets"" 1 10 60 10 @asgi_app(label=""tgi-app"") label=""tgi-app"" ""tgi-app"" def app import import import from import @web_app.get(""/stats"") ""/stats"" ""/stats"" async def stats await return ""backlog"" ""num_total_runners"" @web_app.get(""/completion/{question}"") ""/completion/{question}"" ""/completion/{question}"" async def completion question:str str from import async def generate async for in yield f""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n"" {json.dumps(dict(text=text), ensure_ascii=False)} dict False return ""text/event-stream"" ""/"" ""/assets"" True return Copy Copy    Copy ",The text_generation_inference.py file is used to deploy the LLaMA 2 model with Text Generation Inference. 
3,Does this model allow concurrent inputs? ,Hosting any LLaMA 2 model with Text Generation Inference TGI Serve the model,"Once we deploy this model withmodal deploy text_generation_inference.py, we can serve it
behind an ASGI app front-end. The front-end code (a single file of Alpine.js) is availablehere. modal deploy text_generation_inference.py here You can try our deploymenthere. here frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app ""llm-frontend"" @stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,) mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10, frontend_path, remote_path=""/assets"" ""/assets"" 1 10 60 10 @asgi_app(label=""tgi-app"") label=""tgi-app"" ""tgi-app"" def app import import import from import @web_app.get(""/stats"") ""/stats"" ""/stats"" async def stats await return ""backlog"" ""num_total_runners"" @web_app.get(""/completion/{question}"") ""/completion/{question}"" ""/completion/{question}"" async def completion question:str str from import async def generate async for in yield f""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n"" {json.dumps(dict(text=text), ensure_ascii=False)} dict False return ""text/event-stream"" ""/"" ""/assets"" True return Copy Copy    Copy ","Yes, this model allows for up to 10 concurrent inputs."
6,"What is achieved with the function ""generate_stream.get_current_stats.aio()""?",Hosting any LLaMA 2 model with Text Generation Inference TGI Serve the model,"Once we deploy this model withmodal deploy text_generation_inference.py, we can serve it
behind an ASGI app front-end. The front-end code (a single file of Alpine.js) is availablehere. modal deploy text_generation_inference.py here You can try our deploymenthere. here frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_appCopy frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app frontend_path = Path(__file__).parent /""llm-frontend""@stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,)@asgi_app(label=""tgi-app"")defapp():importjsonimportfastapiimportfastapi.staticfilesfromfastapi.responsesimportStreamingResponse

    web_app = fastapi.FastAPI()@web_app.get(""/stats"")asyncdefstats():
        stats =awaitModel().generate_stream.get_current_stats.aio()return{""backlog"": stats.backlog,""num_total_runners"": stats.num_total_runners,
        }@web_app.get(""/completion/{question}"")asyncdefcompletion(question:str):fromurllib.parseimportunquoteasyncdefgenerate():asyncfortextinModel().generate_stream.remote_gen.aio(
                unquote(question)
            ):yieldf""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n""returnStreamingResponse(generate(), media_type=""text/event-stream"")

    web_app.mount(""/"", fastapi.staticfiles.StaticFiles(directory=""/assets"", html=True)
    )returnweb_app ""llm-frontend"" @stub.function(mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10,) mounts=[Mount.from_local_dir(frontend_path, remote_path=""/assets"")],
    keep_warm=1,
    allow_concurrent_inputs=10,
    timeout=60*10, frontend_path, remote_path=""/assets"" ""/assets"" 1 10 60 10 @asgi_app(label=""tgi-app"") label=""tgi-app"" ""tgi-app"" def app import import import from import @web_app.get(""/stats"") ""/stats"" ""/stats"" async def stats await return ""backlog"" ""num_total_runners"" @web_app.get(""/completion/{question}"") ""/completion/{question}"" ""/completion/{question}"" async def completion question:str str from import async def generate async for in yield f""data:{json.dumps(dict(text=text), ensure_ascii=False)}\n\n"" {json.dumps(dict(text=text), ensure_ascii=False)} dict False return ""text/event-stream"" ""/"" ""/assets"" True return Copy Copy    Copy ","This function retrieves the current statistics of the model's generation stream, providing information about the backlog and the total number of runners."
0,What does the LLaMA 2 model with TGI allow you to do?,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy ","It allows you to host the model and invoke inference from other apps, sharing the same pool of GPU containers with all other apps you might need."
3,How can one invoke the LLaMA 2 model for text generation inference in Python?,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy ","By using the command `f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")` and then `f.remote(""What is the story about the fox and grapes?"")` to extract the story about the fox and grapes. "
6,What is the process to run the text_generation_inference.py file using Modal?,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy ",Clone the modal-examples repository and run the text_generation_inference.py file using the command `$git clone https://github.com/modal-labs/modal-examples$ cd modal-examples$ modal run 06_gpu_and_ml/text_generation_inference.py`.
0,What is the LLaMA 2 model being hosted with?,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/text_generation_inference.py $ modal run 06_gpu_and_ml/text_generation_inference.py modal run 06_gpu_and_ml/text_generation_inference.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The LLaMA 2 model is being hosted with Text Generation Inference (TGI).
3,What is the code used to look up and generate a function in the model?,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/text_generation_inference.py $ modal run 06_gpu_and_ml/text_generation_inference.py modal run 06_gpu_and_ml/text_generation_inference.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The code used to look up and generate a function in the model is: 
4,>>> import modal,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/text_generation_inference.py $ modal run 06_gpu_and_ml/text_generation_inference.py modal run 06_gpu_and_ml/text_generation_inference.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",">>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")"
7,What command is used to clone the modal-examples repository and run the text_generation_inference.py file?,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/text_generation_inference.py $ modal run 06_gpu_and_ml/text_generation_inference.py modal run 06_gpu_and_ml/text_generation_inference.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The command used to clone the modal-examples repository and run the text_generation_inference.py file is: 
8,$git clone https://github.com/modal-labs/modal-examples,Hosting any LLaMA 2 model with Text Generation Inference TGI Invoke the model from other apps,"Once the model is deployed, we can invoke inference from other apps, sharing the same pool
of GPU containers with all other apps we might need. $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ...Copy $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... $ python
>>> import modal
>>> f = modal.Function.lookup(""example-tgi-Llama-2-70b-chat-hf"", ""Model.generate"")
>>> f.remote(""What is the story about the fox and grapes?"")
'The story about the fox and grapes ... Copy Copy    Copy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other appsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Hosting any LLaMA 2 model with Text Generation Inference (TGI)SetupDefine a container imageDownload the weightsImage definitionThe model classRun the modelServe the modelInvoke the model from other apps Hosting any LLaMA 2 model with Text Generation Inference (TGI) Setup Define a container image Download the weights Image definition The model class Run the model Serve the model Invoke the model from other apps Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/text_generation_inference.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/text_generation_inference.py $ modal run 06_gpu_and_ml/text_generation_inference.py modal run 06_gpu_and_ml/text_generation_inference.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",$cd modal-examples
0,What is the purpose of this guide?,A simple web scraper,"In this guide we’ll introduce you to Modal by writing a simple web scraper.
We’ll explain the foundations of a Modal application step by step. ",The purpose of this guide is to introduce you to Modal by writing a simple web scraper.
3,What tool will be used to write a simple web scraper?,A simple web scraper,"In this guide we’ll introduce you to Modal by writing a simple web scraper.
We’ll explain the foundations of a Modal application step by step. ","In this guide, Modal will be used to write a simple web scraper."
6,What is the main teaching method of this guide?,A simple web scraper,"In this guide we’ll introduce you to Modal by writing a simple web scraper.
We’ll explain the foundations of a Modal application step by step. ",The main teaching method of this guide is a step by step approach.
0,What programming language is used in the provided content?,A simple web scraper Finding links,"First, we create an empty Python filescrape.py. This file will contain our
application code. Lets write some basic Python code to fetch the contents of a
web page and print the links (href attributes) it finds in the document: scrape.py importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) import import import def get_links url ""utf8"" for match in 'href=""(.*?)""' match 1 return if ""__main__"" 1 print Copy Copy    Copy Now obviously this is just pure standard library Python code, and you can run it
on your machine: $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] Copy Copy    Copy ",Python
3,What does the 'urlopen' method do in the Python code?,A simple web scraper Finding links,"First, we create an empty Python filescrape.py. This file will contain our
application code. Lets write some basic Python code to fetch the contents of a
web page and print the links (href attributes) it finds in the document: scrape.py importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) import import import def get_links url ""utf8"" for match in 'href=""(.*?)""' match 1 return if ""__main__"" 1 print Copy Copy    Copy Now obviously this is just pure standard library Python code, and you can run it
on your machine: $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] Copy Copy    Copy ",The 'urlopen' method is used to open the URL passed to it and fetch the content of the web page.
6,How does the code decode the response retrieved from the url?,A simple web scraper Finding links,"First, we create an empty Python filescrape.py. This file will contain our
application code. Lets write some basic Python code to fetch the contents of a
web page and print the links (href attributes) it finds in the document: scrape.py importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links)Copy importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) importreimportsysimporturllib.requestdefget_links(url):
    response = urllib.request.urlopen(url)
    html = response.read().decode(""utf8"")
    links = []formatchinre.finditer('href=""(.*?)""', html):
        links.append(match.group(1))returnlinksif__name__ ==""__main__"":
    links = get_links(sys.argv[1])print(links) import import import def get_links url ""utf8"" for match in 'href=""(.*?)""' match 1 return if ""__main__"" 1 print Copy Copy    Copy Now obviously this is just pure standard library Python code, and you can run it
on your machine: $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example']Copy $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] $ python scrape.py http://example.com
['https://www.iana.org/domains/example'] Copy Copy    Copy ","The response from the URL is decoded to ""utf8"" using the 'decode' method."
0,What is the purpose of using get_links function in Modal?,A simple web scraper Running it in Modal,"To make theget_linksfunction run in Modal instead of your local machine, all
you need to do is get_links ImportmodalCreate amodal.StubinstanceAdd a@stub.function()annotation to your functionReplace theif __name__ == ""__main__"":block with a function decorated with@stub.local_entrypoint()Callget_linksusingget_links.remote Importmodal modal Create amodal.Stubinstance modal.Stub modal.Stub Add a@stub.function()annotation to your function @stub.function() Replace theif __name__ == ""__main__"":block with a function decorated with@stub.local_entrypoint() if __name__ == ""__main__"": @stub.local_entrypoint() @stub.local_entrypoint() Callget_linksusingget_links.remote get_links get_links.remote importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) import import import ""link-scraper"" @stub.function() def get_links url @stub.local_entrypoint() def main url print Copy Copy    Copy You can now run this with the Modal CLI, usingmodal runinstead ofpython.
This time, you’ll see additional progress indicators while the script is
running: modal run python $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. Copy Copy    Copy ",The purpose is to run the web scraping function in Modal instead of the user's local machine.
3,"How do you initiate a function to run in Modal, as opposed to running locally in Python?",A simple web scraper Running it in Modal,"To make theget_linksfunction run in Modal instead of your local machine, all
you need to do is get_links ImportmodalCreate amodal.StubinstanceAdd a@stub.function()annotation to your functionReplace theif __name__ == ""__main__"":block with a function decorated with@stub.local_entrypoint()Callget_linksusingget_links.remote Importmodal modal Create amodal.Stubinstance modal.Stub modal.Stub Add a@stub.function()annotation to your function @stub.function() Replace theif __name__ == ""__main__"":block with a function decorated with@stub.local_entrypoint() if __name__ == ""__main__"": @stub.local_entrypoint() @stub.local_entrypoint() Callget_linksusingget_links.remote get_links get_links.remote importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) import import import ""link-scraper"" @stub.function() def get_links url @stub.local_entrypoint() def main url print Copy Copy    Copy You can now run this with the Modal CLI, usingmodal runinstead ofpython.
This time, you’ll see additional progress indicators while the script is
running: modal run python $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. Copy Copy    Copy ","In order to initiate a function to run in Modal, replace the 'if __name__ == ""__main__"":' block with a function decorated with @stub.local_entrypoint()."
6,What's the name given to the Stub instance in this example?,A simple web scraper Running it in Modal,"To make theget_linksfunction run in Modal instead of your local machine, all
you need to do is get_links ImportmodalCreate amodal.StubinstanceAdd a@stub.function()annotation to your functionReplace theif __name__ == ""__main__"":block with a function decorated with@stub.local_entrypoint()Callget_linksusingget_links.remote Importmodal modal Create amodal.Stubinstance modal.Stub modal.Stub Add a@stub.function()annotation to your function @stub.function() Replace theif __name__ == ""__main__"":block with a function decorated with@stub.local_entrypoint() if __name__ == ""__main__"": @stub.local_entrypoint() @stub.local_entrypoint() Callget_linksusingget_links.remote get_links get_links.remote importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links)Copy importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) importreimporturllib.requestimportmodal

stub = modal.Stub(name=""link-scraper"")@stub.function()defget_links(url):
    ...@stub.local_entrypoint()defmain(url):
    links = get_links.remote(url)print(links) import import import ""link-scraper"" @stub.function() def get_links url @stub.local_entrypoint() def main url print Copy Copy    Copy You can now run this with the Modal CLI, usingmodal runinstead ofpython.
This time, you’ll see additional progress indicators while the script is
running: modal run python $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed.Copy $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. $ modal run scrape.py --url http://example.com
✓ Initialized.
✓ Created objects.
['https://www.iana.org/domains/example']
✓ App completed. Copy Copy    Copy ","The name given to the Stub instance in this example is ""link-scraper""."
0,What standard Python library does the web scraper initially use?,A simple web scraper Custom containers,"In the code above we make use of the Python standard libraryurlliblibrary.
This works great for static web pages, but many pages these days use javascript
to dynamically load content, which wouldn’t appear in the loaded html file.
Let’s use thePlaywrightpackage to
instead launch a headless Chromium browser which can interpret any javascript
that might be on the page. urllib Playwright We can pass custom container images (defined usingmodal.Image) to the@stub.function()decorator. We’ll make use of themodal.Image.debian_slimpre-bundled image add
the shell commands to install Playwright and its dependencies: modal.Image modal.Image @stub.function() modal.Image.debian_slim playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) ""3.10"" ""apt-get install -y software-properties-common"" ""apt-add-repository non-free"" ""apt-add-repository contrib"" ""apt-get update"" ""pip install playwright==1.30.0"" ""playwright install-deps chromium"" ""playwright install chromium"" Copy Copy    Copy Note that we don’t have to install Playwright or Chromium on our development
machine since this will all run in Modal. We can now modify ourget_linksfunction to make use of the new tools: get_links @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image) image=playwright_image async def get_links cur_url:str str from import async with as await await await await ""a[href]"" ""elements => elements.map(element => element.href)"" await print ""Links"" return Copy Copy    Copy Since Playwright has a nice async interface, we’ll redeclare ourget_linksfunction as async (Modal works with both sync and async functions). get_links The first time you run the function after making this change, you’ll notice that
the output first shows the progress of building the custom image you specified,
after which your function runs like before. This image is then cached so that on
subsequent runs of the function it will not be rebuilt as long as the image
definition is the same. ",The web scraper initially uses the urllib library.
3,What image does the code make use of and for what?,A simple web scraper Custom containers,"In the code above we make use of the Python standard libraryurlliblibrary.
This works great for static web pages, but many pages these days use javascript
to dynamically load content, which wouldn’t appear in the loaded html file.
Let’s use thePlaywrightpackage to
instead launch a headless Chromium browser which can interpret any javascript
that might be on the page. urllib Playwright We can pass custom container images (defined usingmodal.Image) to the@stub.function()decorator. We’ll make use of themodal.Image.debian_slimpre-bundled image add
the shell commands to install Playwright and its dependencies: modal.Image modal.Image @stub.function() modal.Image.debian_slim playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) ""3.10"" ""apt-get install -y software-properties-common"" ""apt-add-repository non-free"" ""apt-add-repository contrib"" ""apt-get update"" ""pip install playwright==1.30.0"" ""playwright install-deps chromium"" ""playwright install chromium"" Copy Copy    Copy Note that we don’t have to install Playwright or Chromium on our development
machine since this will all run in Modal. We can now modify ourget_linksfunction to make use of the new tools: get_links @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image) image=playwright_image async def get_links cur_url:str str from import async with as await await await await ""a[href]"" ""elements => elements.map(element => element.href)"" await print ""Links"" return Copy Copy    Copy Since Playwright has a nice async interface, we’ll redeclare ourget_linksfunction as async (Modal works with both sync and async functions). get_links The first time you run the function after making this change, you’ll notice that
the output first shows the progress of building the custom image you specified,
after which your function runs like before. This image is then cached so that on
subsequent runs of the function it will not be rebuilt as long as the image
definition is the same. ",The code makes use of the modal.Image.debian_slim pre-bundled image to pass custom container images (defined using modal.Image) to the @stub.function() decorator and install Playwright and its dependencies.
6,What happens the first time you run the function after changing it to asynchronous and adding a custom image?,A simple web scraper Custom containers,"In the code above we make use of the Python standard libraryurlliblibrary.
This works great for static web pages, but many pages these days use javascript
to dynamically load content, which wouldn’t appear in the loaded html file.
Let’s use thePlaywrightpackage to
instead launch a headless Chromium browser which can interpret any javascript
that might be on the page. urllib Playwright We can pass custom container images (defined usingmodal.Image) to the@stub.function()decorator. We’ll make use of themodal.Image.debian_slimpre-bundled image add
the shell commands to install Playwright and its dependencies: modal.Image modal.Image @stub.function() modal.Image.debian_slim playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
)Copy playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) playwright_image = modal.Image.debian_slim(python_version=""3.10"").run_commands(""apt-get install -y software-properties-common"",""apt-add-repository non-free"",""apt-add-repository contrib"",""apt-get update"",""pip install playwright==1.30.0"",""playwright install-deps chromium"",""playwright install chromium"",
) ""3.10"" ""apt-get install -y software-properties-common"" ""apt-add-repository non-free"" ""apt-add-repository contrib"" ""apt-get update"" ""pip install playwright==1.30.0"" ""playwright install-deps chromium"" ""playwright install chromium"" Copy Copy    Copy Note that we don’t have to install Playwright or Chromium on our development
machine since this will all run in Modal. We can now modify ourget_linksfunction to make use of the new tools: get_links @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinksCopy @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image)asyncdefget_links(cur_url:str):fromplaywright.async_apiimportasync_playwrightasyncwithasync_playwright()asp:
        browser =awaitp.chromium.launch()
        page =awaitbrowser.new_page()awaitpage.goto(cur_url)
        links =awaitpage.eval_on_selector_all(""a[href]"",""elements => elements.map(element => element.href)"")awaitbrowser.close()print(""Links"", links)returnlinks @stub.function(image=playwright_image) image=playwright_image async def get_links cur_url:str str from import async with as await await await await ""a[href]"" ""elements => elements.map(element => element.href)"" await print ""Links"" return Copy Copy    Copy Since Playwright has a nice async interface, we’ll redeclare ourget_linksfunction as async (Modal works with both sync and async functions). get_links The first time you run the function after making this change, you’ll notice that
the output first shows the progress of building the custom image you specified,
after which your function runs like before. This image is then cached so that on
subsequent runs of the function it will not be rebuilt as long as the image
definition is the same. ","The first time you run the function after making it asynchronous and adding a custom image, the progress of building the custom image is displayed, and then your function runs as before. This image is then cached, so on subsequent runs of the function, it will not be rebuilt as long as the image definition remains the same."
0,What does the @stub.function() decorator in Modal do?,A simple web scraper Scaling out,"So far, our script only fetches the links for a single page. What if we want to
scrape a large list of links in parallel? We can do this easily with Modal, because of some magic: the function we wrapped
with the@stub.function()decorator is no longer an ordinary function, but a
ModalFunctionobject. This
means it comes with amapproperty built in, that lets us run this function
for all inputs in parallel, scaling up to as many workers as needed. @stub.function() Function map Let’s change our code to scrape all urls we feed to it in parallel: @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint() def main ""http://modal.com"" ""http://github.com"" for in map for in print Copy Copy    Copy ","It turns the function into a ModalFunction object, allowing it to use a map property that runs this function for all inputs in parallel."
3,How can you modify the script to scrape multiple urls in parallel?,A simple web scraper Scaling out,"So far, our script only fetches the links for a single page. What if we want to
scrape a large list of links in parallel? We can do this easily with Modal, because of some magic: the function we wrapped
with the@stub.function()decorator is no longer an ordinary function, but a
ModalFunctionobject. This
means it comes with amapproperty built in, that lets us run this function
for all inputs in parallel, scaling up to as many workers as needed. @stub.function() Function map Let’s change our code to scrape all urls we feed to it in parallel: @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint() def main ""http://modal.com"" ""http://github.com"" for in map for in print Copy Copy    Copy ","You can do this by wrapping the function with the @stub.function() decorator, turning it into a ModalFunction object and utilizing the built-in map property to run the function on all the urls in parallel."
6,What operation does the get_links.map(urls) function perform?,A simple web scraper Scaling out,"So far, our script only fetches the links for a single page. What if we want to
scrape a large list of links in parallel? We can do this easily with Modal, because of some magic: the function we wrapped
with the@stub.function()decorator is no longer an ordinary function, but a
ModalFunctionobject. This
means it comes with amapproperty built in, that lets us run this function
for all inputs in parallel, scaling up to as many workers as needed. @stub.function() Function map Let’s change our code to scrape all urls we feed to it in parallel: @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint()defmain():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.local_entrypoint() def main ""http://modal.com"" ""http://github.com"" for in map for in print Copy Copy    Copy ",This function is mapping the get_links function across all the urls provided in the list to scrape them in parallel.
0,What is the main purpose of the daily_scrape function?,A simple web scraper Schedules and deployments,"Let’s say we want to log the scraped links daily. We move the print loop into
its own Modal function and annotate it with amodal.Period(days=1)schedule -
indicating we want to run it once per day. Since the scheduled function will not
run from our command line, we also add a hard-coded list of links to crawl for
now. In a more realistic setting we could read this from a database or other
accessible data source. modal.Period(days=1) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_scrape ""http://modal.com"" ""http://github.com"" for in map for in print Copy Copy    Copy To deploy this as a permanent app, run the command modal deploy scrape.pyCopy modal deploy scrape.pyCopy modal deploy scrape.pyCopy modal deploy scrape.py modal deploy scrape.py modal deploy scrape.py Copy Copy    Copy Running this command deploys this function and then closes immediately. We can
see the deployment and all of its runs, including the printed links, on the
ModalApps page. Rerunning the script will redeploy
the code with any changes you have made - overwriting an existing deploy with
the same name (“link-scraper” in this case). Apps page ","The main purpose of the daily_scrape function is to scrape and log the links from the websites ""http://modal.com"" and ""http://github.com"" once every day."
3,Which command is used to deploy this function as a permanent app?,A simple web scraper Schedules and deployments,"Let’s say we want to log the scraped links daily. We move the print loop into
its own Modal function and annotate it with amodal.Period(days=1)schedule -
indicating we want to run it once per day. Since the scheduled function will not
run from our command line, we also add a hard-coded list of links to crawl for
now. In a more realistic setting we could read this from a database or other
accessible data source. modal.Period(days=1) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_scrape ""http://modal.com"" ""http://github.com"" for in map for in print Copy Copy    Copy To deploy this as a permanent app, run the command modal deploy scrape.pyCopy modal deploy scrape.pyCopy modal deploy scrape.pyCopy modal deploy scrape.py modal deploy scrape.py modal deploy scrape.py Copy Copy    Copy Running this command deploys this function and then closes immediately. We can
see the deployment and all of its runs, including the printed links, on the
ModalApps page. Rerunning the script will redeploy
the code with any changes you have made - overwriting an existing deploy with
the same name (“link-scraper” in this case). Apps page ","The command used to deploy this function as a permanent app is ""modal deploy scrape.py""."
6,What happens if you rerun the script?,A simple web scraper Schedules and deployments,"Let’s say we want to log the scraped links daily. We move the print loop into
its own Modal function and annotate it with amodal.Period(days=1)schedule -
indicating we want to run it once per day. Since the scheduled function will not
run from our command line, we also add a hard-coded list of links to crawl for
now. In a more realistic setting we could read this from a database or other
accessible data source. modal.Period(days=1) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:print(link) @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_scrape ""http://modal.com"" ""http://github.com"" for in map for in print Copy Copy    Copy To deploy this as a permanent app, run the command modal deploy scrape.pyCopy modal deploy scrape.pyCopy modal deploy scrape.pyCopy modal deploy scrape.py modal deploy scrape.py modal deploy scrape.py Copy Copy    Copy Running this command deploys this function and then closes immediately. We can
see the deployment and all of its runs, including the printed links, on the
ModalApps page. Rerunning the script will redeploy
the code with any changes you have made - overwriting an existing deploy with
the same name (“link-scraper” in this case). Apps page ","If you rerun the script, it will redeploy the code with any changes you have made - overwriting an existing deploy with the same name (“link-scraper” in this case)."
0,What is the purpose of using the Slack API and slack-sdk PyPI package in the described context?,A simple web scraper Integrations and Secrets,"Instead of looking at the links in the run logs of our deployments, let’s say we
wanted to post them to our#scraped-linksSlack channel. To do this, we can
make use of theSlack APIand theslack-sdkPyPI package. #scraped-links Slack API slack-sdk PyPI package The Slack SDK WebClient requires an API token to get access to our Slack
Workspace, and since it’s bad practice to hardcode credentials into application
code we make use of Modal’sSecrets. Secrets are snippets of data that will
be injected as environment variables in the containers running your functions. Secrets The easiest way to create Secrets is to go to theSecrets section of modal.com. You can both create a
free-form secret with any environment variables, or make use of presets for
common services. We’ll use the Slack preset and after filling in the necessary
information we are presented with a snippet of code that can be used to post to
Slack using our credentials: Secrets section of modal.com importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) import ""slack-sdk"" @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret"")) image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret"") ""my-slack-secret"" ""my-slack-secret"" def bot_token_msg channel, message import ""SLACK_BOT_TOKEN"" Copy Copy    Copy Copy that code as-is, then amend thedaily_scrapefunction to callbot_token_msg. daily_scrape bot_token_msg @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_scrape ""http://modal.com"" ""http://github.com"" for in map for in ""scraped-links"" Copy Copy    Copy Note that we are freely making function calls across completely different
container images, as if they were regular Python functions in the same program. We rerun the script which overwrites the old deploy with our updated code, and
now we get a daily feed of our scraped links in our Slack channel 🎉 ",To post scraped links to a specific Slack channel.
3,Where can one create Secrets in this setup?,A simple web scraper Integrations and Secrets,"Instead of looking at the links in the run logs of our deployments, let’s say we
wanted to post them to our#scraped-linksSlack channel. To do this, we can
make use of theSlack APIand theslack-sdkPyPI package. #scraped-links Slack API slack-sdk PyPI package The Slack SDK WebClient requires an API token to get access to our Slack
Workspace, and since it’s bad practice to hardcode credentials into application
code we make use of Modal’sSecrets. Secrets are snippets of data that will
be injected as environment variables in the containers running your functions. Secrets The easiest way to create Secrets is to go to theSecrets section of modal.com. You can both create a
free-form secret with any environment variables, or make use of presets for
common services. We’ll use the Slack preset and after filling in the necessary
information we are presented with a snippet of code that can be used to post to
Slack using our credentials: Secrets section of modal.com importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) import ""slack-sdk"" @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret"")) image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret"") ""my-slack-secret"" ""my-slack-secret"" def bot_token_msg channel, message import ""SLACK_BOT_TOKEN"" Copy Copy    Copy Copy that code as-is, then amend thedaily_scrapefunction to callbot_token_msg. daily_scrape bot_token_msg @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_scrape ""http://modal.com"" ""http://github.com"" for in map for in ""scraped-links"" Copy Copy    Copy Note that we are freely making function calls across completely different
container images, as if they were regular Python functions in the same program. We rerun the script which overwrites the old deploy with our updated code, and
now we get a daily feed of our scraped links in our Slack channel 🎉 ",Secrets can be created in the Secrets section of modal.com. 
6,What is the function of the daily_scrape() function? ,A simple web scraper Integrations and Secrets,"Instead of looking at the links in the run logs of our deployments, let’s say we
wanted to post them to our#scraped-linksSlack channel. To do this, we can
make use of theSlack APIand theslack-sdkPyPI package. #scraped-links Slack API slack-sdk PyPI package The Slack SDK WebClient requires an API token to get access to our Slack
Workspace, and since it’s bad practice to hardcode credentials into application
code we make use of Modal’sSecrets. Secrets are snippets of data that will
be injected as environment variables in the containers running your functions. Secrets The easiest way to create Secrets is to go to theSecrets section of modal.com. You can both create a
free-form secret with any environment variables, or make use of presets for
common services. We’ll use the Slack preset and after filling in the necessary
information we are presented with a snippet of code that can be used to post to
Slack using our credentials: Secrets section of modal.com importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message)Copy importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) importos
slack_sdk_image = modal.Image.debian_slim().pip_install(""slack-sdk"")@stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret""))defbot_token_msg(channel, message):importslack_sdk
    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=channel, text=message) import ""slack-sdk"" @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret"")) image=slack_sdk_image, secret=modal.Secret.from_name(""my-slack-secret"") ""my-slack-secret"" ""my-slack-secret"" def bot_token_msg channel, message import ""SLACK_BOT_TOKEN"" Copy Copy    Copy Copy that code as-is, then amend thedaily_scrapefunction to callbot_token_msg. daily_scrape bot_token_msg @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link)Copy @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1))defdaily_scrape():
    urls = [""http://modal.com"",""http://github.com""]forlinksinget_links.map(urls):forlinkinlinks:
            bot_token_msg.remote(""scraped-links"", link) @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_scrape ""http://modal.com"" ""http://github.com"" for in map for in ""scraped-links"" Copy Copy    Copy Note that we are freely making function calls across completely different
container images, as if they were regular Python functions in the same program. We rerun the script which overwrites the old deploy with our updated code, and
now we get a daily feed of our scraped links in our Slack channel 🎉 ",The daily_scrape() function scrapes links from the provided URLs and then posts those links to the designated Slack channel. It is scheduled to run once per day.
0,What is the primary purpose of Modal?,A simple web scraper Summary,"We have shown how you can use Modal to develop distributed Python data
applications using custom containers. Through simple constructs we were able to
add parallel execution. With the change of a single line of code were were able
to go from experimental development code to a deployed application. The full
code of this example can be foundhere. We hope
this overview gives you a glimpse of what you are able to build using Modal. here A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraper Set up your first Modal app Finding links Running it in Modal Custom containers Scaling out Schedules and deployments Integrations and Secrets Summary CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",To develop distributed Python data applications using custom containers.
3,How can one transition from experimental development code to a deployed application in Modal?,A simple web scraper Summary,"We have shown how you can use Modal to develop distributed Python data
applications using custom containers. Through simple constructs we were able to
add parallel execution. With the change of a single line of code were were able
to go from experimental development code to a deployed application. The full
code of this example can be foundhere. We hope
this overview gives you a glimpse of what you are able to build using Modal. here A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraper Set up your first Modal app Finding links Running it in Modal Custom containers Scaling out Schedules and deployments Integrations and Secrets Summary CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",By changing a single line of code.
6,What is the name and copyright year of the company behind Modal?,A simple web scraper Summary,"We have shown how you can use Modal to develop distributed Python data
applications using custom containers. Through simple constructs we were able to
add parallel execution. With the change of a single line of code were were able
to go from experimental development code to a deployed application. The full
code of this example can be foundhere. We hope
this overview gives you a glimpse of what you are able to build using Modal. here A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraper Set up your first Modal app Finding links Running it in Modal Custom containers Scaling out Schedules and deployments Integrations and Secrets Summary CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The company is Modal Labs, Inc., and the copyright year is 2023."
0,What is the purpose of Modal as demonstrated in the content?,A simple web scraper Summary,"We have shown how you can use Modal to develop distributed Python data
applications using custom containers. Through simple constructs we were able to
add parallel execution. With the change of a single line of code were were able
to go from experimental development code to a deployed application. The full
code of this example can be foundhere. We hope
this overview gives you a glimpse of what you are able to build using Modal. here A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraper Set up your first Modal app Finding links Running it in Modal Custom containers Scaling out Schedules and deployments Integrations and Secrets Summary CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The purpose of Modal is to develop distributed Python data applications using custom containers, allowing for parallel execution and easy deployment."
3,Where can the full code of the example be found?,A simple web scraper Summary,"We have shown how you can use Modal to develop distributed Python data
applications using custom containers. Through simple constructs we were able to
add parallel execution. With the change of a single line of code were were able
to go from experimental development code to a deployed application. The full
code of this example can be foundhere. We hope
this overview gives you a glimpse of what you are able to build using Modal. here A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraper Set up your first Modal app Finding links Running it in Modal Custom containers Scaling out Schedules and deployments Integrations and Secrets Summary CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The full code of this example can be found by following a link referred to as ""here"" in the original material."
6,What is the copyright entity for Modal Labs?,A simple web scraper Summary,"We have shown how you can use Modal to develop distributed Python data
applications using custom containers. Through simple constructs we were able to
add parallel execution. With the change of a single line of code were were able
to go from experimental development code to a deployed application. The full
code of this example can be foundhere. We hope
this overview gives you a glimpse of what you are able to build using Modal. here A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraperSet up your first Modal appFinding linksRunning it in ModalCustom containersScaling outSchedules and deploymentsIntegrations and SecretsSummary A simple web scraper Set up your first Modal app Finding links Running it in Modal Custom containers Scaling out Schedules and deployments Integrations and Secrets Summary CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs' copyright is held by Modal Labs, Inc., as of 2023."
0,What is the main advantage of using vLLM for inference?,Fast inference with vLLM Llama 2 13B,"In this example, we show how to run basic inference, usingvLLMto take advantage of PagedAttention, which speeds up sequential inferences with optimized key-value caching. vLLM vLLM vLLMalso supports a use case as a FastAPI server which we will explore in a future guide. This example
walks through setting up an environment that works withvLLMfor basic inference. vLLM vLLM We are running the Llama 2 13B model here, and you can expect 30 second cold starts and well over 100 tokens/second.
The larger the batch of prompts, the higher the throughput. For example, with the 60 prompts below,
we can produce 24k tokens in 39 seconds, which is around 600 tokens/second. To runany of the other supported models,
simply replace the model name in the download step. You may also need to enabletrust_remote_codefor MPT models (see comment below).. any of the other supported models trust_remote_code ","The main advantage of using vLLM for inference is PagedAttention, which speeds up sequential inferences with optimized key-value caching."
3,What does vLLM also support a use case as according to the text?,Fast inference with vLLM Llama 2 13B,"In this example, we show how to run basic inference, usingvLLMto take advantage of PagedAttention, which speeds up sequential inferences with optimized key-value caching. vLLM vLLM vLLMalso supports a use case as a FastAPI server which we will explore in a future guide. This example
walks through setting up an environment that works withvLLMfor basic inference. vLLM vLLM We are running the Llama 2 13B model here, and you can expect 30 second cold starts and well over 100 tokens/second.
The larger the batch of prompts, the higher the throughput. For example, with the 60 prompts below,
we can produce 24k tokens in 39 seconds, which is around 600 tokens/second. To runany of the other supported models,
simply replace the model name in the download step. You may also need to enabletrust_remote_codefor MPT models (see comment below).. any of the other supported models trust_remote_code ","According to the text, vLLM also supports a use case as a FastAPI server."
6,What do you have to do to run any of the other supported models?,Fast inference with vLLM Llama 2 13B,"In this example, we show how to run basic inference, usingvLLMto take advantage of PagedAttention, which speeds up sequential inferences with optimized key-value caching. vLLM vLLM vLLMalso supports a use case as a FastAPI server which we will explore in a future guide. This example
walks through setting up an environment that works withvLLMfor basic inference. vLLM vLLM We are running the Llama 2 13B model here, and you can expect 30 second cold starts and well over 100 tokens/second.
The larger the batch of prompts, the higher the throughput. For example, with the 60 prompts below,
we can produce 24k tokens in 39 seconds, which is around 600 tokens/second. To runany of the other supported models,
simply replace the model name in the download step. You may also need to enabletrust_remote_codefor MPT models (see comment below).. any of the other supported models trust_remote_code ","To run any of the other supported models, you simply replace the model name in the download step. You may also need to enable trust_remote_code for MPT models."
0,What is a benefit of creating a Modal image with model weights pre-saved to a directory?,Fast inference with vLLM Llama 2 13B Define a container image,"We want to create a Modal image which has the model weights pre-saved to a directory. The benefit of this
is that the container no longer has to re-download the model from Huggingface - instead, it will take
advantage of Modal’s internal filesystem for faster cold starts. Download the weights Since the weights are gated on HuggingFace, we must request access in two places: on themodel card pageaccept the licenseon the Meta website. on themodel card page model card page accept the licenseon the Meta website. on the Meta website Next,create a HuggingFace access token.
To access the token in a Modal function, we can create a secret on thesecrets page.
Now the token will be available via the environment variable namedHUGGINGFACE_TOKEN. Functions that inject this secret will have access to the environment variable. create a HuggingFace access token secrets page HUGGINGFACE_TOKEN We can download the model to a particular directory using the HuggingFace utility functionsnapshot_download. snapshot_download Tip: avoid using global variables in this function. Changes to code outside this function will not be detected and the download step will not re-run. defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) def download_model_to_folder from import True ""meta-llama/Llama-2-13b-chat-hf"" ""HUGGINGFACE_TOKEN"" Copy Copy    Copy Image definition We’ll start from a Dockerhub image recommended byvLLM, upgrade the older
version oftorchto a new one specifically built for CUDA 11.8. Next, we installvLLMfrom source to get the latest updates.
Finally, we’ll use run_function to run the function defined above to ensure the weights of the model
are saved within the container image. vLLM torch vLLM image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) ""nvcr.io/nvidia/pytorch:22.12-py3"" ""torch==2.0.1"" ""https://download.pytorch.org/whl/cu118"" # Pinned to 08/15/2023 ""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"" ""typing-extensions==4.5.0"" # >=4.6 causes typing issues # Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s. ""hf-transfer~=0.1"" ""HF_HUB_ENABLE_HF_TRANSFER"" ""1"" ""huggingface"" 60 20 ""example-vllm-inference"" Copy Copy    Copy ","The benefit is that the container no longer has to re-download the model from Huggingface - instead, it will take advantage of Modal’s internal filesystem for faster cold starts."
3,How can the HuggingFace access token be accessed in a Modal function?,Fast inference with vLLM Llama 2 13B Define a container image,"We want to create a Modal image which has the model weights pre-saved to a directory. The benefit of this
is that the container no longer has to re-download the model from Huggingface - instead, it will take
advantage of Modal’s internal filesystem for faster cold starts. Download the weights Since the weights are gated on HuggingFace, we must request access in two places: on themodel card pageaccept the licenseon the Meta website. on themodel card page model card page accept the licenseon the Meta website. on the Meta website Next,create a HuggingFace access token.
To access the token in a Modal function, we can create a secret on thesecrets page.
Now the token will be available via the environment variable namedHUGGINGFACE_TOKEN. Functions that inject this secret will have access to the environment variable. create a HuggingFace access token secrets page HUGGINGFACE_TOKEN We can download the model to a particular directory using the HuggingFace utility functionsnapshot_download. snapshot_download Tip: avoid using global variables in this function. Changes to code outside this function will not be detected and the download step will not re-run. defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) def download_model_to_folder from import True ""meta-llama/Llama-2-13b-chat-hf"" ""HUGGINGFACE_TOKEN"" Copy Copy    Copy Image definition We’ll start from a Dockerhub image recommended byvLLM, upgrade the older
version oftorchto a new one specifically built for CUDA 11.8. Next, we installvLLMfrom source to get the latest updates.
Finally, we’ll use run_function to run the function defined above to ensure the weights of the model
are saved within the container image. vLLM torch vLLM image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) ""nvcr.io/nvidia/pytorch:22.12-py3"" ""torch==2.0.1"" ""https://download.pytorch.org/whl/cu118"" # Pinned to 08/15/2023 ""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"" ""typing-extensions==4.5.0"" # >=4.6 causes typing issues # Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s. ""hf-transfer~=0.1"" ""HF_HUB_ENABLE_HF_TRANSFER"" ""1"" ""huggingface"" 60 20 ""example-vllm-inference"" Copy Copy    Copy ",The token will be accessed via the environment variable named HUGGINGFACE_TOKEN in a Modal function.
6,"In creating the Dockerhub image, what version of 'torch' is upgraded to which version and why?",Fast inference with vLLM Llama 2 13B Define a container image,"We want to create a Modal image which has the model weights pre-saved to a directory. The benefit of this
is that the container no longer has to re-download the model from Huggingface - instead, it will take
advantage of Modal’s internal filesystem for faster cold starts. Download the weights Since the weights are gated on HuggingFace, we must request access in two places: on themodel card pageaccept the licenseon the Meta website. on themodel card page model card page accept the licenseon the Meta website. on the Meta website Next,create a HuggingFace access token.
To access the token in a Modal function, we can create a secret on thesecrets page.
Now the token will be available via the environment variable namedHUGGINGFACE_TOKEN. Functions that inject this secret will have access to the environment variable. create a HuggingFace access token secrets page HUGGINGFACE_TOKEN We can download the model to a particular directory using the HuggingFace utility functionsnapshot_download. snapshot_download Tip: avoid using global variables in this function. Changes to code outside this function will not be detected and the download step will not re-run. defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    )Copy defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) defdownload_model_to_folder():fromhuggingface_hubimportsnapshot_download

    os.makedirs(MODEL_DIR, exist_ok=True)

    snapshot_download(""meta-llama/Llama-2-13b-chat-hf"",
        local_dir=MODEL_DIR,
        token=os.environ[""HUGGINGFACE_TOKEN""],
    ) def download_model_to_folder from import True ""meta-llama/Llama-2-13b-chat-hf"" ""HUGGINGFACE_TOKEN"" Copy Copy    Copy Image definition We’ll start from a Dockerhub image recommended byvLLM, upgrade the older
version oftorchto a new one specifically built for CUDA 11.8. Next, we installvLLMfrom source to get the latest updates.
Finally, we’ll use run_function to run the function defined above to ensure the weights of the model
are saved within the container image. vLLM torch vLLM image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image)Copy image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) image = (
    Image.from_registry(""nvcr.io/nvidia/pytorch:22.12-py3"")
    .pip_install(""torch==2.0.1"", index_url=""https://download.pytorch.org/whl/cu118"")# Pinned to 08/15/2023.pip_install(""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"",""typing-extensions==4.5.0"",# >=4.6 causes typing issues)# Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s..pip_install(""hf-transfer~=0.1"")
    .env({""HF_HUB_ENABLE_HF_TRANSFER"":""1""})
    .run_function(
        download_model_to_folder,
        secret=Secret.from_name(""huggingface""),
        timeout=60*20,
    )
)

stub = Stub(""example-vllm-inference"", image=image) ""nvcr.io/nvidia/pytorch:22.12-py3"" ""torch==2.0.1"" ""https://download.pytorch.org/whl/cu118"" # Pinned to 08/15/2023 ""vllm @ git+https://github.com/vllm-project/vllm.git@805de738f618f8b47ab0d450423d23db1e636fa2"" ""typing-extensions==4.5.0"" # >=4.6 causes typing issues # Use the barebones hf-transfer package for maximum download speeds. No progress bar, but expect 700MB/s. ""hf-transfer~=0.1"" ""HF_HUB_ENABLE_HF_TRANSFER"" ""1"" ""huggingface"" 60 20 ""example-vllm-inference"" Copy Copy    Copy ",The older version of 'torch' is upgraded to a new one specifically built for CUDA 11.8. This is to ensure compatibility and optimal performance with the specific hardware being used.
0,What is the purpose of the __enter__ method in the vLLM model class code?,Fast inference with vLLM Llama 2 13B The model class,"The inference function is best represented with Modal’sclass syntaxand the__enter__method.
This enables us to load the model into memory just once every time a container starts up, and keep it cached
on the GPU for each subsequent invocation of the function. class syntax __enter__ ThevLLMlibrary allows the code to remain quite clean. vLLM @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface"")) gpu=""A100"", secret=Secret.from_name(""huggingface"") ""A100"" ""huggingface"" ""huggingface"" class Model def __enter__ self from import # Load the model. Tip: MPT models may require `trust_remote_code=true`. """"""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """""" @method() def generate self, user_questions from import format """" for in 0.75 1 800 1.15 0 for in len 0 print 0 ""\n\n"" """" print f""Generated{num_tokens}tokens"" {num_tokens} Copy Copy    Copy ","The __enter__ method in the vLLM model class code is used to load the model into memory just once every time a container starts up, keeping it cached on the GPU for each subsequent use."
3,How does the vLLM library contribute to the code as mentioned in the provided information?,Fast inference with vLLM Llama 2 13B The model class,"The inference function is best represented with Modal’sclass syntaxand the__enter__method.
This enables us to load the model into memory just once every time a container starts up, and keep it cached
on the GPU for each subsequent invocation of the function. class syntax __enter__ ThevLLMlibrary allows the code to remain quite clean. vLLM @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface"")) gpu=""A100"", secret=Secret.from_name(""huggingface"") ""A100"" ""huggingface"" ""huggingface"" class Model def __enter__ self from import # Load the model. Tip: MPT models may require `trust_remote_code=true`. """"""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """""" @method() def generate self, user_questions from import format """" for in 0.75 1 800 1.15 0 for in len 0 print 0 ""\n\n"" """" print f""Generated{num_tokens}tokens"" {num_tokens} Copy Copy    Copy ",The vLLM library allows the code to remain clean and manageable.
6,What is the purpose of the secret parameter in @stub.cls function?,Fast inference with vLLM Llama 2 13B The model class,"The inference function is best represented with Modal’sclass syntaxand the__enter__method.
This enables us to load the model into memory just once every time a container starts up, and keep it cached
on the GPU for each subsequent invocation of the function. class syntax __enter__ ThevLLMlibrary allows the code to remain quite clean. vLLM @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"")Copy @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface""))classModel:def__enter__(self):fromvllmimportLLM# Load the model. Tip: MPT models may require `trust_remote_code=true`.self.llm = LLM(MODEL_DIR)
        self.template =""""""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """"""@method()defgenerate(self, user_questions):fromvllmimportSamplingParams

        prompts = [
            self.template.format(system="""", user=q)forqinuser_questions
        ]
        sampling_params = SamplingParams(
            temperature=0.75,
            top_p=1,
            max_tokens=800,
            presence_penalty=1.15,
        )
        result = self.llm.generate(prompts, sampling_params)
        num_tokens =0foroutputinresult:
            num_tokens +=len(output.outputs[0].token_ids)print(output.prompt, output.outputs[0].text,""\n\n"", sep="""")print(f""Generated{num_tokens}tokens"") @stub.cls(gpu=""A100"", secret=Secret.from_name(""huggingface"")) gpu=""A100"", secret=Secret.from_name(""huggingface"") ""A100"" ""huggingface"" ""huggingface"" class Model def __enter__ self from import # Load the model. Tip: MPT models may require `trust_remote_code=true`. """"""<s>[INST] <<SYS>>
{system}
<</SYS>>

{user} [/INST] """""" @method() def generate self, user_questions from import format """" for in 0.75 1 800 1.15 0 for in len 0 print 0 ""\n\n"" """" print f""Generated{num_tokens}tokens"" {num_tokens} Copy Copy    Copy ","The secret parameter in @stub.cls function is used for authentication, in this case to access ""huggingface""."
0,What is being created in the example?,Questionanswering with LangChain,"In this example we create a large-language-model (LLM) powered question answering
web endpoint and CLI. Only a single document is used as the knowledge-base of the application,
the 2022 USA State of the Union address by President Joe Biden. However, this same application structure
could be extended to do question-answering over all State of the Union speeches, or other large text corpuses. It’s theLangChainlibrary that makes this all so easy. This demo is only around 100 lines of code! LangChain ",A large-language-model (LLM) powered question answering web endpoint and CLI.
1,What document is used as the knowledge base of the application in the example?,Questionanswering with LangChain,"In this example we create a large-language-model (LLM) powered question answering
web endpoint and CLI. Only a single document is used as the knowledge-base of the application,
the 2022 USA State of the Union address by President Joe Biden. However, this same application structure
could be extended to do question-answering over all State of the Union speeches, or other large text corpuses. It’s theLangChainlibrary that makes this all so easy. This demo is only around 100 lines of code! LangChain ",The 2022 USA State of the Union address by President Joe Biden.
2,Can the application structure be extended to do question-answering over all State of the Union speeches or other large text corpuses?,Questionanswering with LangChain,"In this example we create a large-language-model (LLM) powered question answering
web endpoint and CLI. Only a single document is used as the knowledge-base of the application,
the 2022 USA State of the Union address by President Joe Biden. However, this same application structure
could be extended to do question-answering over all State of the Union speeches, or other large text corpuses. It’s theLangChainlibrary that makes this all so easy. This demo is only around 100 lines of code! LangChain ","Yes, the application structure could be extended to do question-answering over all State of the Union speeches, or other large text corpuses."
3,What library is used in the example that makes the application easy?,Questionanswering with LangChain,"In this example we create a large-language-model (LLM) powered question answering
web endpoint and CLI. Only a single document is used as the knowledge-base of the application,
the 2022 USA State of the Union address by President Joe Biden. However, this same application structure
could be extended to do question-answering over all State of the Union speeches, or other large text corpuses. It’s theLangChainlibrary that makes this all so easy. This demo is only around 100 lines of code! LangChain ",The LangChain library is used in the example.
4,How many lines of code is the demo around?,Questionanswering with LangChain,"In this example we create a large-language-model (LLM) powered question answering
web endpoint and CLI. Only a single document is used as the knowledge-base of the application,
the 2022 USA State of the Union address by President Joe Biden. However, this same application structure
could be extended to do question-answering over all State of the Union speeches, or other large text corpuses. It’s theLangChainlibrary that makes this all so easy. This demo is only around 100 lines of code! LangChain ",The demo is only around 100 lines of code.
0,What is the purpose of the function scrape_state_of_the_union()?,Questionanswering with LangChain Scraping the speech from whitehousegov,"It’s super easy to scrape the transcipt of Biden’s speech usinghttpxandBeautifulSoup.
This speech is just one document and it’s relatively short, but it’s enough to demonstrate
the question-answering capability of the LLM chain. httpx BeautifulSoup defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") def scrape_state_of_the_union str import from import ""https://www.whitehouse.gov/state-of-the-union-2022/"" # fetch article; simulate desktop browser ""User-Agent"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9"" ""lxml"" # get all text paragraphs & construct string of article text """" ""div"" ""class"" ""sotu-annotations__content"" if 0 ""p"" """" for in return ""\t"" """" Copy Copy    Copy ",The function scrape_state_of_the_union() is used to scrape the transcript of the State of the Union speech from the website whitehouse.gov.
3,What is BeautifulSoup used for in this function?,Questionanswering with LangChain Scraping the speech from whitehousegov,"It’s super easy to scrape the transcipt of Biden’s speech usinghttpxandBeautifulSoup.
This speech is just one document and it’s relatively short, but it’s enough to demonstrate
the question-answering capability of the LLM chain. httpx BeautifulSoup defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") def scrape_state_of_the_union str import from import ""https://www.whitehouse.gov/state-of-the-union-2022/"" # fetch article; simulate desktop browser ""User-Agent"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9"" ""lxml"" # get all text paragraphs & construct string of article text """" ""div"" ""class"" ""sotu-annotations__content"" if 0 ""p"" """" for in return ""\t"" """" Copy Copy    Copy ","In this function, BeautifulSoup is used to parse the HTML content of the webpage."
6,What does the function return?,Questionanswering with LangChain Scraping the speech from whitehousegov,"It’s super easy to scrape the transcipt of Biden’s speech usinghttpxandBeautifulSoup.
This speech is just one document and it’s relatively short, but it’s enough to demonstrate
the question-answering capability of the LLM chain. httpx BeautifulSoup defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""")Copy defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") defscrape_state_of_the_union() ->str:importhttpxfrombs4importBeautifulSoup

    url =""https://www.whitehouse.gov/state-of-the-union-2022/""# fetch article; simulate desktop browserheaders = {""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9""}
    response = httpx.get(url, headers=headers)
    soup = BeautifulSoup(response.text,""lxml"")# get all text paragraphs & construct string of article textspeech_text =""""speech_section = soup.find_all(""div"", {""class"":""sotu-annotations__content""}
    )ifspeech_section:
        paragraph_tags = speech_section[0].find_all(""p"")
        speech_text ="""".join([p.get_text()forpinparagraph_tags])returnspeech_text.replace(""\t"","""") def scrape_state_of_the_union str import from import ""https://www.whitehouse.gov/state-of-the-union-2022/"" # fetch article; simulate desktop browser ""User-Agent"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9"" ""lxml"" # get all text paragraphs & construct string of article text """" ""div"" ""class"" ""sotu-annotations__content"" if 0 ""p"" """" for in return ""\t"" """" Copy Copy    Copy ","The function returns the text of the State of the Union Speech in a string format, after removing any tab characters (""\t"")."
0,"What is the purpose of LangChain's ""Question Answering"" notebook?",Questionanswering with LangChain Constructing the QA chain,"At a high-level, this LLM chain will be able to answer questions asked about Biden’s speech and provide
references to which parts of the speech contain the evidence for given answers. The chain combines a text-embedding index over parts of Biden’s speech with OpenAI’sGPT-3 LLM.
The index is used to select the most likely relevant parts of the speech given the question, and these
are used to build a specialized prompt for the OpenAI language model. GPT-3 LLM For more information on this, seeLangChain’s “Question Answering” notebook. LangChain’s “Question Answering” notebook defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources def retrieve_sources sources_refs:str, texts:list[str] str list str list str """"""
    Map back from the references given by the LLM's output to the original text parts.
    """""" ""-pl"" """" for in "","" int if else None for in return if is not None else ""INVALID SOURCE"" for in def qanda_langchain query:str str tuple str list str from import from import from import from import from import # Support caching speech text on disk. ""state-of-the-union.txt"" if else print ""scraping the 2022 State of the Union speech"" # We cannot send the entire speech to the model because OpenAI's model # has a maximum limit on input tokens. So we split up the speech # into smaller chunks. 1000 0 print ""splitting speech into text chunks"" # Embedding-based query<->text similarity comparison is used to select # a small subset of the speech text chunks. # Generating the `docsearch` index is too slow to re-run on every request, # so we do rudimentary caching using a global variable. global if not # New OpenAI accounts have a very low rate-limit for their first 48 hrs. # It's too low to embed even just this single Biden speech. # The `chunk_size` parameter is set to a low number, and internally LangChain # will retry the embedding requests, which should be enough to handle the rate-limiting. # # Ref: https://platform.openai.com/docs/guides/rate-limits/overview. print ""generating docsearch indexer"" 5 ""source"" for in range len print ""selecting text parts by similarity to query"" 0 ""stuff"" print ""running query against Q&A chain.\n"" ""input_documents"" ""question"" True str ""output_text"" ""SOURCES: "" if len 2 elif len 1 0 else raise f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"" {output} return Copy Copy    Copy ",The notebook demonstrates how LangChain can answer questions about specific content (like Biden's speech) and provide references to parts of the document that contain the evidence for the given answers.
3,Why is there a need to split the speech text into smaller chunks?,Questionanswering with LangChain Constructing the QA chain,"At a high-level, this LLM chain will be able to answer questions asked about Biden’s speech and provide
references to which parts of the speech contain the evidence for given answers. The chain combines a text-embedding index over parts of Biden’s speech with OpenAI’sGPT-3 LLM.
The index is used to select the most likely relevant parts of the speech given the question, and these
are used to build a specialized prompt for the OpenAI language model. GPT-3 LLM For more information on this, seeLangChain’s “Question Answering” notebook. LangChain’s “Question Answering” notebook defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources def retrieve_sources sources_refs:str, texts:list[str] str list str list str """"""
    Map back from the references given by the LLM's output to the original text parts.
    """""" ""-pl"" """" for in "","" int if else None for in return if is not None else ""INVALID SOURCE"" for in def qanda_langchain query:str str tuple str list str from import from import from import from import from import # Support caching speech text on disk. ""state-of-the-union.txt"" if else print ""scraping the 2022 State of the Union speech"" # We cannot send the entire speech to the model because OpenAI's model # has a maximum limit on input tokens. So we split up the speech # into smaller chunks. 1000 0 print ""splitting speech into text chunks"" # Embedding-based query<->text similarity comparison is used to select # a small subset of the speech text chunks. # Generating the `docsearch` index is too slow to re-run on every request, # so we do rudimentary caching using a global variable. global if not # New OpenAI accounts have a very low rate-limit for their first 48 hrs. # It's too low to embed even just this single Biden speech. # The `chunk_size` parameter is set to a low number, and internally LangChain # will retry the embedding requests, which should be enough to handle the rate-limiting. # # Ref: https://platform.openai.com/docs/guides/rate-limits/overview. print ""generating docsearch indexer"" 5 ""source"" for in range len print ""selecting text parts by similarity to query"" 0 ""stuff"" print ""running query against Q&A chain.\n"" ""input_documents"" ""question"" True str ""output_text"" ""SOURCES: "" if len 2 elif len 1 0 else raise f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"" {output} return Copy Copy    Copy ",The speech text is split into smaller chunks because OpenAI's model has a maximum input token limit and entire speech cannot be sent to it.
6,What happens if the process doesn't receive an answer with a single 'SOURCES' block?,Questionanswering with LangChain Constructing the QA chain,"At a high-level, this LLM chain will be able to answer questions asked about Biden’s speech and provide
references to which parts of the speech contain the evidence for given answers. The chain combines a text-embedding index over parts of Biden’s speech with OpenAI’sGPT-3 LLM.
The index is used to select the most likely relevant parts of the speech given the question, and these
are used to build a specialized prompt for the OpenAI language model. GPT-3 LLM For more information on this, seeLangChain’s “Question Answering” notebook. LangChain’s “Question Answering” notebook defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sourcesCopy defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources defretrieve_sources(sources_refs:str, texts:list[str]) ->list[str]:""""""
    Map back from the references given by the LLM's output to the original text parts.
    """"""clean_indices = [
        r.replace(""-pl"","""").strip()forrinsources_refs.split("","")
    ]
    numeric_indices = (int(r)ifr.isnumeric()elseNoneforrinclean_indices)return[
        texts[i]ifiisnotNoneelse""INVALID SOURCE""foriinnumeric_indices
    ]defqanda_langchain(query:str) ->tuple[str,list[str]]:fromlangchain.chains.qa_with_sourcesimportload_qa_with_sources_chainfromlangchain.embeddings.openaiimportOpenAIEmbeddingsfromlangchain.llmsimportOpenAIfromlangchain.text_splitterimportCharacterTextSplitterfromlangchain.vectorstores.faissimportFAISS# Support caching speech text on disk.speech_file_path = Path(""state-of-the-union.txt"")ifspeech_file_path.exists():
        state_of_the_union = speech_file_path.read_text()else:print(""scraping the 2022 State of the Union speech"")
        state_of_the_union = scrape_state_of_the_union()
        speech_file_path.write_text(state_of_the_union)# We cannot send the entire speech to the model because OpenAI's model# has a maximum limit on input tokens. So we split up the speech# into smaller chunks.text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)print(""splitting speech into text chunks"")
    texts = text_splitter.split_text(state_of_the_union)# Embedding-based query<->text similarity comparison is used to select# a small subset of the speech text chunks.# Generating the `docsearch` index is too slow to re-run on every request,# so we do rudimentary caching using a global variable.globaldocsearchifnotdocsearch:# New OpenAI accounts have a very low rate-limit for their first 48 hrs.# It's too low to embed even just this single Biden speech.# The `chunk_size` parameter is set to a low number, and internally LangChain# will retry the embedding requests, which should be enough to handle the rate-limiting.## Ref: https://platform.openai.com/docs/guides/rate-limits/overview.print(""generating docsearch indexer"")
        docsearch = FAISS.from_texts(
            texts,
            OpenAIEmbeddings(chunk_size=5),
            metadatas=[{""source"": i}foriinrange(len(texts))],
        )print(""selecting text parts by similarity to query"")
    docs = docsearch.similarity_search(query)

    chain = load_qa_with_sources_chain(
        OpenAI(temperature=0), chain_type=""stuff"")print(""running query against Q&A chain.\n"")
    result = chain(
        {""input_documents"": docs,""question"": query}, return_only_outputs=True)
    output:str= result[""output_text""]
    parts = output.split(""SOURCES: "")iflen(parts) ==2:
        answer, sources_refs = parts
        sources = retrieve_sources(sources_refs, texts)eliflen(parts) ==1:
        answer = parts[0]
        sources = []else:raiseRuntimeError(f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"")returnanswer.strip(), sources def retrieve_sources sources_refs:str, texts:list[str] str list str list str """"""
    Map back from the references given by the LLM's output to the original text parts.
    """""" ""-pl"" """" for in "","" int if else None for in return if is not None else ""INVALID SOURCE"" for in def qanda_langchain query:str str tuple str list str from import from import from import from import from import # Support caching speech text on disk. ""state-of-the-union.txt"" if else print ""scraping the 2022 State of the Union speech"" # We cannot send the entire speech to the model because OpenAI's model # has a maximum limit on input tokens. So we split up the speech # into smaller chunks. 1000 0 print ""splitting speech into text chunks"" # Embedding-based query<->text similarity comparison is used to select # a small subset of the speech text chunks. # Generating the `docsearch` index is too slow to re-run on every request, # so we do rudimentary caching using a global variable. global if not # New OpenAI accounts have a very low rate-limit for their first 48 hrs. # It's too low to embed even just this single Biden speech. # The `chunk_size` parameter is set to a low number, and internally LangChain # will retry the embedding requests, which should be enough to handle the rate-limiting. # # Ref: https://platform.openai.com/docs/guides/rate-limits/overview. print ""generating docsearch indexer"" 5 ""source"" for in range len print ""selecting text parts by similarity to query"" 0 ""stuff"" print ""running query against Q&A chain.\n"" ""input_documents"" ""question"" True str ""output_text"" ""SOURCES: "" if len 2 elif len 1 0 else raise f""Expected to receive an answer with a single 'SOURCES' block, got:\n{output}"" {output} return Copy Copy    Copy ","If the process doesn't receive an answer with a single 'SOURCES' block, it raises a RuntimeError."
0,What does the function 'web' in this code do?,Questionanswering with LangChain Modal Functions,"With our application’s functionality implemented we can hook it into Modal.
As said above, we’re implementing a web endpoint,web, and a CLI command,cli. web cli @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function() @web_endpoint(method=""GET"") method=""GET"" ""GET"" def web query:str, show_sources:bool=False str bool False if return ""answer"" ""sources"" else return ""answer"" @stub.function() def cli query:str, show_sources:bool=False str bool False # Terminal codes for pretty-printing. ""\033[1m"" ""\033[0m"" print f""🦜{bold}ANSWER:{end}"" {bold} {end} print if print f""🔗{bold}SOURCES:{end}"" {bold} {end} for in print print ""----"" Copy Copy    Copy ","The 'web' function is a web endpoint that takes a string query and a boolean value for showing sources as parameters. It then uses the function 'qanda_langchain' with these parameters to retrieve an answer and sourcing. If show_sources is true, it returns both the answer and sources, otherwise, it only returns the answer."
3,What is the purpose of '@stub.function()' in this code?,Questionanswering with LangChain Modal Functions,"With our application’s functionality implemented we can hook it into Modal.
As said above, we’re implementing a web endpoint,web, and a CLI command,cli. web cli @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function() @web_endpoint(method=""GET"") method=""GET"" ""GET"" def web query:str, show_sources:bool=False str bool False if return ""answer"" ""sources"" else return ""answer"" @stub.function() def cli query:str, show_sources:bool=False str bool False # Terminal codes for pretty-printing. ""\033[1m"" ""\033[0m"" print f""🦜{bold}ANSWER:{end}"" {bold} {end} print if print f""🔗{bold}SOURCES:{end}"" {bold} {end} for in print print ""----"" Copy Copy    Copy ",The '@stub.function()' is a decorator in Python used here to denote that the 'web' and 'cli' functions are stub functions. This means they are placeholder functions that have not been fully implemented yet.
6,What does 'qanda_langchain(query)' do in this context?,Questionanswering with LangChain Modal Functions,"With our application’s functionality implemented we can hook it into Modal.
As said above, we’re implementing a web endpoint,web, and a CLI command,cli. web cli @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"")Copy @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function()@web_endpoint(method=""GET"")defweb(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)ifshow_sources:return{""answer"": answer,""sources"": sources,
        }else:return{""answer"": answer,
        }@stub.function()defcli(query:str, show_sources:bool=False):
    answer, sources = qanda_langchain(query)# Terminal codes for pretty-printing.bold, end =""\033[1m"",""\033[0m""print(f""🦜{bold}ANSWER:{end}"")print(answer)ifshow_sources:print(f""🔗{bold}SOURCES:{end}"")fortextinsources:print(text)print(""----"") @stub.function() @web_endpoint(method=""GET"") method=""GET"" ""GET"" def web query:str, show_sources:bool=False str bool False if return ""answer"" ""sources"" else return ""answer"" @stub.function() def cli query:str, show_sources:bool=False str bool False # Terminal codes for pretty-printing. ""\033[1m"" ""\033[0m"" print f""🦜{bold}ANSWER:{end}"" {bold} {end} print if print f""🔗{bold}SOURCES:{end}"" {bold} {end} for in print print ""----"" Copy Copy    Copy ",'qanda_langchain(query)' is a function that retrieves an answer and potential sources based on the passed in string query.
0,What did the president mention about Justice Breyer in his speech?,Questionanswering with LangChain Test run the CLI,"modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. ""What did the president say about Justice Breyer"" for continue in 's legacy. Copy Copy    Copy To see the text of the sources the model chain used to provide the answer, set the--show-sourcesflag. --show-sources modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True ""How many oil barrels were released from reserves"" Copy Copy    Copy ",The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.
3,What service was acclaimed in the president's speech about Justice Breyer?,Questionanswering with LangChain Test run the CLI,"modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. ""What did the president say about Justice Breyer"" for continue in 's legacy. Copy Copy    Copy To see the text of the sources the model chain used to provide the answer, set the--show-sourcesflag. --show-sources modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True ""How many oil barrels were released from reserves"" Copy Copy    Copy ",Justice Breyer's service was highly acclaimed in the president's speech.
6,What legacy did the president acknowledge in his speech concerning Justice Breyer?,Questionanswering with LangChain Test run the CLI,"modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy.Copy modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. modal run potus_speech_qanda.py --query""What did the president say about Justice Breyer""🦜 ANSWER:
The president thanked Justice Breyerforhis service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson tocontinueinJustice Breyer's legacy. ""What did the president say about Justice Breyer"" for continue in 's legacy. Copy Copy    Copy To see the text of the sources the model chain used to provide the answer, set the--show-sourcesflag. --show-sources modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=TrueCopy modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True modal run potus_speech_qanda.py \
   --query""How many oil barrels were released from reserves""\
   --show-sources=True ""How many oil barrels were released from reserves"" Copy Copy    Copy ",The president acknowledged Justice Breyer's legacy of excellence.
0,What does the Modal web endpoint allow you to do?,Questionanswering with LangChain Test run the web endpoint,"Modal makes it trivially easy to ship LangChain chains to the web. We can test drive this app’s web endpoint
by runningmodal serve potus_speech_qanda.pyand then hitting the endpoint withcurl: modal serve potus_speech_qanda.py curl curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run ""query=What did the president say about Justice Breyer"" Copy Copy    Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} { ""answer"" : ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."" } Copy Copy    Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpoint Question-answering with LangChain Defining dependencies Scraping the speech from whitehouse.gov Constructing the Q&A chain Modal Functions Test run the CLI Test run the web endpoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy ",It allows you to ship LangChain chains to the web.
3,"What is the response when querying: ""What did the president say about Justice Breyer""?",Questionanswering with LangChain Test run the web endpoint,"Modal makes it trivially easy to ship LangChain chains to the web. We can test drive this app’s web endpoint
by runningmodal serve potus_speech_qanda.pyand then hitting the endpoint withcurl: modal serve potus_speech_qanda.py curl curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run ""query=What did the president say about Justice Breyer"" Copy Copy    Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} { ""answer"" : ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."" } Copy Copy    Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpoint Question-answering with LangChain Defining dependencies Scraping the speech from whitehouse.gov Constructing the Q&A chain Modal Functions Test run the CLI Test run the web endpoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy ","The response is: ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."""
6,How can you run this example on Modal?,Questionanswering with LangChain Test run the web endpoint,"Modal makes it trivially easy to ship LangChain chains to the web. We can test drive this app’s web endpoint
by runningmodal serve potus_speech_qanda.pyand then hitting the endpoint withcurl: modal serve potus_speech_qanda.py curl curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run ""query=What did the president say about Justice Breyer"" Copy Copy    Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} { ""answer"" : ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."" } Copy Copy    Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpoint Question-answering with LangChain Defining dependencies Scraping the speech from whitehouse.gov Constructing the Q&A chain Modal Functions Test run the CLI Test run the web endpoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy ","After setting up, you need to clone the modal-examples repository and run modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'."
0,What is a possible way to test a LangChain app's web endpoint?,Questionanswering with LangChain Test run the web endpoint,"Modal makes it trivially easy to ship LangChain chains to the web. We can test drive this app’s web endpoint
by runningmodal serve potus_speech_qanda.pyand then hitting the endpoint withcurl: modal serve potus_speech_qanda.py curl curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run ""query=What did the president say about Justice Breyer"" Copy Copy    Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} { ""answer"" : ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."" } Copy Copy    Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpoint Question-answering with LangChain Defining dependencies Scraping the speech from whitehouse.gov Constructing the Q&A chain Modal Functions Test run the CLI Test run the web endpoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' $ modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' 'How many oil barrels were released from reserves' Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","You can test the web endpoint of a LangChain app by running the command ""modal serve potus_speech_qanda.py"", and then hitting the endpoint with curl."
3,What does the president say about Justice Breyer?,Questionanswering with LangChain Test run the web endpoint,"Modal makes it trivially easy to ship LangChain chains to the web. We can test drive this app’s web endpoint
by runningmodal serve potus_speech_qanda.pyand then hitting the endpoint withcurl: modal serve potus_speech_qanda.py curl curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run ""query=What did the president say about Justice Breyer"" Copy Copy    Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} { ""answer"" : ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."" } Copy Copy    Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpoint Question-answering with LangChain Defining dependencies Scraping the speech from whitehouse.gov Constructing the Q&A chain Modal Functions Test run the CLI Test run the web endpoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' $ modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' 'How many oil barrels were released from reserves' Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.
6,Who was nominated to continue in Justice Breyer's legacy?,Questionanswering with LangChain Test run the web endpoint,"Modal makes it trivially easy to ship LangChain chains to the web. We can test drive this app’s web endpoint
by runningmodal serve potus_speech_qanda.pyand then hitting the endpoint withcurl: modal serve potus_speech_qanda.py curl curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.runCopy curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run curl --get \
  --data-urlencode""query=What did the president say about Justice Breyer""\
  https://modal-labs--example-langchain-qanda-web.modal.run ""query=What did the president say about Justice Breyer"" Copy Copy    Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""}Copy {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} {""answer"":""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy.""} { ""answer"" : ""The president thanked Justice Breyer for his service and mentioned his legacy of excellence. He also nominated Ketanji Brown Jackson to continue in Justice Breyer's legacy."" } Copy Copy    Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Question-answering with LangChainDefining dependenciesScraping the speech from whitehouse.govConstructing the Q&A chainModal FunctionsTest run the CLITest run the web endpoint Question-answering with LangChain Defining dependencies Scraping the speech from whitehouse.gov Constructing the Q&A chain Modal Functions Test run the CLI Test run the web endpoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves'Copy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' $ modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' modal run 06_gpu_and_ml/langchains/potus_speech_qanda.py --query'How many oil barrels were released from reserves' 'How many oil barrels were released from reserves' Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",Ketanji Brown Jackson was nominated to continue in Justice Breyer's legacy.
0,What function does Modal serve for running apps? ,Developing and debugging,"Modal makes it easy to run apps in the cloud, try code changes in the cloud, and
debug remotely executing code as if it were right there on your laptop. To speed
boost your inner dev loop, this guide provides a rundown of tools and techniques
for developing and debugging software in Modal. ",Modal makes it easy to run apps in the cloud.
3,How does Modal assist with debugging remotely executing code? ,Developing and debugging,"Modal makes it easy to run apps in the cloud, try code changes in the cloud, and
debug remotely executing code as if it were right there on your laptop. To speed
boost your inner dev loop, this guide provides a rundown of tools and techniques
for developing and debugging software in Modal. ",Modal enables debugging remotely executing code as if it were right there on your laptop.
6,What can speed boost your inner dev loop? ,Developing and debugging,"Modal makes it easy to run apps in the cloud, try code changes in the cloud, and
debug remotely executing code as if it were right there on your laptop. To speed
boost your inner dev loop, this guide provides a rundown of tools and techniques
for developing and debugging software in Modal. ",This guide on tools and techniques for developing and debugging software in Modal can speed boost your inner dev loop.
0,What command creates a loop for live updating an app in Modal?,Developing and debugging Live updating,"Hot reloading withmodal serve modal serve Modal has the commandmodal serve <filename.py>, which creates a loop that
live updates an app when any of the supporting files change. modal serve <filename.py> Live updating works with web endpoints, syncing your changes as you make them,
and it also works well with cron schedules and job queues. frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") from import @stub.function() @web_endpoint() def f return ""I update on file edit!"" @stub.function(schedule=modal.Period(seconds=5)) schedule=modal.Period(seconds=5) seconds=5 5 def run_me print ""I also update on file edit!"" Copy Copy    Copy If you edit this file, themodal servecommand will detect the change and
update the code, without having to restart the command. modal serve ","The command is ""modal serve <filename.py>""."
3,Where does live updating work with in Modal?,Developing and debugging Live updating,"Hot reloading withmodal serve modal serve Modal has the commandmodal serve <filename.py>, which creates a loop that
live updates an app when any of the supporting files change. modal serve <filename.py> Live updating works with web endpoints, syncing your changes as you make them,
and it also works well with cron schedules and job queues. frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") from import @stub.function() @web_endpoint() def f return ""I update on file edit!"" @stub.function(schedule=modal.Period(seconds=5)) schedule=modal.Period(seconds=5) seconds=5 5 def run_me print ""I also update on file edit!"" Copy Copy    Copy If you edit this file, themodal servecommand will detect the change and
update the code, without having to restart the command. modal serve ",Live updating works with web endpoints and it also works well with cron schedules and job queues.
6,What happens when you edit a file while using the 'modal serve' command?,Developing and debugging Live updating,"Hot reloading withmodal serve modal serve Modal has the commandmodal serve <filename.py>, which creates a loop that
live updates an app when any of the supporting files change. modal serve <filename.py> Live updating works with web endpoints, syncing your changes as you make them,
and it also works well with cron schedules and job queues. frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"")Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") frommodalimportStub, web_endpoint

stub = Stub()@stub.function()@web_endpoint()deff():return""I update on file edit!""@stub.function(schedule=modal.Period(seconds=5))defrun_me():print(""I also update on file edit!"") from import @stub.function() @web_endpoint() def f return ""I update on file edit!"" @stub.function(schedule=modal.Period(seconds=5)) schedule=modal.Period(seconds=5) seconds=5 5 def run_me print ""I also update on file edit!"" Copy Copy    Copy If you edit this file, themodal servecommand will detect the change and
update the code, without having to restart the command. modal serve ","If you edit a file, the 'modal serve' command will detect the change and update the code, without having to restart the command."
0,What does each running Modal app do?,Developing and debugging Observability,"Each running Modal app, including all ephemeral apps, streams logs and resource
metrics back to you for viewing. On start, an app will log a dashboard link that will take you its app page. $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $ python3 main.py Copy Copy    Copy From this page you can access the following: logs, both from your application and system-level logs from Modalcompute resource metrics (CPU, RAM, GPU)function call history, including historical success/failure counts logs, both from your application and system-level logs from Modal compute resource metrics (CPU, RAM, GPU) function call history, including historical success/failure counts Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debugging Interactivity Interactive functions Interactive shell modal shell Live updating Hot reloading with modal serve Observability CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Each running Modal app streams logs and resource metrics back to the user for viewing.
3,Where can the user view the app page?,Developing and debugging Observability,"Each running Modal app, including all ephemeral apps, streams logs and resource
metrics back to you for viewing. On start, an app will log a dashboard link that will take you its app page. $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $ python3 main.py Copy Copy    Copy From this page you can access the following: logs, both from your application and system-level logs from Modalcompute resource metrics (CPU, RAM, GPU)function call history, including historical success/failure counts logs, both from your application and system-level logs from Modal compute resource metrics (CPU, RAM, GPU) function call history, including historical success/failure counts Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debugging Interactivity Interactive functions Interactive shell modal shell Live updating Hot reloading with modal serve Observability CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The app page can be viewed at the URL provided, for example https://modal.com/apps/ap-XYZ1234."
6,What is provided by Modal for developing and debugging?,Developing and debugging Observability,"Each running Modal app, including all ephemeral apps, streams logs and resource
metrics back to you for viewing. On start, an app will log a dashboard link that will take you its app page. $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $ python3 main.py Copy Copy    Copy From this page you can access the following: logs, both from your application and system-level logs from Modalcompute resource metrics (CPU, RAM, GPU)function call history, including historical success/failure counts logs, both from your application and system-level logs from Modal compute resource metrics (CPU, RAM, GPU) function call history, including historical success/failure counts Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debugging Interactivity Interactive functions Interactive shell modal shell Live updating Hot reloading with modal serve Observability CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal provides interactivity with interactive functions and a ""modal"" shell, live updating and hot reloading with modal serve, and observability for developing and debugging."
0,What information does a running Modal app stream back for viewing?,Developing and debugging Observability,"Each running Modal app, including all ephemeral apps, streams logs and resource
metrics back to you for viewing. On start, an app will log a dashboard link that will take you its app page. $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $ python3 main.py Copy Copy    Copy From this page you can access the following: logs, both from your application and system-level logs from Modalcompute resource metrics (CPU, RAM, GPU)function call history, including historical success/failure counts logs, both from your application and system-level logs from Modal compute resource metrics (CPU, RAM, GPU) function call history, including historical success/failure counts Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debugging Interactivity Interactive functions Interactive shell modal shell Live updating Hot reloading with modal serve Observability CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Each running Modal app streams logs and resource metrics back for viewing.
3,What command initializes a Modal app?,Developing and debugging Observability,"Each running Modal app, including all ephemeral apps, streams logs and resource
metrics back to you for viewing. On start, an app will log a dashboard link that will take you its app page. $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $ python3 main.py Copy Copy    Copy From this page you can access the following: logs, both from your application and system-level logs from Modalcompute resource metrics (CPU, RAM, GPU)function call history, including historical success/failure counts logs, both from your application and system-level logs from Modal compute resource metrics (CPU, RAM, GPU) function call history, including historical success/failure counts Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debugging Interactivity Interactive functions Interactive shell modal shell Live updating Hot reloading with modal serve Observability CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The command $python3 main.py initializes a Modal app.
6,What are some features of Modal's observability and debugging?,Developing and debugging Observability,"Each running Modal app, including all ephemeral apps, streams logs and resource
metrics back to you for viewing. On start, an app will log a dashboard link that will take you its app page. $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
...Copy $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $python3 main.py✓ Initialized. View app page at https://modal.com/apps/ap-XYZ1234.
... $ python3 main.py Copy Copy    Copy From this page you can access the following: logs, both from your application and system-level logs from Modalcompute resource metrics (CPU, RAM, GPU)function call history, including historical success/failure counts logs, both from your application and system-level logs from Modal compute resource metrics (CPU, RAM, GPU) function call history, including historical success/failure counts Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debuggingInteractivityInteractive functionsInteractive shellmodal shellLive updatingHot reloading with modal serveObservability Developing and debugging Interactivity Interactive functions Interactive shell modal shell Live updating Hot reloading with modal serve Observability CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal's observability and debugging features include interactive functions, interactive shell, live updating, and hot reloading."
0,What is the Whisper speech recognition model?,Example Parallel podcast transcription using Whisper,"OpenAI’s late-September 2022 release of theWhisperspeech recognition model was
another eye-widening milestone in the rapidly improving field of deep learning,
andlike otherswe
jumped to try Whisper on podcasts. Whisper Whisper like others The result is theModal Podcast Transcriber! Modal Podcast Transcriber   This example application is more feature-packed than others, and doesn’t fit in
a single page of code and commentary. So instead of progressing through the
example’s code linearly, this post provides a higher-level walkthrough of how
Modal is used to do fast, on-demand podcast episode transcription for whichever
podcast you’d like. ","The Whisper speech recognition model is a release from OpenAI in late-September 2022, marking a significant milestone in the field of deep learning."
3,When was the Whisper speech recognition model released by OpenAI?,Example Parallel podcast transcription using Whisper,"OpenAI’s late-September 2022 release of theWhisperspeech recognition model was
another eye-widening milestone in the rapidly improving field of deep learning,
andlike otherswe
jumped to try Whisper on podcasts. Whisper Whisper like others The result is theModal Podcast Transcriber! Modal Podcast Transcriber   This example application is more feature-packed than others, and doesn’t fit in
a single page of code and commentary. So instead of progressing through the
example’s code linearly, this post provides a higher-level walkthrough of how
Modal is used to do fast, on-demand podcast episode transcription for whichever
podcast you’d like. ",The Whisper speech recognition model was released by OpenAI in late-September 2022.
6,Is the Modal Podcast Transcriber used only for specific podcasts?,Example Parallel podcast transcription using Whisper,"OpenAI’s late-September 2022 release of theWhisperspeech recognition model was
another eye-widening milestone in the rapidly improving field of deep learning,
andlike otherswe
jumped to try Whisper on podcasts. Whisper Whisper like others The result is theModal Podcast Transcriber! Modal Podcast Transcriber   This example application is more feature-packed than others, and doesn’t fit in
a single page of code and commentary. So instead of progressing through the
example’s code linearly, this post provides a higher-level walkthrough of how
Modal is used to do fast, on-demand podcast episode transcription for whichever
podcast you’d like. ","No, the Modal Podcast Transcriber can be used for transcription of any podcast episode on demand."
0,What components make up the Whisper Tech-stack application?,Example Parallel podcast transcription using Whisper Techstack overview,"The entire application is hosted serverlessly on Modal and consists of these
main components: A React +Vitesingle page application (SPA) deployed
as static files into a Modal web endpoint.A Modal web endpoint runningFastAPIThePodchaser APIprovides
podcast search and episode metadata retrieval. It’s hooked into our code with
aModal Secret.A Modal async job queue, described in more detail below. A React +Vitesingle page application (SPA) deployed
as static files into a Modal web endpoint. Vite A Modal web endpoint runningFastAPI FastAPI ThePodchaser APIprovides
podcast search and episode metadata retrieval. It’s hooked into our code with
aModal Secret. Podchaser API Modal Secret A Modal async job queue, described in more detail below. All of this is deployed with one command and costs$0.00when it’s not
transcribing podcasts or serving HTTP requests. $0.00 Speed-boosting Whisper with parallelism Modal’s dead-simple parallelism primitives are the key to doing the
transcription so quickly. Even with a GPU, transcribing a full episode serially
was taking around 10 minutes. But by pulling inffmpegwith a simple.pip_install(""ffmpeg-python"")addition to our Modal Image, we could exploit the natural silences of the
podcast medium to partition episodes into hundreds of short segments. Each
segment is transcribed by Whisper in its own container task with 2 physical CPU
cores, and when all are done we stitch the segments back together with only a
minimal loss in transcription quality. This approach actually accords quite well
with Whisper’s model architecture: ffmpeg .pip_install(""ffmpeg-python"") “The Whisper architecture is a simple end-to-end approach, implemented as an
encoder-decoder Transformer. Input audio is split into 30-second chunks,
converted into a log-Mel spectrogram, and then passed into an encoder.”―Introducing Whisper “The Whisper architecture is a simple end-to-end approach, implemented as an
encoder-decoder Transformer. Input audio is split into 30-second chunks,
converted into a log-Mel spectrogram, and then passed into an encoder.” ―Introducing Whisper Introducing Whisper Introducing Whisper ","The Whisper Tech-stack application is made up of a React +Vite single page application (SPA) deployed as static files into a Modal web endpoint, a Modal web endpoint running FastAPI, the Podchaser API for podcast search and episode metadata retrieval, a Modal Secret and a Modal async job queue."
3,How is Whisper boosted in speed and made efficient in transcribing podcasts?,Example Parallel podcast transcription using Whisper Techstack overview,"The entire application is hosted serverlessly on Modal and consists of these
main components: A React +Vitesingle page application (SPA) deployed
as static files into a Modal web endpoint.A Modal web endpoint runningFastAPIThePodchaser APIprovides
podcast search and episode metadata retrieval. It’s hooked into our code with
aModal Secret.A Modal async job queue, described in more detail below. A React +Vitesingle page application (SPA) deployed
as static files into a Modal web endpoint. Vite A Modal web endpoint runningFastAPI FastAPI ThePodchaser APIprovides
podcast search and episode metadata retrieval. It’s hooked into our code with
aModal Secret. Podchaser API Modal Secret A Modal async job queue, described in more detail below. All of this is deployed with one command and costs$0.00when it’s not
transcribing podcasts or serving HTTP requests. $0.00 Speed-boosting Whisper with parallelism Modal’s dead-simple parallelism primitives are the key to doing the
transcription so quickly. Even with a GPU, transcribing a full episode serially
was taking around 10 minutes. But by pulling inffmpegwith a simple.pip_install(""ffmpeg-python"")addition to our Modal Image, we could exploit the natural silences of the
podcast medium to partition episodes into hundreds of short segments. Each
segment is transcribed by Whisper in its own container task with 2 physical CPU
cores, and when all are done we stitch the segments back together with only a
minimal loss in transcription quality. This approach actually accords quite well
with Whisper’s model architecture: ffmpeg .pip_install(""ffmpeg-python"") “The Whisper architecture is a simple end-to-end approach, implemented as an
encoder-decoder Transformer. Input audio is split into 30-second chunks,
converted into a log-Mel spectrogram, and then passed into an encoder.”―Introducing Whisper “The Whisper architecture is a simple end-to-end approach, implemented as an
encoder-decoder Transformer. Input audio is split into 30-second chunks,
converted into a log-Mel spectrogram, and then passed into an encoder.” ―Introducing Whisper Introducing Whisper Introducing Whisper ","Whisper is speed-boosted using Modal's parallelism primitives. This involves partitioning episodes into hundreds of short segments, each transcripted by Whisper in its own container task with 2 physical CPU cores and then stitching the segments back together. "
6,What does it cost to deploy the Whisper Tech-stack application when it's not transcribing podcasts or serving HTTP requests? ,Example Parallel podcast transcription using Whisper Techstack overview,"The entire application is hosted serverlessly on Modal and consists of these
main components: A React +Vitesingle page application (SPA) deployed
as static files into a Modal web endpoint.A Modal web endpoint runningFastAPIThePodchaser APIprovides
podcast search and episode metadata retrieval. It’s hooked into our code with
aModal Secret.A Modal async job queue, described in more detail below. A React +Vitesingle page application (SPA) deployed
as static files into a Modal web endpoint. Vite A Modal web endpoint runningFastAPI FastAPI ThePodchaser APIprovides
podcast search and episode metadata retrieval. It’s hooked into our code with
aModal Secret. Podchaser API Modal Secret A Modal async job queue, described in more detail below. All of this is deployed with one command and costs$0.00when it’s not
transcribing podcasts or serving HTTP requests. $0.00 Speed-boosting Whisper with parallelism Modal’s dead-simple parallelism primitives are the key to doing the
transcription so quickly. Even with a GPU, transcribing a full episode serially
was taking around 10 minutes. But by pulling inffmpegwith a simple.pip_install(""ffmpeg-python"")addition to our Modal Image, we could exploit the natural silences of the
podcast medium to partition episodes into hundreds of short segments. Each
segment is transcribed by Whisper in its own container task with 2 physical CPU
cores, and when all are done we stitch the segments back together with only a
minimal loss in transcription quality. This approach actually accords quite well
with Whisper’s model architecture: ffmpeg .pip_install(""ffmpeg-python"") “The Whisper architecture is a simple end-to-end approach, implemented as an
encoder-decoder Transformer. Input audio is split into 30-second chunks,
converted into a log-Mel spectrogram, and then passed into an encoder.”―Introducing Whisper “The Whisper architecture is a simple end-to-end approach, implemented as an
encoder-decoder Transformer. Input audio is split into 30-second chunks,
converted into a log-Mel spectrogram, and then passed into an encoder.” ―Introducing Whisper Introducing Whisper Introducing Whisper ",It costs $0.00 to deploy the Whisper Tech-stack application when it's not transcribing podcasts or serving HTTP requests.
0,What is the purpose of the app mentioned in the content?,Example Parallel podcast transcription using Whisper Run this app on Modal,"All source code for this example can befound on GitHub.
TheREADME.mdincludes instructions on setting up the frontend build and
getting authenticated with the Podchaser API. Happy transcribing! found on GitHub README.md Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using Whisper Hour-long episodes transcribed in just 1 minute Try it yourself Tech-stack overview Speed-boosting Whisper with parallelism Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The purpose of the app is to transcribe podcasts, specifically using a method called 'Whisper'."
3,On which platform can you run this app? ,Example Parallel podcast transcription using Whisper Run this app on Modal,"All source code for this example can befound on GitHub.
TheREADME.mdincludes instructions on setting up the frontend build and
getting authenticated with the Podchaser API. Happy transcribing! found on GitHub README.md Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using Whisper Hour-long episodes transcribed in just 1 minute Try it yourself Tech-stack overview Speed-boosting Whisper with parallelism Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can run this app on Modal.
6,Who owns the copyright for this software?,Example Parallel podcast transcription using Whisper Run this app on Modal,"All source code for this example can befound on GitHub.
TheREADME.mdincludes instructions on setting up the frontend build and
getting authenticated with the Podchaser API. Happy transcribing! found on GitHub README.md Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using Whisper Hour-long episodes transcribed in just 1 minute Try it yourself Tech-stack overview Speed-boosting Whisper with parallelism Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright for this software is owned by Modal Labs, Inc."
0,What is the purpose of the Whispers app in this context?,Example Parallel podcast transcription using Whisper Run this app on Modal,"All source code for this example can befound on GitHub.
TheREADME.mdincludes instructions on setting up the frontend build and
getting authenticated with the Podchaser API. Happy transcribing! found on GitHub README.md Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using Whisper Hour-long episodes transcribed in just 1 minute Try it yourself Tech-stack overview Speed-boosting Whisper with parallelism Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",It is used to transcribe hour-long podcasts in just 1 minute.
3,Can this application be run on Modal?,Example Parallel podcast transcription using Whisper Run this app on Modal,"All source code for this example can befound on GitHub.
TheREADME.mdincludes instructions on setting up the frontend build and
getting authenticated with the Podchaser API. Happy transcribing! found on GitHub README.md Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using Whisper Hour-long episodes transcribed in just 1 minute Try it yourself Tech-stack overview Speed-boosting Whisper with parallelism Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Yes, this application can be run on Modal."
6,What is the expected output after running the given JS code?,Example Parallel podcast transcription using Whisper Run this app on Modal,"All source code for this example can befound on GitHub.
TheREADME.mdincludes instructions on setting up the frontend build and
getting authenticated with the Podchaser API. Happy transcribing! found on GitHub README.md Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using WhisperHour-long episodes transcribed in just 1 minuteTry it yourselfTech-stack overviewSpeed-boosting Whisper with parallelismRun this app on Modal Example: Parallel podcast transcription using Whisper Hour-long episodes transcribed in just 1 minute Try it yourself Tech-stack overview Speed-boosting Whisper with parallelism Run this app on Modal CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The JS code is expected to start the app on the assigned element with the given parameters.
0,What do you automatically receive once you sign up to Modal?,Workspaces,"After having signed up to Modal, you’ve automatically received a Personal
Workspace that you can use to run and deploy personal apps. To deploy
collaborate with others, however, you can create or join additional Workspaces. ",You automatically receive a Personal Workspace that you can use to run and deploy personal apps.
3,Can you create or join additional Workspaces in Modal?,Workspaces,"After having signed up to Modal, you’ve automatically received a Personal
Workspace that you can use to run and deploy personal apps. To deploy
collaborate with others, however, you can create or join additional Workspaces. ","Yes, you can create or join additional Workspaces in Modal."
6,What can you do with additional Workspaces in Modal?,Workspaces,"After having signed up to Modal, you’ve automatically received a Personal
Workspace that you can use to run and deploy personal apps. To deploy
collaborate with others, however, you can create or join additional Workspaces. ",You can deploy collaborate with others.
0,How do I invite a new member to my Workspace?,Workspaces Inviting new Workspace members,"To invite a new Workspace member, first switch your dashboard environment to an
organization Workspace. Navigate tothe settings pageand
under the “Invite Member” section enter the email address of the person you
would like to invite. Click “invite” to send the invite. Invited members must be
a member of the active Workspaces’s associated GitHub organization. the settings page The invited person will receive an email with a link to join your Workspace. The
email link will also allow them to sign up to Modal and create a Personal
Workspace if they do not have one already. ",First switch your dashboard environment to an organization Workspace. Navigate to the settings page and under the “Invite Member” section enter the email address of the person you would like to invite. Click “invite” to send the invite.
3,How will an invited person join the Workspace?,Workspaces Inviting new Workspace members,"To invite a new Workspace member, first switch your dashboard environment to an
organization Workspace. Navigate tothe settings pageand
under the “Invite Member” section enter the email address of the person you
would like to invite. Click “invite” to send the invite. Invited members must be
a member of the active Workspaces’s associated GitHub organization. the settings page The invited person will receive an email with a link to join your Workspace. The
email link will also allow them to sign up to Modal and create a Personal
Workspace if they do not have one already. ",The invited person will receive an email with a link to join your Workspace.
6,Where do you need to navigate to invite a new Workspace member?,Workspaces Inviting new Workspace members,"To invite a new Workspace member, first switch your dashboard environment to an
organization Workspace. Navigate tothe settings pageand
under the “Invite Member” section enter the email address of the person you
would like to invite. Click “invite” to send the invite. Invited members must be
a member of the active Workspaces’s associated GitHub organization. the settings page The invited person will receive an email with a link to join your Workspace. The
email link will also allow them to sign up to Modal and create a Personal
Workspace if they do not have one already. ","To invite a new Workspace member, navigate to the settings page under your dashboard environment switched to an organization Workspace."
0,What is required to interact with a Workspace’s resources programmatically?,Workspaces Create a token for a Workspace,"To interact with a Workspace’s resources programmatically, you need to add an
API token for that Workspace. Your existing API tokens are displayed onthe settings pageand new API tokens can be added for a
particular Workspace. the settings page After adding a token for a Workspace to your Modal config file you can activate
that Workspace’s profile using the CLI (see below). As an administrator or workspace owner you can manage active tokens for a
workspace onthe member tokens page. For more
information on API token management see thedocumentation about configuration. the member tokens page documentation about configuration ",You need to add an API token for that Workspace.
3,How can you add new API tokens?,Workspaces Create a token for a Workspace,"To interact with a Workspace’s resources programmatically, you need to add an
API token for that Workspace. Your existing API tokens are displayed onthe settings pageand new API tokens can be added for a
particular Workspace. the settings page After adding a token for a Workspace to your Modal config file you can activate
that Workspace’s profile using the CLI (see below). As an administrator or workspace owner you can manage active tokens for a
workspace onthe member tokens page. For more
information on API token management see thedocumentation about configuration. the member tokens page documentation about configuration ",New API tokens can be added for a particular Workspace on the settings page.
6,Where can an administrator or workspace owner manage active tokens for a workspace?,Workspaces Create a token for a Workspace,"To interact with a Workspace’s resources programmatically, you need to add an
API token for that Workspace. Your existing API tokens are displayed onthe settings pageand new API tokens can be added for a
particular Workspace. the settings page After adding a token for a Workspace to your Modal config file you can activate
that Workspace’s profile using the CLI (see below). As an administrator or workspace owner you can manage active tokens for a
workspace onthe member tokens page. For more
information on API token management see thedocumentation about configuration. the member tokens page documentation about configuration ",An administrator or workspace owner can manage active tokens for a workspace on the member tokens page.
0,What determines which personal or organizational Workspace is associated with your actions?,Workspaces Switching active Workspace,"When on the dashboard or using the CLI, the active profile determines which
personal or organizational Workspace is associated with your actions. Dashboard You can switch between organization Workspaces and your Personal Workspace by
using the workspace selector at the top ofthe dashboard. the dashboard CLI To switch the Workspace associated with CLI commands, usemodal profile activate. modal profile activate ",The active profile determines which personal or organizational Workspace is associated with your actions.
3,What command is used to switch the Workspace associated with CLI commands?,Workspaces Switching active Workspace,"When on the dashboard or using the CLI, the active profile determines which
personal or organizational Workspace is associated with your actions. Dashboard You can switch between organization Workspaces and your Personal Workspace by
using the workspace selector at the top ofthe dashboard. the dashboard CLI To switch the Workspace associated with CLI commands, usemodal profile activate. modal profile activate ","To switch the Workspace associated with CLI commands, use 'modal profile activate'."
6,Where is the workspace selector located?,Workspaces Switching active Workspace,"When on the dashboard or using the CLI, the active profile determines which
personal or organizational Workspace is associated with your actions. Dashboard You can switch between organization Workspaces and your Personal Workspace by
using the workspace selector at the top ofthe dashboard. the dashboard CLI To switch the Workspace associated with CLI commands, usemodal profile activate. modal profile activate ",The workspace selector is located at the top of the dashboard.
0,What are the three different levels of access privileges in a workspace?,Workspaces Administrating workspace members,"Workspaces have three different levels of access privileges: OwnerAdministratorUser Owner Administrator User The user that creates a workspace is automatically set as theOwnerfor that
workspace. The owner can assign any other roles within the workspace, as well as
disable other members of the workspace. Owner AnAdministratorwithin a workspace can assign all roles exceptOwnerand can also disable other members of the workspace. Administrator Owner AUserof a workspace can not assign any access privileges within the
workspace but can otherwise perform any action like running and deploying apps
and modify Secrets. User As an Owner or administrator you can administrate the access privileges of other
members onthe Members settings page the Members settings page ","Owner, Administrator, and User."
3,What is the difference in privileges between an Owner and an Administrator within a workspace?,Workspaces Administrating workspace members,"Workspaces have three different levels of access privileges: OwnerAdministratorUser Owner Administrator User The user that creates a workspace is automatically set as theOwnerfor that
workspace. The owner can assign any other roles within the workspace, as well as
disable other members of the workspace. Owner AnAdministratorwithin a workspace can assign all roles exceptOwnerand can also disable other members of the workspace. Administrator Owner AUserof a workspace can not assign any access privileges within the
workspace but can otherwise perform any action like running and deploying apps
and modify Secrets. User As an Owner or administrator you can administrate the access privileges of other
members onthe Members settings page the Members settings page ","An Owner can assign any roles within the workspace, while an Administrator can assign all roles except Owner. Both can disable other members of the workspace."
6,Where can an Owner or Administrator administrate the access privileges of other members?,Workspaces Administrating workspace members,"Workspaces have three different levels of access privileges: OwnerAdministratorUser Owner Administrator User The user that creates a workspace is automatically set as theOwnerfor that
workspace. The owner can assign any other roles within the workspace, as well as
disable other members of the workspace. Owner AnAdministratorwithin a workspace can assign all roles exceptOwnerand can also disable other members of the workspace. Administrator Owner AUserof a workspace can not assign any access privileges within the
workspace but can otherwise perform any action like running and deploying apps
and modify Secrets. User As an Owner or administrator you can administrate the access privileges of other
members onthe Members settings page the Members settings page ",On the Members settings page.
0,How do you leave a workspace?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","To leave a Workspace, navigate to the settings page and click “leave” on a listed Workspace."
1,What are the options available in the workspace?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The options available in the workspace include creating a workspace, inviting new workspace members, creating a token for a workspace, switching active workspace, administering workspace members, and leaving a workspace."
2,Who is the owner of the copyright content presented?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright content is owned by Modal Labs, Inc."
3,How can a new workspace member be added?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","New workspace members can be added by using the ""Inviting new Workspace members"" option in the workspace."
4,"What action does clicking ""create a workspace"" lead to?",Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Clicking ""create a workspace"" initiates the process of establishing a new workspace."
0,How can you leave a Workspace?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","To leave a Workspace, navigate to the settings page and click “leave” on a listed Workspace."
3,What is a possible action you can perform on a Workspace?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can create a token for a Workspace.
6,Who is the legal owner of the site mentioned in the content?,Workspaces Leaving a Workspace,"To leave a Workspace, navigate tothe settings pageand
click “leave” on a listed Workspace. the settings page WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace WorkspacesCreate a WorkspaceInviting new Workspace membersCreate a token for a WorkspaceSwitching active WorkspaceDashboardCLIAdministrating workspace membersLeaving a Workspace Workspaces Create a Workspace Inviting new Workspace members Create a token for a Workspace Switching active Workspace Dashboard CLI Administrating workspace members Leaving a Workspace CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc., owns the site, as indicated by © 2023 Modal Labs, Inc."
0,What software is used for face detection on YouTube videos?,Face detection on YouTube videos,"This is an example that usesOpenCVas well as video utilitiespytubeandmoviepyto process video files in parallel. OpenCV pytube moviepy The face detection is a pretty simple model built into OpenCV
and is not state of the art. ","OpenCV, pytube, and moviepy"
3,What utilities are used in processing video files in parallel on YouTube?,Face detection on YouTube videos,"This is an example that usesOpenCVas well as video utilitiespytubeandmoviepyto process video files in parallel. OpenCV pytube moviepy The face detection is a pretty simple model built into OpenCV
and is not state of the art. ",pytube and moviepy
6,"Is the face detection model used in OpenCV, pytube, and moviepy state of the art?",Face detection on YouTube videos,"This is an example that usesOpenCVas well as video utilitiespytubeandmoviepyto process video files in parallel. OpenCV pytube moviepy The face detection is a pretty simple model built into OpenCV
and is not state of the art. ","No, it is not state of the art."
0,What is the main function of the script discussed?,Face detection on YouTube videos Running the script,"Running this script should take approximately a minute or less.
It might output a lot of warnings to standard error.
These are generally harmless. Note that we don’t preserve the sound in the video. ",The main function of the script is face detection on YouTube videos.
3,What type of notifications may the script display while running?,Face detection on YouTube videos Running the script,"Running this script should take approximately a minute or less.
It might output a lot of warnings to standard error.
These are generally harmless. Note that we don’t preserve the sound in the video. ",The script might output a lot of warnings to standard error.
6,Does the script preserve the sound in the video?,Face detection on YouTube videos Running the script,"Running this script should take approximately a minute or less.
It might output a lot of warnings to standard error.
These are generally harmless. Note that we don’t preserve the sound in the video. ","No, the script does not preserve the sound in the video."
0,What platform can the face detection model be used on?,Face detection on YouTube videos Further directions,"As you can tell from the resulting video, this face detection model is not state of the art.
It has plenty of false positives (non-faces being labeled faces) and false negatives (real faces not being labeled).
For better model, consider a modern one based on deep learning. Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directions Face detection on YouTube videos The result The Python code Face detection function Modal entrypoint function Local entrypoint Running the script Further directions Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy ",YouTube videos.
3,What kind of model is suggested for better face detection?,Face detection on YouTube videos Further directions,"As you can tell from the resulting video, this face detection model is not state of the art.
It has plenty of false positives (non-faces being labeled faces) and false negatives (real faces not being labeled).
For better model, consider a modern one based on deep learning. Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directions Face detection on YouTube videos The result The Python code Face detection function Modal entrypoint function Local entrypoint Running the script Further directions Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy ",A modern one based on deep learning.
6,Where can I find the Python code to run this face detection example?,Face detection on YouTube videos Further directions,"As you can tell from the resulting video, this face detection model is not state of the art.
It has plenty of false positives (non-faces being labeled faces) and false negatives (real faces not being labeled).
For better model, consider a modern one based on deep learning. Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directions Face detection on YouTube videos The result The Python code Face detection function Modal entrypoint function Local entrypoint Running the script Further directions Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy ",You can clone the 'modal-examples' repository from Github.
0,What is the main issue with the face detection model described in the content?,Face detection on YouTube videos Further directions,"As you can tell from the resulting video, this face detection model is not state of the art.
It has plenty of false positives (non-faces being labeled faces) and false negatives (real faces not being labeled).
For better model, consider a modern one based on deep learning. Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directions Face detection on YouTube videos The result The Python code Face detection function Modal entrypoint function Local entrypoint Running the script Further directions Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 03_scaling_out/youtube_face_detection.py $ modal run 03_scaling_out/youtube_face_detection.py modal run 03_scaling_out/youtube_face_detection.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The face detection model is not state of the art, with many false positives and false negatives."
3,How long does it take to run an example on Modal as mentioned in the content?,Face detection on YouTube videos Further directions,"As you can tell from the resulting video, this face detection model is not state of the art.
It has plenty of false positives (non-faces being labeled faces) and false negatives (real faces not being labeled).
For better model, consider a modern one based on deep learning. Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directions Face detection on YouTube videos The result The Python code Face detection function Modal entrypoint function Local entrypoint Running the script Further directions Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 03_scaling_out/youtube_face_detection.py $ modal run 03_scaling_out/youtube_face_detection.py modal run 03_scaling_out/youtube_face_detection.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",An example can be run on Modal in 60 seconds.
6,"When was Modal Labs, Inc. founded as indicated in the content?",Face detection on YouTube videos Further directions,"As you can tell from the resulting video, this face detection model is not state of the art.
It has plenty of false positives (non-faces being labeled faces) and false negatives (real faces not being labeled).
For better model, consider a modern one based on deep learning. Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directionsTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Face detection on YouTube videosThe resultThe Python codeFace detection functionModal entrypoint functionLocal entrypointRunning the scriptFurther directions Face detection on YouTube videos The result The Python code Face detection function Modal entrypoint function Local entrypoint Running the script Further directions Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 03_scaling_out/youtube_face_detection.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 03_scaling_out/youtube_face_detection.py $ modal run 03_scaling_out/youtube_face_detection.py modal run 03_scaling_out/youtube_face_detection.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. was founded in 2023."
0,What is the difference between a standard (blocking) and asynchronous function in Modal API?,Asynchronous API usage,"All of the functions in Modal are available in both standard (blocking) and
asynchronous variants. The async interface can be accessed by appending.aioto any function in the Modal API. .aio For example, instead ofmy_modal_funcion.remote(""hello"")in a blocking
context, you can useawait my_modal_function.remote.aio(""hello"")to get an
asynchronous coroutine response, for use with Python’sasynciolibrary. my_modal_funcion.remote(""hello"") await my_modal_function.remote.aio(""hello"") asyncio importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) import import @stub.function() async def myfunc @stub.local_entrypoint() async def main # execute 100 remote calls to myfunc in parallel await for in range 100 Copy Copy    Copy This is an advanced feature. If you are comfortable with asynchronous
programming, you can use this to create arbitrary parallel execution patterns,
with the added benefit that any Modal functions will be executed remotely. ","Standard (blocking) functions in Modal API pause execution until the function is complete, while asynchronous ones allow other operations to continue before they're complete. "
3,What is the purpose of Python’s asyncio library in context of the Modal API?,Asynchronous API usage,"All of the functions in Modal are available in both standard (blocking) and
asynchronous variants. The async interface can be accessed by appending.aioto any function in the Modal API. .aio For example, instead ofmy_modal_funcion.remote(""hello"")in a blocking
context, you can useawait my_modal_function.remote.aio(""hello"")to get an
asynchronous coroutine response, for use with Python’sasynciolibrary. my_modal_funcion.remote(""hello"") await my_modal_function.remote.aio(""hello"") asyncio importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) import import @stub.function() async def myfunc @stub.local_entrypoint() async def main # execute 100 remote calls to myfunc in parallel await for in range 100 Copy Copy    Copy This is an advanced feature. If you are comfortable with asynchronous
programming, you can use this to create arbitrary parallel execution patterns,
with the added benefit that any Modal functions will be executed remotely. ",Python’s asyncio library is used to handle the asynchronous coroutine responses from the Modal API functions.
6,What is the advantage of asynchronous Modal functions being executed remotely?,Asynchronous API usage,"All of the functions in Modal are available in both standard (blocking) and
asynchronous variants. The async interface can be accessed by appending.aioto any function in the Modal API. .aio For example, instead ofmy_modal_funcion.remote(""hello"")in a blocking
context, you can useawait my_modal_function.remote.aio(""hello"")to get an
asynchronous coroutine response, for use with Python’sasynciolibrary. my_modal_funcion.remote(""hello"") await my_modal_function.remote.aio(""hello"") asyncio importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)])Copy importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) importasyncioimportmodal

stub = modal.Stub()@stub.function()asyncdefmyfunc():
    ...@stub.local_entrypoint()asyncdefmain():# execute 100 remote calls to myfunc in parallelawaitasyncio.gather(*[myfunc.remote.aio()foriinrange(100)]) import import @stub.function() async def myfunc @stub.local_entrypoint() async def main # execute 100 remote calls to myfunc in parallel await for in range 100 Copy Copy    Copy This is an advanced feature. If you are comfortable with asynchronous
programming, you can use this to create arbitrary parallel execution patterns,
with the added benefit that any Modal functions will be executed remotely. ","The advantage of asynchronous Modal functions being executed remotely is that it allows for parallel execution, which increases efficiency and speed of tasks."
0,What is the function of async in API usage?,Asynchronous API usage Async functions,"Regardless if you use an async runtime (likeasyncio) in your usage ofModal
itself, you are free to define yourstub.function-decorated function bodies
as either async or blocking. Both kinds of definitions will work for remote
Modal function calls from both any context. asyncio Modal
itself stub.function An async function can call a blocking function, and vice versa. @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function() def blocking_function return 42 @stub.function() async def async_function await return 10 @stub.local_entrypoint() def blocking_main print # => 420 Copy Copy    Copy If a function is configured to support multiple concurrent inputs per container,
the behavior varies slightly between blocking and async contexts: In a blocking context, concurrent inputs will run on separate Python threads.
These are subject to the GIL, but they can still lead to race conditions if
used with non-threadsafe objects.In an async context, concurrent inputs are simply scheduled as coroutines on
the executor thread. Everything remains single-threaded. In a blocking context, concurrent inputs will run on separate Python threads.
These are subject to the GIL, but they can still lead to race conditions if
used with non-threadsafe objects. In an async context, concurrent inputs are simply scheduled as coroutines on
the executor thread. Everything remains single-threaded. Asynchronous API usageAsync functions Asynchronous API usageAsync functions Asynchronous API usageAsync functions Asynchronous API usage Async functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Async in API usage allows you to define your function bodies as either async or blocking. Both kinds of definitions will work for remote Modal function calls from any context. 
3,What is the output of the async_function() in the given code?,Asynchronous API usage Async functions,"Regardless if you use an async runtime (likeasyncio) in your usage ofModal
itself, you are free to define yourstub.function-decorated function bodies
as either async or blocking. Both kinds of definitions will work for remote
Modal function calls from both any context. asyncio Modal
itself stub.function An async function can call a blocking function, and vice versa. @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function() def blocking_function return 42 @stub.function() async def async_function await return 10 @stub.local_entrypoint() def blocking_main print # => 420 Copy Copy    Copy If a function is configured to support multiple concurrent inputs per container,
the behavior varies slightly between blocking and async contexts: In a blocking context, concurrent inputs will run on separate Python threads.
These are subject to the GIL, but they can still lead to race conditions if
used with non-threadsafe objects.In an async context, concurrent inputs are simply scheduled as coroutines on
the executor thread. Everything remains single-threaded. In a blocking context, concurrent inputs will run on separate Python threads.
These are subject to the GIL, but they can still lead to race conditions if
used with non-threadsafe objects. In an async context, concurrent inputs are simply scheduled as coroutines on
the executor thread. Everything remains single-threaded. Asynchronous API usageAsync functions Asynchronous API usageAsync functions Asynchronous API usageAsync functions Asynchronous API usage Async functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The output of the async_function() is 420.
6,Can you describe how concurrent inputs operate in both blocking and async contexts?,Asynchronous API usage Async functions,"Regardless if you use an async runtime (likeasyncio) in your usage ofModal
itself, you are free to define yourstub.function-decorated function bodies
as either async or blocking. Both kinds of definitions will work for remote
Modal function calls from both any context. asyncio Modal
itself stub.function An async function can call a blocking function, and vice versa. @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420Copy @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function()defblocking_function():return42@stub.function()asyncdefasync_function():
    x =awaitblocking_function.remote.aio()returnx *10@stub.local_entrypoint()defblocking_main():print(async_function.remote())# => 420 @stub.function() def blocking_function return 42 @stub.function() async def async_function await return 10 @stub.local_entrypoint() def blocking_main print # => 420 Copy Copy    Copy If a function is configured to support multiple concurrent inputs per container,
the behavior varies slightly between blocking and async contexts: In a blocking context, concurrent inputs will run on separate Python threads.
These are subject to the GIL, but they can still lead to race conditions if
used with non-threadsafe objects.In an async context, concurrent inputs are simply scheduled as coroutines on
the executor thread. Everything remains single-threaded. In a blocking context, concurrent inputs will run on separate Python threads.
These are subject to the GIL, but they can still lead to race conditions if
used with non-threadsafe objects. In an async context, concurrent inputs are simply scheduled as coroutines on
the executor thread. Everything remains single-threaded. Asynchronous API usageAsync functions Asynchronous API usageAsync functions Asynchronous API usageAsync functions Asynchronous API usage Async functions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In a blocking context, concurrent inputs will run on separate Python threads which can lead to race conditions if used with non-threadsafe objects. In an async context, concurrent inputs are simply scheduled as coroutines on the executor thread, everything remains single-threaded."
0,What is DoppelBot?,DoppelBot Replace your CEO with an LLM,"(quick links:add to your own Slack;source code) (quick links:add to your own Slack;source code) add to your own Slack source code Internally at Modal, we spend alotof time talking to each other on Slack.
Now, with the advent of open-source large language models, we had started to
wonder if all of this wasn’t a bit redundant. Could we have these language
models bike-shed on Slack for us, so we could spend our time on higher leverage
activities such aspaddleboarding in Tahitiinstead? lot paddleboarding in Tahiti To test this, we fine-tunedOpenLLaMaonErik’s Slack messages, and@erik-botwas
born. OpenLLaMa Erik @erik-bot   Since then,@erik-bothas been an invaluable asset to us, in areas ranging fromAPI designtolegal adviceto thought leadership. @erik-bot API design legal advice   We were planning on releasing the weights for@erik-botto the world, but all
our metrics have been going up and to the right a little too much since we’ve
launched him… @erik-bot So, we are releasing the next best thing.DoppelBotis a Slack bot that you
can install in your own workspace, and fine-tune on your own Slack messages.
Follow the instructionshereto replace your own CEO with an LLM today. DoppelBot here All the components—scraping, fine-tuning, inference and slack event handlers run
on Modal, and the code itself is open-source and availablehere. If you’re new to Modal, it’s
worth reiterating thatall of these components are also serverless and scale
to zero. This means that you can deploy and forget about them, because you’ll
only pay for compute when your app is used! here all of these components are also serverless and scale
to zero ","DoppelBot is a Slack bot that you can install in your workspace, and fine-tune on your own Slack messages."
3,What platform do all the components for DoppelBot run on?,DoppelBot Replace your CEO with an LLM,"(quick links:add to your own Slack;source code) (quick links:add to your own Slack;source code) add to your own Slack source code Internally at Modal, we spend alotof time talking to each other on Slack.
Now, with the advent of open-source large language models, we had started to
wonder if all of this wasn’t a bit redundant. Could we have these language
models bike-shed on Slack for us, so we could spend our time on higher leverage
activities such aspaddleboarding in Tahitiinstead? lot paddleboarding in Tahiti To test this, we fine-tunedOpenLLaMaonErik’s Slack messages, and@erik-botwas
born. OpenLLaMa Erik @erik-bot   Since then,@erik-bothas been an invaluable asset to us, in areas ranging fromAPI designtolegal adviceto thought leadership. @erik-bot API design legal advice   We were planning on releasing the weights for@erik-botto the world, but all
our metrics have been going up and to the right a little too much since we’ve
launched him… @erik-bot So, we are releasing the next best thing.DoppelBotis a Slack bot that you
can install in your own workspace, and fine-tune on your own Slack messages.
Follow the instructionshereto replace your own CEO with an LLM today. DoppelBot here All the components—scraping, fine-tuning, inference and slack event handlers run
on Modal, and the code itself is open-source and availablehere. If you’re new to Modal, it’s
worth reiterating thatall of these components are also serverless and scale
to zero. This means that you can deploy and forget about them, because you’ll
only pay for compute when your app is used! here all of these components are also serverless and scale
to zero ","All the components for DoppelBot, including scraping, fine-tuning, inference and slack event handlers, run on Modal."
6,What does it mean when it says all of these components are serverless and scale to zero?,DoppelBot Replace your CEO with an LLM,"(quick links:add to your own Slack;source code) (quick links:add to your own Slack;source code) add to your own Slack source code Internally at Modal, we spend alotof time talking to each other on Slack.
Now, with the advent of open-source large language models, we had started to
wonder if all of this wasn’t a bit redundant. Could we have these language
models bike-shed on Slack for us, so we could spend our time on higher leverage
activities such aspaddleboarding in Tahitiinstead? lot paddleboarding in Tahiti To test this, we fine-tunedOpenLLaMaonErik’s Slack messages, and@erik-botwas
born. OpenLLaMa Erik @erik-bot   Since then,@erik-bothas been an invaluable asset to us, in areas ranging fromAPI designtolegal adviceto thought leadership. @erik-bot API design legal advice   We were planning on releasing the weights for@erik-botto the world, but all
our metrics have been going up and to the right a little too much since we’ve
launched him… @erik-bot So, we are releasing the next best thing.DoppelBotis a Slack bot that you
can install in your own workspace, and fine-tune on your own Slack messages.
Follow the instructionshereto replace your own CEO with an LLM today. DoppelBot here All the components—scraping, fine-tuning, inference and slack event handlers run
on Modal, and the code itself is open-source and availablehere. If you’re new to Modal, it’s
worth reiterating thatall of these components are also serverless and scale
to zero. This means that you can deploy and forget about them, because you’ll
only pay for compute when your app is used! here all of these components are also serverless and scale
to zero ","When components are described as serverless and scaling to zero, it means that they can be deployed and forgotten about because you only pay for compute when your app is used."
0,What can using Modal increase for a team?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Using Modal can increase a team's productivity by 10x.
1,What can you replace within a company according to DoppelBot?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","According to DoppelBot, you can replace your CEO with an LLM."
2,What are some of the steps involved in how DoppelBot works?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Some of the steps involved in how DoppelBot works include scraping slack, fine-tuning, inference, and multi-workspace support."
3,What types of information can be accessed about Modal?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","You can access examples, documentation, and pricing about Modal."
4,"Who owns Modal Labs, Inc.?",DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc is owned by itself, it's a standalone entity."
0,What is DoppelBot designed to do?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",DoppelBot is designed to replace your CEO with an LLM which can significantly increase the team's productivity.
1,How can one increase their team's productivity according to the text?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","One can increase their team's productivity by replacing the CEO with an LLM, as suggested by DoppelBot."
2,Who might need to refer to the Modal docs and examples?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Those interested in learning more about utilizing Modal might need to refer to the Modal docs and examples.
3,What type of support does Doppelbot offer?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",DoppelBot offers multi-workspace support.
4,Who is the creator of DoppelBot?,DoppelBot Replace your CEO with an LLM Next Steps,"If you’ve made it this far, you have just found a way to increase your team’s
productivity by 10x! Congratulations on the well-earned vacation! 🎉 If you’re interested in learning more about Modal, check out ourdocsand otherexamples. docs examples DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLMHow it worksScraping slackFine-tuningInferenceSlack BotMulti-Workspace SupportNext Steps DoppelBot: Replace your CEO with an LLM How it works Scraping slack Fine-tuning Inference Slack Bot Multi-Workspace Support Next Steps CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The creator of DoppelBot is Modal Labs, Inc."
0,What do secrets provide a dictionary of for images?,Secrets,"Secrets provide a dictionary of environment variables for images. Secrets are a secure way to add credentials and other sensitive information to
the containers your functions run in. You can create and edit secrets onthe dashboard, or programmatically from Python
code. the dashboard ",Secrets provide a dictionary of environment variables for images.
3,Where can secrets be created and edited?,Secrets,"Secrets provide a dictionary of environment variables for images. Secrets are a secure way to add credentials and other sensitive information to
the containers your functions run in. You can create and edit secrets onthe dashboard, or programmatically from Python
code. the dashboard ",Secrets can be created and edited on the dashboard or programmatically from Python code.
6,Can secrets be handled programmatically?,Secrets,"Secrets provide a dictionary of environment variables for images. Secrets are a secure way to add credentials and other sensitive information to
the containers your functions run in. You can create and edit secrets onthe dashboard, or programmatically from Python
code. the dashboard ","Yes, secrets can be handled programmatically from Python code."
0,What is one way to programmatically create a secret for the Modal app?,Secrets Programmatic creation of secrets,"In addition to defining secrets on the modal web page, you can programmatically
create a secret directly in your script and send it along to your function usingSecret.from_dict(...). This can be useful if you want to send secrets from
your local development machine to the remote Modal app. Secret.from_dict(...) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) import import ""my_local_secret"" ""FOO"" ""LOCAL_FOO"" @stub.function(secret=stub[""my_local_secret""]) secret=stub[""my_local_secret""] ""my_local_secret"" def some_function print ""FOO"" Copy Copy    Copy You can also useSecret.from_dotenv()to load any secrets defined in an.envfile: Secret.from_dotenv() .env @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv()) secret=modal.Secret.from_dotenv()  def some_other_function print ""USERNAME"" Copy Copy    Copy SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secrets Secrets Using secrets Programmatic creation of secrets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in action OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG     HuggingFace access token for gated models HuggingFace access token for gated models HuggingFace access token for gated models     Write to Google Sheets Write to Google Sheets Write to Google Sheets     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can use the Secret.from_dict(...) function to create a secret directly in your script and send it to the Modal app.
3,How does one use an existing .env file to load secrets in this context?,Secrets Programmatic creation of secrets,"In addition to defining secrets on the modal web page, you can programmatically
create a secret directly in your script and send it along to your function usingSecret.from_dict(...). This can be useful if you want to send secrets from
your local development machine to the remote Modal app. Secret.from_dict(...) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) import import ""my_local_secret"" ""FOO"" ""LOCAL_FOO"" @stub.function(secret=stub[""my_local_secret""]) secret=stub[""my_local_secret""] ""my_local_secret"" def some_function print ""FOO"" Copy Copy    Copy You can also useSecret.from_dotenv()to load any secrets defined in an.envfile: Secret.from_dotenv() .env @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv()) secret=modal.Secret.from_dotenv()  def some_other_function print ""USERNAME"" Copy Copy    Copy SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secrets Secrets Using secrets Programmatic creation of secrets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in action OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG     HuggingFace access token for gated models HuggingFace access token for gated models HuggingFace access token for gated models     Write to Google Sheets Write to Google Sheets Write to Google Sheets     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can use the Secret.from_dotenv() function to load secrets from an existing .env file.
6,"What does the 'defsome_function():print(os.environ[""FOO""])' statement do in the script?",Secrets Programmatic creation of secrets,"In addition to defining secrets on the modal web page, you can programmatically
create a secret directly in your script and send it along to your function usingSecret.from_dict(...). This can be useful if you want to send secrets from
your local development machine to the remote Modal app. Secret.from_dict(...) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) import import ""my_local_secret"" ""FOO"" ""LOCAL_FOO"" @stub.function(secret=stub[""my_local_secret""]) secret=stub[""my_local_secret""] ""my_local_secret"" def some_function print ""FOO"" Copy Copy    Copy You can also useSecret.from_dotenv()to load any secrets defined in an.envfile: Secret.from_dotenv() .env @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv()) secret=modal.Secret.from_dotenv()  def some_other_function print ""USERNAME"" Copy Copy    Copy SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secrets Secrets Using secrets Programmatic creation of secrets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in action OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG     HuggingFace access token for gated models HuggingFace access token for gated models HuggingFace access token for gated models     Write to Google Sheets Write to Google Sheets Write to Google Sheets     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","This statement defines a function that prints the value of the environment variable ""FOO""."
0,What is a way to programmatically create a secret in a script?,Secrets Programmatic creation of secrets,"In addition to defining secrets on the modal web page, you can programmatically
create a secret directly in your script and send it along to your function usingSecret.from_dict(...). This can be useful if you want to send secrets from
your local development machine to the remote Modal app. Secret.from_dict(...) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) import import ""my_local_secret"" ""FOO"" ""LOCAL_FOO"" @stub.function(secret=stub[""my_local_secret""]) secret=stub[""my_local_secret""] ""my_local_secret"" def some_function print ""FOO"" Copy Copy    Copy You can also useSecret.from_dotenv()to load any secrets defined in an.envfile: Secret.from_dotenv() .env @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv()) secret=modal.Secret.from_dotenv()  def some_other_function print ""USERNAME"" Copy Copy    Copy SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secrets Secrets Using secrets Programmatic creation of secrets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in action OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG     HuggingFace access token for gated models HuggingFace access token for gated models HuggingFace access token for gated models     Write to Google Sheets Write to Google Sheets Write to Google Sheets     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can create a secret programmatically in your script and send it along to your function using Secret.from_dict(...). This can be particularly useful for sending secrets from your local development machine to the remote Modal app.
3,What method can be used to load secrets defined in an .env file?,Secrets Programmatic creation of secrets,"In addition to defining secrets on the modal web page, you can programmatically
create a secret directly in your script and send it along to your function usingSecret.from_dict(...). This can be useful if you want to send secrets from
your local development machine to the remote Modal app. Secret.from_dict(...) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) import import ""my_local_secret"" ""FOO"" ""LOCAL_FOO"" @stub.function(secret=stub[""my_local_secret""]) secret=stub[""my_local_secret""] ""my_local_secret"" def some_function print ""FOO"" Copy Copy    Copy You can also useSecret.from_dotenv()to load any secrets defined in an.envfile: Secret.from_dotenv() .env @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv()) secret=modal.Secret.from_dotenv()  def some_other_function print ""USERNAME"" Copy Copy    Copy SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secrets Secrets Using secrets Programmatic creation of secrets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in action OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG     HuggingFace access token for gated models HuggingFace access token for gated models HuggingFace access token for gated models     Write to Google Sheets Write to Google Sheets Write to Google Sheets     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can use the method Secret.from_dotenv() to load secrets defined in an .env file.
6,What are some of the actions that can be seen in use with secrets?,Secrets Programmatic creation of secrets,"In addition to defining secrets on the modal web page, you can programmatically
create a secret directly in your script and send it along to your function usingSecret.from_dict(...). This can be useful if you want to send secrets from
your local development machine to the remote Modal app. Secret.from_dict(...) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""])Copy importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) importosimportmodal

stub = modal.Stub()
stub[""my_local_secret""] = modal.Secret.from_dict({""FOO"": os.environ[""LOCAL_FOO""]})@stub.function(secret=stub[""my_local_secret""])defsome_function():print(os.environ[""FOO""]) import import ""my_local_secret"" ""FOO"" ""LOCAL_FOO"" @stub.function(secret=stub[""my_local_secret""]) secret=stub[""my_local_secret""] ""my_local_secret"" def some_function print ""FOO"" Copy Copy    Copy You can also useSecret.from_dotenv()to load any secrets defined in an.envfile: Secret.from_dotenv() .env @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""])Copy @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv())defsome_other_function():print(os.environ[""USERNAME""]) @stub.function(secret=modal.Secret.from_dotenv()) secret=modal.Secret.from_dotenv()  def some_other_function print ""USERNAME"" Copy Copy    Copy SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secretsSee it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets SecretsUsing secretsProgrammatic creation of secrets Secrets Using secrets Programmatic creation of secrets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in actionOpenAI secret for LangChain RAGHuggingFace access token for gated modelsWrite to Google Sheets See it in action OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG OpenAI secret for LangChain RAG     HuggingFace access token for gated models HuggingFace access token for gated models HuggingFace access token for gated models     Write to Google Sheets Write to Google Sheets Write to Google Sheets     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Some actions that can be seen in use with secrets include OpenAI secret for LangChain RAG, HuggingFace access token for gated models and writing to Google Sheets."
0,What is the main class in the given content?,modalCls,"classCls(modal.object.Object)Copy classCls(modal.object.Object)Copy classCls(modal.object.Object)Copy classCls(modal.object.Object) classCls(modal.object.Object) classCls(modal.object.Object) class Cls object Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",The main class in the given content is Cls.
3,What does the __init__ method in the code do?,modalCls,"classCls(modal.object.Object)Copy classCls(modal.object.Object)Copy classCls(modal.object.Object)Copy classCls(modal.object.Object) classCls(modal.object.Object) classCls(modal.object.Object) class Cls object Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",The __init__ method initializes an instance of the Cls class.
6,What are '*args' and '**kwargs' used for in the __init__ method?,modalCls,"classCls(modal.object.Object)Copy classCls(modal.object.Object)Copy classCls(modal.object.Object)Copy classCls(modal.object.Object) classCls(modal.object.Object) classCls(modal.object.Object) class Cls object Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",'*args' and '**kwargs' are used in the __init__ method to allow for variable number of arguments and keyword arguments respectively.
0,What is the function 'defpersist' used for?,modalCls persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",'defpersist' is used for persisting objects in a specified namespace.
3,Which method should be used instead of 'Object.persist' for Network File Systems and Dictionaries?,modalCls persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ",'NetworkFileSystem.persisted' and 'Dict.persisted' should be used respectively instead of 'Object.persist'.
6,What does the 'defpersist' function take as input parameters?,modalCls persist,"defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted ","The 'defpersist' function takes 'self', 'label' as a string, 'namespace' representing the namespace to be used, and an 'environment_name' that is optional."
0,What is the purpose of the 'from_name' method in the provided code snippet?,modalCls fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The 'from_name' method is used to retrieve an object with a given name and tag. It is useful for referencing secrets, as well as calling a function from a different app."
3,How can you use the 'from_name' method to retrieve a function from a different app?,modalCls fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","To retrieve a function from a different app, you would use the method as so: stub.other_function = Function.from_name(""other-app"", ""function"")."
6,What other objects can be retrieved using the 'from_name' method in the provided code snippet?,modalCls fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","Other than secrets, functions and Volumes, the 'from_name' method can also be used to retrieve Queues and Dictionaries. The method would be used as so respectively: stub.my_queue = Queue.from_name(""my-queue""); stub.my_dict = Dict.from_name(""my-dict"")."
0,What does the lookup method do?,modalCls lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The lookup method is a general-purpose method that looks up an object with a given name and tag. This could be objects like functions, network file systems, and secrets. It provides reference to the object in a running app."
3,How do you use the lookup method to find a secret?,modalCls lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","To find a secret, you would use the format: Secret.lookup(""my-secret"")."
6,What is an example of how to find a persisted volume using the lookup method?,modalCls lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","To look up a persisted volume, you could use the format: Volume.lookup(""my-volume"")."
0,"What does the ""from_local"" method do?",modalCls fromlocal,"@staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethod def from_local user_cls, base_functions:Dict[str, _Function] Dict str ""_Cls"" Copy Copy    Copy ",It allows a class to be constructed from user class and base functions.
1,"What should be the argument type for base_functions in ""from_local"" method?",modalCls fromlocal,"@staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethod def from_local user_cls, base_functions:Dict[str, _Function] Dict str ""_Cls"" Copy Copy    Copy ",The argument type for base_functions should be a dictionary with string as key and _Function as value.
2,"What does ""from_local"" method return?",modalCls fromlocal,"@staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethod def from_local user_cls, base_functions:Dict[str, _Function] Dict str ""_Cls"" Copy Copy    Copy ","The ""from_local"" method returns a data type, ""_Cls""."
3,"What is the use of the ""@staticmethod"" decorator in this code?",modalCls fromlocal,"@staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethod def from_local user_cls, base_functions:Dict[str, _Function] Dict str ""_Cls"" Copy Copy    Copy ","The ""@staticmethod"" decorator is used to indicate that the following method belongs to the class, not an instance of the class."
4,"Is the ""from_local"" function a static function?",modalCls fromlocal,"@staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"":Copy @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethoddeffrom_local(user_cls, base_functions:Dict[str, _Function]) ->""_Cls"": @staticmethod def from_local user_cls, base_functions:Dict[str, _Function] Dict str ""_Cls"" Copy Copy    Copy ","Yes, the ""from_local"" function is a static function as indicated by the ""@staticmethod"" decorator."
0,What function is repeatedly mentioned in the content?,modalCls getusercls,defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypoint defget_user_cls(self):# Used by the container entrypoint defget_user_cls(self):# Used by the container entrypoint def get_user_cls self # Used by the container entrypoint Copy Copy    Copy ,"The function ""get_user_cls""."
3,What is the method by which get_user_cls is accessed?,modalCls getusercls,defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypoint defget_user_cls(self):# Used by the container entrypoint defget_user_cls(self):# Used by the container entrypoint def get_user_cls self # Used by the container entrypoint Copy Copy    Copy ,Through self.
6,Does the content provide any details about what the get_user_cls function does?,modalCls getusercls,defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypointCopy defget_user_cls(self):# Used by the container entrypoint defget_user_cls(self):# Used by the container entrypoint defget_user_cls(self):# Used by the container entrypoint def get_user_cls self # Used by the container entrypoint Copy Copy    Copy ,"No, the content does not provide any details about what the get_user_cls function does."
0,What does the get_base_function method return?,modalCls getbasefunction,"defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function: defget_base_function(self, k:str) -> _Function: defget_base_function(self, k:str) -> _Function: def get_base_function self, k:str str Copy Copy    Copy ",It returns _Function.
3,"What does ""k"" represent in the get_base_function method?",modalCls getbasefunction,"defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function: defget_base_function(self, k:str) -> _Function: defget_base_function(self, k:str) -> _Function: def get_base_function self, k:str str Copy Copy    Copy ","""K"" represents a string input to the method."
6,Can the get_base_function method take multiple arguments?,modalCls getbasefunction,"defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function:Copy defget_base_function(self, k:str) -> _Function: defget_base_function(self, k:str) -> _Function: defget_base_function(self, k:str) -> _Function: def get_base_function self, k:str str Copy Copy    Copy ","No, it only takes one argument, ""k""."
0,"What type of object does ""defremote"" return?",modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",_Obj
1,What is the name of the company mentioned in the content?,modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc."
2,"When is the copyright year mentioned for Modal Labs, Inc?",modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",2023
3,What are some functions mentioned in the content?,modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","from_id, persist, from_name, lookup, from_local, get_user_cls and get_base_function"
4,What is loaded in Promise.all?,modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","import(""../../_app/immutable/entry/start.be12ce5d.js"") and import(""../../_app/immutable/entry/app.917210b3.js"")."
0,What does the defremote method return in this context? ,modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It returns _Obj.
3,What can be said about the base URL mentioned in __sveltekit_qfhbjo?,modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The base URL is relative and points two directories up from the current location.
6,What does the kit.start method do in this context?,modalCls remote,"defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj:Copy defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: defremote(self, *args, **kwargs) -> _Obj: def remote self, *args, **kwargs Copy Copy    Copy modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Clsfrom_idpersistfrom_namelookupfrom_localget_user_clsget_base_functionremote modal.Cls from_id persist from_name lookup from_local get_user_cls get_base_function remote CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The kit.start method starts the app with a specific configuration, including node_ids, data, form, and error."
0,What is a NetworkFileSystem in Modal?,modalNetworkFileSystem,"classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object) classNetworkFileSystem(modal.object.Object) classNetworkFileSystem(modal.object.Object) class NetworkFileSystem object Copy Copy    Copy A shared, writable file system accessible by one or more Modal functions. By attaching this file system as a mount to one or more functions, they can
share and persist data with each other. Usage Usage importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass import @stub.function(network_file_systems={""/root/foo"": volume}) network_file_systems={""/root/foo"": volume} ""/root/foo"" def f pass @stub.function(network_file_systems={""/root/goo"": volume}) network_file_systems={""/root/goo"": volume} ""/root/goo"" def g pass Copy Copy    Copy It is often the case that you would want to persist a network file system object
separately from the currently attached app. Refer to the persistenceguide sectionto see how to
persist this object across app runs. guide section Also see the CLI methods for accessing network file systems: modal nfs --helpCopy modal nfs --helpCopy modal nfs --helpCopy modal nfs --help modal nfs --help modal nfs --help help Copy Copy    Copy ANetworkFileSystemcan also be useful for some local scripting scenarios, e.g.: NetworkFileSystem vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... ""my-network-file-system"" for in ""my_db_dump.csv"" Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","A NetworkFileSystem in Modal is a shared, writable file system accessible by one or more Modal functions."
3,Where might NetworkFileSystems be used in Modal functions?,modalNetworkFileSystem,"classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object) classNetworkFileSystem(modal.object.Object) classNetworkFileSystem(modal.object.Object) class NetworkFileSystem object Copy Copy    Copy A shared, writable file system accessible by one or more Modal functions. By attaching this file system as a mount to one or more functions, they can
share and persist data with each other. Usage Usage importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass import @stub.function(network_file_systems={""/root/foo"": volume}) network_file_systems={""/root/foo"": volume} ""/root/foo"" def f pass @stub.function(network_file_systems={""/root/goo"": volume}) network_file_systems={""/root/goo"": volume} ""/root/goo"" def g pass Copy Copy    Copy It is often the case that you would want to persist a network file system object
separately from the currently attached app. Refer to the persistenceguide sectionto see how to
persist this object across app runs. guide section Also see the CLI methods for accessing network file systems: modal nfs --helpCopy modal nfs --helpCopy modal nfs --helpCopy modal nfs --help modal nfs --help modal nfs --help help Copy Copy    Copy ANetworkFileSystemcan also be useful for some local scripting scenarios, e.g.: NetworkFileSystem vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... ""my-network-file-system"" for in ""my_db_dump.csv"" Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ",NetworkFileSystems might be used in Modal functions as mounts to share and persist data with each other.
6,What is a potential use for NetworkFileSystem in local scripting scenarios?,modalNetworkFileSystem,"classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object)Copy classNetworkFileSystem(modal.object.Object) classNetworkFileSystem(modal.object.Object) classNetworkFileSystem(modal.object.Object) class NetworkFileSystem object Copy Copy    Copy A shared, writable file system accessible by one or more Modal functions. By attaching this file system as a mount to one or more functions, they can
share and persist data with each other. Usage Usage importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():passCopy importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass importmodal

volume = modal.NetworkFileSystem.new()
stub = modal.Stub()@stub.function(network_file_systems={""/root/foo"": volume})deff():pass@stub.function(network_file_systems={""/root/goo"": volume})defg():pass import @stub.function(network_file_systems={""/root/foo"": volume}) network_file_systems={""/root/foo"": volume} ""/root/foo"" def f pass @stub.function(network_file_systems={""/root/goo"": volume}) network_file_systems={""/root/goo"": volume} ""/root/goo"" def g pass Copy Copy    Copy It is often the case that you would want to persist a network file system object
separately from the currently attached app. Refer to the persistenceguide sectionto see how to
persist this object across app runs. guide section Also see the CLI methods for accessing network file systems: modal nfs --helpCopy modal nfs --helpCopy modal nfs --helpCopy modal nfs --help modal nfs --help modal nfs --help help Copy Copy    Copy ANetworkFileSystemcan also be useful for some local scripting scenarios, e.g.: NetworkFileSystem vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ...Copy vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv""):
    ... ""my-network-file-system"" for in ""my_db_dump.csv"" Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy ","In local scripting scenarios, a NetworkFileSystem can be useful for reading files, as seen in the code snippet: vol = modal.NetworkFileSystem.lookup(""my-network-file-system"")forchunkinvol.read_file(""my_db_dump.csv"")."
0,What is the command being deprecated in NetworkFileSystem?,modalNetworkFileSystem persist,"defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): def persist self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None, str Optional str None Optional str None Copy Copy    Copy NetworkFileSystem().persist(""my-volume"")is deprecated. UseNetworkFileSystem.persisted(""my-volume"")instead. NetworkFileSystem().persist(""my-volume"") NetworkFileSystem.persisted(""my-volume"") ","NetworkFileSystem().persist(""my-volume"") is being deprecated."
3,What are the potential parameters for the persist function in NetworkFileSystem?,modalNetworkFileSystem persist,"defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): def persist self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None, str Optional str None Optional str None Copy Copy    Copy NetworkFileSystem().persist(""my-volume"")is deprecated. UseNetworkFileSystem.persisted(""my-volume"")instead. NetworkFileSystem().persist(""my-volume"") NetworkFileSystem.persisted(""my-volume"") ","The potential parameters are label, namespace, environment_name, and cloud."
6,What types of input should the 'cloud' parameter accept in the persist function?,modalNetworkFileSystem persist,"defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,):Copy defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): defpersist(self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,): def persist self,
    label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None, str Optional str None Optional str None Copy Copy    Copy NetworkFileSystem().persist(""my-volume"")is deprecated. UseNetworkFileSystem.persisted(""my-volume"")instead. NetworkFileSystem().persist(""my-volume"") NetworkFileSystem.persisted(""my-volume"") ","The 'cloud' parameter should accept a string input, but it is optional."
0,"What is the purpose of the ""from_name"" method?",modalNetworkFileSystem fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The ""from_name"" method is used to retrieve an object with a given name and optional tag. It is especially useful for referencing secrets and calling a function from a different app."
3,How can you use this method to call a function from a different app?,modalNetworkFileSystem fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","A function from a different app can be called using this method by calling Function.from_name with the name of the app and the function as arguments, e.g., stub.other_function = Function.from_name(""other-app"",""function"")."
6,"What is an example of how to retrieve a persisted volume using the ""from_name"" method?",modalNetworkFileSystem fromname,"@classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","A persisted volume can be retrieved by calling Volume.from_name with the name of the volume as the argument, e.g., stub.my_volume = Volume.from_name(""my-volume"")."
0,What is the purpose of the 'lookup' method in this code?,modalNetworkFileSystem lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","The 'lookup' method in this code is used to look up an object with a given name and tag. It is a general-purpose method for objects like functions, network file systems, and secrets. It gives a reference to the object in a running app."
3,How can you use the 'lookup' method to reference a function from a different app in the code?,modalNetworkFileSystem lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You can reference a function by providing the app name and function name as parameters to the 'lookup' function. For example: other_function = Function.lookup(""other-app"",""function"")"
6,"How do you use the 'lookup' method to refer to a persisted volume, queue, or dictionary in the code?",modalNetworkFileSystem lookup,"@classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy ","You can use the 'lookup' method with the volume, queue, or dictionary name as the parameter. For example: my_volume = Volume.lookup(""my-volume""), my_queue = Queue.lookup(""my-queue""), or my_dict = Dict.lookup(""my-dict"")"
0,What is the method to create a new network file system?,modalNetworkFileSystem new,"@typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked @staticmethod def new cloud:Optional[str] =None Optional str None ""_NetworkFileSystem"" Copy Copy    Copy Construct a new network file system, which is empty by default. ",The method is 'new'.
3,What is the datatype of 'cloud' parameter in the 'new' method?,modalNetworkFileSystem new,"@typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked @staticmethod def new cloud:Optional[str] =None Optional str None ""_NetworkFileSystem"" Copy Copy    Copy Construct a new network file system, which is empty by default. ","The datatype of 'cloud' parameter is Optional[str], meaning it can be a string or None."
6,What is the return type of the 'new' method?,modalNetworkFileSystem new,"@typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"":Copy @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked@staticmethoddefnew(cloud:Optional[str] =None) ->""_NetworkFileSystem"": @typechecked @staticmethod def new cloud:Optional[str] =None Optional str None ""_NetworkFileSystem"" Copy Copy    Copy Construct a new network file system, which is empty by default. ",The return type of the 'new' method is '_NetworkFileSystem'.
0,What is the function of the method 'persisted' in the NetworkFileSystem?,modalNetworkFileSystem persisted,"@staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethod def persisted label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None, str Optional str None Optional str None ""_NetworkFileSystem"" Copy Copy    Copy Deploy a Modal app containing this object. The deployed object can then be imported from other apps, or by callingNetworkFileSystem.from_name(label)from that same app. NetworkFileSystem.from_name(label) Examples Examples # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app: ""my-volume"" # Later, in another app or Python file: ""my-volume"" @stub.function(network_file_systems={""/vol"": volume}) network_file_systems={""/vol"": volume} ""/vol"" def f pass Copy Copy    Copy ",It is used to persist a Modal app containing particular objects.
3,"What is the purpose of NetworkFileSystem.persisted(""my-volume"") command?",modalNetworkFileSystem persisted,"@staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethod def persisted label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None, str Optional str None Optional str None ""_NetworkFileSystem"" Copy Copy    Copy Deploy a Modal app containing this object. The deployed object can then be imported from other apps, or by callingNetworkFileSystem.from_name(label)from that same app. NetworkFileSystem.from_name(label) Examples Examples # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app: ""my-volume"" # Later, in another app or Python file: ""my-volume"" @stub.function(network_file_systems={""/vol"": volume}) network_file_systems={""/vol"": volume} ""/vol"" def f pass Copy Copy    Copy ","It is to prepare a Modal app object, in this case ""my-volume"", for deployment."
6,What parameter is used in the stub function to reference the NetworkFileSystem object?,modalNetworkFileSystem persisted,"@staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"":Copy @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethoddefpersisted(label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None,) ->""_NetworkFileSystem"": @staticmethod def persisted label:str,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,
    cloud:Optional[str] =None, str Optional str None Optional str None ""_NetworkFileSystem"" Copy Copy    Copy Deploy a Modal app containing this object. The deployed object can then be imported from other apps, or by callingNetworkFileSystem.from_name(label)from that same app. NetworkFileSystem.from_name(label) Examples Examples # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():passCopy # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app:volume = NetworkFileSystem.persisted(""my-volume"")# Later, in another app or Python file:volume = NetworkFileSystem.from_name(""my-volume"")@stub.function(network_file_systems={""/vol"": volume})deff():pass # In one app: ""my-volume"" # Later, in another app or Python file: ""my-volume"" @stub.function(network_file_systems={""/vol"": volume}) network_file_systems={""/vol"": volume} ""/vol"" def f pass Copy Copy    Copy ","The parameter used is network_file_systems={""/vol"": volume}."
0,What is the purpose of write_file method in NetworkFileSystem?,modalNetworkFileSystem writefile,"@live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_method def write_file self, remote_path:str, fp: BinaryIO str int Copy Copy    Copy Write from a file object to a path on the network file system, atomically. Will create any needed parent directories automatically. If remote_path ends with/it’s assumed to be a directory and the
file will be uploaded with its current name to that directory. / ","The write_file method is used to write from a file object to a path on the network file system, atomically."
3,What happens if the remote_path in the write_file method ends with a '/'?,modalNetworkFileSystem writefile,"@live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_method def write_file self, remote_path:str, fp: BinaryIO str int Copy Copy    Copy Write from a file object to a path on the network file system, atomically. Will create any needed parent directories automatically. If remote_path ends with/it’s assumed to be a directory and the
file will be uploaded with its current name to that directory. / ","If the remote_path ends with a '/', it's assumed to be a directory and the file will be uploaded with its current name to that directory."
6,What does the write_file method return in NetworkFileSystem?,modalNetworkFileSystem writefile,"@live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int:Copy @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_methoddefwrite_file(self, remote_path:str, fp: BinaryIO) ->int: @live_method def write_file self, remote_path:str, fp: BinaryIO str int Copy Copy    Copy Write from a file object to a path on the network file system, atomically. Will create any needed parent directories automatically. If remote_path ends with/it’s assumed to be a directory and the
file will be uploaded with its current name to that directory. / ",The write_file method returns an integer.
0,What is the function of the method in the NetworkFileSystem?,modalNetworkFileSystem readfile,"@live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:str str bytes Copy Copy    Copy Read a file from the network file system ",It's function is to read a file from the network file system.
1,What does the method return?,modalNetworkFileSystem readfile,"@live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:str str bytes Copy Copy    Copy Read a file from the network file system ",The method returns an AsyncIterator[bytes].
2,What is the type of the argument the read_file method requires?,modalNetworkFileSystem readfile,"@live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:str str bytes Copy Copy    Copy Read a file from the network file system ",The read_file method requires a string type argument which is a path.
3,What is the example of the usage of method in the context of NetworkFileSystem?,modalNetworkFileSystem readfile,"@live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:str str bytes Copy Copy    Copy Read a file from the network file system ","The example is: read_file(self, path:str) - this is how the read_file method is executed with path as an argument."
4,What type of system is the file being read from with this method?,modalNetworkFileSystem readfile,"@live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]:Copy @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gendefread_file(self, path:str) -> AsyncIterator[bytes]: @live_method_gen def read_file self, path:str str bytes Copy Copy    Copy Read a file from the network file system ",The file is being read from a network file system.
0,What does the iterdir method in modal.NetworkFileSystem do?,modalNetworkFileSystem iterdir,"@live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gen def iterdir self, path:str str Copy Copy    Copy Iterate over all files in a directory in the network file system. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",The iterdir method in modal.NetworkFileSystem iterates over all files in a directory in the network file system.
3,What happens when you pass a file path to the iterdir method?,modalNetworkFileSystem iterdir,"@live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gen def iterdir self, path:str str Copy Copy    Copy Iterate over all files in a directory in the network file system. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ","When you pass a file path to the iterdir method, it returns a list containing only that file's listing description."
6,What details does the iterdir output provide?,modalNetworkFileSystem iterdir,"@live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]:Copy @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gendefiterdir(self, path:str) -> AsyncIterator[api_pb2.SharedVolumeListFilesEntry]: @live_method_gen def iterdir self, path:str str Copy Copy    Copy Iterate over all files in a directory in the network file system. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ","The iterdir output provides a list of all files in the directory or matches the glob path, their listing descriptions, and information on their paths relative to the directory."
0,What function does the modal.NetworkFileSystem add_local_file perform?,modalNetworkFileSystem addlocalfile,"@live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_method def add_local_file self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None Union str Optional Union str None None Copy Copy    Copy ",It copies a local file to a remote location.
3,What are the types accepted for local_path in the method add_local_file?,modalNetworkFileSystem addlocalfile,"@live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_method def add_local_file self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None Union str Optional Union str None None Copy Copy    Copy ",local_path could either be a Path or a string.
6,Can the 'remote_path' parameter in the 'add_local_file' function be optional?,modalNetworkFileSystem addlocalfile,"@live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None):Copy @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_methoddefadd_local_file(self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None): @live_method def add_local_file self, local_path:Union[Path,str], remote_path:Optional[Union[str, PurePosixPath,None]] =None Union str Optional Union str None None Copy Copy    Copy ","Yes, the 'remote_path' parameter in the 'add_local_file' function can be optional."
0,What is the main function of the method add_local_dir in modal.NetworkFileSystem?,modalNetworkFileSystem addlocaldir,"@live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_method def add_local_dir self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None, Union str Optional Union str None None Copy Copy    Copy ",The main function of the method add_local_dir is to add a local directory to the network file system.
3,What is the purpose of the second parameter 'remote_path' in add_local_dir method?,modalNetworkFileSystem addlocaldir,"@live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_method def add_local_dir self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None, Union str Optional Union str None None Copy Copy    Copy ",The 'remote_path' parameter in add_local_dir method is used to specify the destination of the directory in the remote system. It is optional.
6,What happens if 'remote_path' is not provided in add_local_dir method?,modalNetworkFileSystem addlocaldir,"@live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,):Copy @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_methoddefadd_local_dir(self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None,): @live_method def add_local_dir self,
    local_path:Union[Path,str],
    remote_path:Optional[Union[str, PurePosixPath,None]] =None, Union str Optional Union str None None Copy Copy    Copy ","If 'remote_path' is not provided in add_local_dir method, it defaults to None."
0,What does the NetworkFileSystem listdir method do?,modalNetworkFileSystem listdir,"@live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_method def listdir self, path:str str List Copy Copy    Copy List all files in a directory in the network file system. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",It lists all files in a directory in the network file system.
3,What is the result when a file path is provided to the listdir method?,modalNetworkFileSystem listdir,"@live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_method def listdir self, path:str str List Copy Copy    Copy List all files in a directory in the network file system. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ",Passing a file path returns a list containing only that file’s listing description.
6,"When a glob path is used, what format are the returned file paths in?",modalNetworkFileSystem listdir,"@live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]:Copy @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_methoddeflistdir(self, path:str) ->List[api_pb2.SharedVolumeListFilesEntry]: @live_method def listdir self, path:str str List Copy Copy    Copy List all files in a directory in the network file system. Passing a directory path lists all files in the directory (names are relative to the directory)Passing a file path returns a list containing only that file’s listing descriptionPassing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) Passing a directory path lists all files in the directory (names are relative to the directory) Passing a file path returns a list containing only that file’s listing description Passing a glob path (including at least one * or ** sequence) returns all files matching that glob path (using absolute paths) ","When a glob path is used, the files are returned in absolute paths."
0,What is the functionality of the remove_file method in the modal.NetworkFileSystem?,modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The remove_file method in modal.NetworkFileSystem allows you to remove a file in a network file system.
3,"Who owns © 2023 Modal Labs, Inc.?",modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. owns © 2023 Modal Labs, Inc. "
6,Who is the target of the methods within the given content?,modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The target of the methods within the given content is a network file system.
0,What function can be used to remove a file in a network file system?,modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The function modal.NetworkFileSystem remove_file can be used to remove a file in a network file system.
1,Who owns the copyright for the code?,modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright for the code is owned by Modal Labs, Inc."
2,"What year will the copyright issued by Modal Labs, Inc. for the given code expire?",modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright issued by Modal Labs, Inc. for the given code doesn't have a specified expiration date. However, it's indicated as © 2023 Modal Labs, Inc."
3,What are some other methods available in the modal.NetworkFileSystem toolset besides 'remove_file'?,modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Some other methods available in the modal.NetworkFileSystem toolset besides 'remove_file' include 'from_id', 'persist', 'from_name', 'lookup', 'new', 'persisted', 'write_file', 'read_file', 'iterdir', 'add_local_file', 'add_local_dir', and 'listdir'."
4,What is the base URL of the __sveltekit_qfhbjo object?,modalNetworkFileSystem removefile,"@live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False):Copy @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_methoddefremove_file(self, path:str, recursive=False): @live_method def remove_file self, path:str, recursive=False str False Copy Copy    Copy Remove a file in a network file system. modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystemfrom_idpersistfrom_namelookupnewpersistedwrite_fileread_fileiterdiradd_local_fileadd_local_dirlistdirremove_file modal.NetworkFileSystem from_id persist from_name lookup new persisted write_file read_file iterdir add_local_file add_local_dir listdir remove_file CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The base URL of the __sveltekit_qfhbjo object is ""../.."", relative to the current location."
0,What is the purpose of the Hacker News Slackbot in this context?,Hacker News Slackbot,"In this example, we use Modal to deploy a cron job that periodically queries Hacker News for
new posts matching a given search term, and posts the results to Slack. ","The purpose is to deploy a cron job that periodically queries Hacker News for new posts matching a given search term, and posts the results to Slack."
3,What search strategy does the Hacker News Slackbot employ?,Hacker News Slackbot,"In this example, we use Modal to deploy a cron job that periodically queries Hacker News for
new posts matching a given search term, and posts the results to Slack. ",It queries for new posts matching a given search term.
6,What does the Hacker News Slackbot query?,Hacker News Slackbot,"In this example, we use Modal to deploy a cron job that periodically queries Hacker News for
new posts matching a given search term, and posts the results to Slack. ",It queries Hacker News for new posts matching a given search term.
0,What is required for the Slack bot to gain access to a bot token?,Hacker News Slackbot Defining the function and importing the secret,"Our Slack bot will need access to a bot token. We can use Modal’sSecretsinterface to accomplish this.
To quickly create a Slack bot secret, navigate to thecreate secretpage, select the Slack secret template
from the list options, and follow the instructions in the “Where to find the credentials?” panel.
Name your secrethn-bot-slack, so that the code in this example still works. Secrets create secret hn-bot-slack Now, we define the functionpost_to_slack, which simply instantiates the Slack client using our token,
and then uses it to post a message to a given channel name. post_to_slack @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack"")) image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack"") ""hn-bot-slack"" ""hn-bot-slack"" async def post_to_slack message:str str import ""SLACK_BOT_TOKEN"" ""hn-alerts"" Copy Copy    Copy ",The Slack bot will need access to a bot token through Modal's Secrets interface. 
3,What should be the name of the secret for this code to work?,Hacker News Slackbot Defining the function and importing the secret,"Our Slack bot will need access to a bot token. We can use Modal’sSecretsinterface to accomplish this.
To quickly create a Slack bot secret, navigate to thecreate secretpage, select the Slack secret template
from the list options, and follow the instructions in the “Where to find the credentials?” panel.
Name your secrethn-bot-slack, so that the code in this example still works. Secrets create secret hn-bot-slack Now, we define the functionpost_to_slack, which simply instantiates the Slack client using our token,
and then uses it to post a message to a given channel name. post_to_slack @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack"")) image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack"") ""hn-bot-slack"" ""hn-bot-slack"" async def post_to_slack message:str str import ""SLACK_BOT_TOKEN"" ""hn-alerts"" Copy Copy    Copy ","The secret name should be ""hn-bot-slack"" for this specific code."
6,What information does the Slack bot use to post a message to a channel?,Hacker News Slackbot Defining the function and importing the secret,"Our Slack bot will need access to a bot token. We can use Modal’sSecretsinterface to accomplish this.
To quickly create a Slack bot secret, navigate to thecreate secretpage, select the Slack secret template
from the list options, and follow the instructions in the “Where to find the credentials?” panel.
Name your secrethn-bot-slack, so that the code in this example still works. Secrets create secret hn-bot-slack Now, we define the functionpost_to_slack, which simply instantiates the Slack client using our token,
and then uses it to post a message to a given channel name. post_to_slack @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message)Copy @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack""))asyncdefpost_to_slack(message:str):importslack_sdk

    client = slack_sdk.WebClient(token=os.environ[""SLACK_BOT_TOKEN""])
    client.chat_postMessage(channel=""hn-alerts"", text=message) @stub.function(image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack"")) image=slack_sdk_image, secret=modal.Secret.from_name(""hn-bot-slack"") ""hn-bot-slack"" ""hn-bot-slack"" async def post_to_slack message:str str import ""SLACK_BOT_TOKEN"" ""hn-alerts"" Copy Copy    Copy ","The Slack bot uses the WebClient, the bot token, and a specific channel name, in this case, ""hn-alerts"", to post a message."
0,What API is being used to search for posts?,Hacker News Slackbot Searching Hacker News,"We are going to use Algolia’sHacker News Search APIto query for posts
matching a given search term in the past X days. Let’s define our search term and query period. Hacker News Search API QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1 QUERY =""serverless""WINDOW_SIZE_DAYS =1 QUERY =""serverless""WINDOW_SIZE_DAYS =1 ""serverless"" 1 Copy Copy    Copy Let’s also define an image that has therequestspackage installed, so we can query the API. requests requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"") requests_image = modal.Image.debian_slim().pip_install(""requests"") requests_image = modal.Image.debian_slim().pip_install(""requests"") ""requests"" Copy Copy    Copy We can now define our main entrypoint, that queries Algolia for the term, and callspost_to_slackon all the results. We specify aschedulein the function decorator, which
means that our function will run automatically at the given interval. post_to_slack schedule @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image) image=requests_image def search_hackernews import ""http://hn.algolia.com/api/v1/search"" ""query"" ""numericFilters"" f""created_at_i>{threshold.timestamp()}"" {threshold.timestamp()} ""url"" for in ""hits"" if ""url"" print f""Query returned{len(urls)}items."" {len(urls)} len for in map pass Copy Copy    Copy ",Algolia’s Hacker News Search API
3,What is the period within which the query searches for posts?,Hacker News Slackbot Searching Hacker News,"We are going to use Algolia’sHacker News Search APIto query for posts
matching a given search term in the past X days. Let’s define our search term and query period. Hacker News Search API QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1 QUERY =""serverless""WINDOW_SIZE_DAYS =1 QUERY =""serverless""WINDOW_SIZE_DAYS =1 ""serverless"" 1 Copy Copy    Copy Let’s also define an image that has therequestspackage installed, so we can query the API. requests requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"") requests_image = modal.Image.debian_slim().pip_install(""requests"") requests_image = modal.Image.debian_slim().pip_install(""requests"") ""requests"" Copy Copy    Copy We can now define our main entrypoint, that queries Algolia for the term, and callspost_to_slackon all the results. We specify aschedulein the function decorator, which
means that our function will run automatically at the given interval. post_to_slack schedule @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image) image=requests_image def search_hackernews import ""http://hn.algolia.com/api/v1/search"" ""query"" ""numericFilters"" f""created_at_i>{threshold.timestamp()}"" {threshold.timestamp()} ""url"" for in ""hits"" if ""url"" print f""Query returned{len(urls)}items."" {len(urls)} len for in map pass Copy Copy    Copy ",Past 1 day
6,What function is defined as the main entry point to query Algolia and post the results to slack?,Hacker News Slackbot Searching Hacker News,"We are going to use Algolia’sHacker News Search APIto query for posts
matching a given search term in the past X days. Let’s define our search term and query period. Hacker News Search API QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1Copy QUERY =""serverless""WINDOW_SIZE_DAYS =1 QUERY =""serverless""WINDOW_SIZE_DAYS =1 QUERY =""serverless""WINDOW_SIZE_DAYS =1 ""serverless"" 1 Copy Copy    Copy Let’s also define an image that has therequestspackage installed, so we can query the API. requests requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"")Copy requests_image = modal.Image.debian_slim().pip_install(""requests"") requests_image = modal.Image.debian_slim().pip_install(""requests"") requests_image = modal.Image.debian_slim().pip_install(""requests"") ""requests"" Copy Copy    Copy We can now define our main entrypoint, that queries Algolia for the term, and callspost_to_slackon all the results. We specify aschedulein the function decorator, which
means that our function will run automatically at the given interval. post_to_slack schedule @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):passCopy @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image)defsearch_hackernews():importrequests

    url =""http://hn.algolia.com/api/v1/search""threshold = datetime.utcnow() - timedelta(days=WINDOW_SIZE_DAYS)

    params = {""query"": QUERY,""numericFilters"":f""created_at_i>{threshold.timestamp()}"",
    }

    response = requests.get(url, params).json()
    urls = [item[""url""]foriteminresponse[""hits""]ifitem[""url""]]print(f""Query returned{len(urls)}items."")for_inpost_to_slack.map(urls):pass @stub.function(image=requests_image) image=requests_image def search_hackernews import ""http://hn.algolia.com/api/v1/search"" ""query"" ""numericFilters"" f""created_at_i>{threshold.timestamp()}"" {threshold.timestamp()} ""url"" for in ""hits"" if ""url"" print f""Query returned{len(urls)}items."" {len(urls)} len for in map pass Copy Copy    Copy ","The function is ""search_hackernews()"""
0,What is the command to test run the scheduled function?,Hacker News Slackbot Test running,We can now test run our scheduled function as follows:modal run hackernews_alerts.py::stub.search_hackernews modal run hackernews_alerts.py::stub.search_hackernews ,"The command is ""modal run hackernews_alerts.py::stub.search_hackernews""."
3,What is the context of this function?,Hacker News Slackbot Test running,We can now test run our scheduled function as follows:modal run hackernews_alerts.py::stub.search_hackernews modal run hackernews_alerts.py::stub.search_hackernews ,The context of this function is testing the Hacker News Slackbot.
6,What platform is this code likely intended for?,Hacker News Slackbot Test running,We can now test run our scheduled function as follows:modal run hackernews_alerts.py::stub.search_hackernews modal run hackernews_alerts.py::stub.search_hackernews ,This code is likely intended for the Slack platform.
0,What function is called by Modal every day in the Hacker News Slackbot system?,Hacker News Slackbot Defining the schedule and deploying,"Let’s define a function that will be called by Modal every day @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def run_daily Copy Copy    Copy In order to deploy this as a persistent cron job, you can runmodal deploy hackernews_alerts.py, modal deploy hackernews_alerts.py Once the job is deployed, visit theapps pagepage to see
its execution history, logs and other stats. apps page Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deploying Hacker News Slackbot Import and define the stub Defining the function and importing the secret Searching Hacker News Test running Defining the schedule and deploying Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy ",The function called every day by Modal in the Hacker News Slackbot system is run_daily().
3,What command can you use to deploy this as a persistent cron job?,Hacker News Slackbot Defining the schedule and deploying,"Let’s define a function that will be called by Modal every day @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def run_daily Copy Copy    Copy In order to deploy this as a persistent cron job, you can runmodal deploy hackernews_alerts.py, modal deploy hackernews_alerts.py Once the job is deployed, visit theapps pagepage to see
its execution history, logs and other stats. apps page Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deploying Hacker News Slackbot Import and define the stub Defining the function and importing the secret Searching Hacker News Test running Defining the schedule and deploying Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy ","To deploy this as a persistent cron job, you can use the command 'modal deploy hackernews_alerts.py'."
6,What steps should you follow to run this example on Modal?,Hacker News Slackbot Defining the schedule and deploying,"Let’s define a function that will be called by Modal every day @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def run_daily Copy Copy    Copy In order to deploy this as a persistent cron job, you can runmodal deploy hackernews_alerts.py, modal deploy hackernews_alerts.py Once the job is deployed, visit theapps pagepage to see
its execution history, logs and other stats. apps page Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deploying Hacker News Slackbot Import and define the stub Defining the function and importing the secret Searching Hacker News Test running Defining the schedule and deploying Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy ","To run this example on Modal, you should create a free account, install the Modal Python package, create an API token, clone the modal-examples repository, and run the file '05_scheduling/hackernews_alerts.py'."
0,What is the schedule set for the run_daily function in the presented content?,Hacker News Slackbot Defining the schedule and deploying,"Let’s define a function that will be called by Modal every day @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def run_daily Copy Copy    Copy In order to deploy this as a persistent cron job, you can runmodal deploy hackernews_alerts.py, modal deploy hackernews_alerts.py Once the job is deployed, visit theapps pagepage to see
its execution history, logs and other stats. apps page Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deploying Hacker News Slackbot Import and define the stub Defining the function and importing the secret Searching Hacker News Test running Defining the schedule and deploying Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 05_scheduling/hackernews_alerts.py $ modal run 05_scheduling/hackernews_alerts.py modal run 05_scheduling/hackernews_alerts.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",The schedule for the run_daily function is set to run every day.
3,"Where can the execution history, logs and stats of the job be seen after it is deployed?",Hacker News Slackbot Defining the schedule and deploying,"Let’s define a function that will be called by Modal every day @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def run_daily Copy Copy    Copy In order to deploy this as a persistent cron job, you can runmodal deploy hackernews_alerts.py, modal deploy hackernews_alerts.py Once the job is deployed, visit theapps pagepage to see
its execution history, logs and other stats. apps page Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deploying Hacker News Slackbot Import and define the stub Defining the function and importing the secret Searching Hacker News Test running Defining the schedule and deploying Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 05_scheduling/hackernews_alerts.py $ modal run 05_scheduling/hackernews_alerts.py modal run 05_scheduling/hackernews_alerts.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The execution history, logs and stats of the job can be seen on the apps page after it is deployed."
6,What is the name of the company that owns Modal?,Hacker News Slackbot Defining the schedule and deploying,"Let’s define a function that will be called by Modal every day @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote()Copy @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1))defrun_daily():
    search_hackernews.remote() @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def run_daily Copy Copy    Copy In order to deploy this as a persistent cron job, you can runmodal deploy hackernews_alerts.py, modal deploy hackernews_alerts.py Once the job is deployed, visit theapps pagepage to see
its execution history, logs and other stats. apps page Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deployingTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Hacker News SlackbotImport and define the stubDefining the function and importing the secretSearching Hacker NewsTest runningDefining the schedule and deploying Hacker News Slackbot Import and define the stub Defining the function and importing the secret Searching Hacker News Test running Defining the schedule and deploying Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 05_scheduling/hackernews_alerts.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 05_scheduling/hackernews_alerts.py $ modal run 05_scheduling/hackernews_alerts.py modal run 05_scheduling/hackernews_alerts.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The company that owns Modal is named Modal Labs, Inc."
0,What does the Modal function represent in this example?,Hello world,"This is a trivial example of a Modal function, but it illustrates a few features: You can print things to stdout and stderr.You can return data.You can map over a function. You can print things to stdout and stderr. You can return data. You can map over a function. ","It represents a trivial example that is able to print things to stdout and stderr, return data, and map over a function."
3,What is one capability of the Modal function in this example beyond printing to stdout and stderr?,Hello world,"This is a trivial example of a Modal function, but it illustrates a few features: You can print things to stdout and stderr.You can return data.You can map over a function. You can print things to stdout and stderr. You can return data. You can map over a function. ",It can return data.
6,What are the three main features illustrated by this Modal function?,Hello world,"This is a trivial example of a Modal function, but it illustrates a few features: You can print things to stdout and stderr.You can return data.You can map over a function. You can print things to stdout and stderr. You can return data. You can map over a function. ","The Modal function can print things to stdout and stderr, return data and map over a function."
0,What does the function do when outputted with an even value?,Hello world Defining a function,"Here we define a Modal function using themodal.functiondecorator.
The body of the function will automatically be run remotely.
This particular function is pretty silly: it just prints “hello”
and “world” alternatingly to standard out and standard error. modal.function @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function() def f i if 2 0 print ""hello"" else print ""world"" return Copy Copy    Copy ","It will print ""hello"" and the value. "
1,What is the function decorated with?,Hello world Defining a function,"Here we define a Modal function using themodal.functiondecorator.
The body of the function will automatically be run remotely.
This particular function is pretty silly: it just prints “hello”
and “world” alternatingly to standard out and standard error. modal.function @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function() def f i if 2 0 print ""hello"" else print ""world"" return Copy Copy    Copy ",It is decorated with the modal.function decorator.
2,What happens if function 'f' is passed an odd number?,Hello world Defining a function,"Here we define a Modal function using themodal.functiondecorator.
The body of the function will automatically be run remotely.
This particular function is pretty silly: it just prints “hello”
and “world” alternatingly to standard out and standard error. modal.function @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function() def f i if 2 0 print ""hello"" else print ""world"" return Copy Copy    Copy ","It prints ""world"" and the number, outputting it to standard error."
3,What does the function f return?,Hello world Defining a function,"Here we define a Modal function using themodal.functiondecorator.
The body of the function will automatically be run remotely.
This particular function is pretty silly: it just prints “hello”
and “world” alternatingly to standard out and standard error. modal.function @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function() def f i if 2 0 print ""hello"" else print ""world"" return Copy Copy    Copy ",It returns the square of the input number.
4,Is the function run locally or remotely?,Hello world Defining a function,"Here we define a Modal function using themodal.functiondecorator.
The body of the function will automatically be run remotely.
This particular function is pretty silly: it just prints “hello”
and “world” alternatingly to standard out and standard error. modal.function @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * iCopy @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function()deff(i):ifi %2==0:print(""hello"", i)else:print(""world"", i, file=sys.stderr)returni * i @stub.function() def f i if 2 0 print ""hello"" else print ""world"" return Copy Copy    Copy ",The function is run remotely.
0,What is the purpose of @stub.local_entrypoint()?,Hello world Running it,"Finally, let’s actually invoke it.
We put this invocation code inside a@stub.local_entrypoint().
This is because this module will be imported in the cloud, and we don’t want
this code to be executed a second time in the cloud. @stub.local_entrypoint() Runmodal run hello_world.pyand the@stub.local_entrypoint()decorator will handle
starting the Modal app and then executing the wrapped function body. modal run hello_world.py @stub.local_entrypoint() Inside themain()function body, we are calling the functionfin three ways: main() f 1  As a simple local call,f(1000)2. As a simpleremotecallf.remote(1000)3. By mapping over the integers0..19 f(1000) remote f.remote(1000) 0..19 @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint() def main # Call the function locally. print 1000 # Call the function remotely. print 1000 # Parallel map. 0 for in map range 20 print Copy Copy    Copy ",It's used to prevent the code from executing a second time in the cloud when the module is imported.
3,What does the 'f.remote(1000)' line of code do?,Hello world Running it,"Finally, let’s actually invoke it.
We put this invocation code inside a@stub.local_entrypoint().
This is because this module will be imported in the cloud, and we don’t want
this code to be executed a second time in the cloud. @stub.local_entrypoint() Runmodal run hello_world.pyand the@stub.local_entrypoint()decorator will handle
starting the Modal app and then executing the wrapped function body. modal run hello_world.py @stub.local_entrypoint() Inside themain()function body, we are calling the functionfin three ways: main() f 1  As a simple local call,f(1000)2. As a simpleremotecallf.remote(1000)3. By mapping over the integers0..19 f(1000) remote f.remote(1000) 0..19 @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint() def main # Call the function locally. print 1000 # Call the function remotely. print 1000 # Parallel map. 0 for in map range 20 print Copy Copy    Copy ",It calls the function 'f' remotely with the argument 1000.
6,What is the effect of the command 'modal run hello_world.py'?,Hello world Running it,"Finally, let’s actually invoke it.
We put this invocation code inside a@stub.local_entrypoint().
This is because this module will be imported in the cloud, and we don’t want
this code to be executed a second time in the cloud. @stub.local_entrypoint() Runmodal run hello_world.pyand the@stub.local_entrypoint()decorator will handle
starting the Modal app and then executing the wrapped function body. modal run hello_world.py @stub.local_entrypoint() Inside themain()function body, we are calling the functionfin three ways: main() f 1  As a simple local call,f(1000)2. As a simpleremotecallf.remote(1000)3. By mapping over the integers0..19 f(1000) remote f.remote(1000) 0..19 @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total)Copy @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint()defmain():# Call the function locally.print(f.local(1000))# Call the function remotely.print(f.remote(1000))# Parallel map.total =0forretinf.map(range(20)):
        total += retprint(total) @stub.local_entrypoint() def main # Call the function locally. print 1000 # Call the function remotely. print 1000 # Parallel map. 0 for in map range 20 print Copy Copy    Copy ",This command will start the Modal app and then execute the wrapped function body.
0,"What happens when you execute the "".remote on function f"" on Modal?",Hello world What happens,"When you do.remoteon functionf, Modal will executefin the cloud,not locally on your computer. It will take the code, put it inside a
container, run it, and stream all the output back to your local
computer. .remote f f in the cloud, Try doing one of these things next. Change the code and run again For instance, change theprintstatement in the functionf.
You can see that the latest code is always run. print f Modal’s goal is to make running code in the cloud feel like you’re
running code locally. You don’t need to run any commands to rebuild,
push containers, or go to a web UI to download logs. Map over a larger dataset Change the map range from 20 to some large number. You can see that
Modal will create and run more containers in parallel. The functionfis obviously silly and doesn’t do much, but you could
imagine something more significant, like: f Training a machine learning modelTranscoding mediaBacktesting a trading algorithm. Training a machine learning model Transcoding media Backtesting a trading algorithm. Modal lets you parallelize that operation trivially by running hundreds or
thousands of containers in the cloud. Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger dataset Hello, world! Import Modal and define the app Defining a function Running it What happens? Change the code and run again Map over a larger dataset Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy ","When you execute .remote on function f, Modal will run the selected function in the cloud, not on your local computer. It does this by putting the code inside a container, executing it, and streaming all the output back to your local machine."
3,How does Modal aim to make running code in the cloud feel?,Hello world What happens,"When you do.remoteon functionf, Modal will executefin the cloud,not locally on your computer. It will take the code, put it inside a
container, run it, and stream all the output back to your local
computer. .remote f f in the cloud, Try doing one of these things next. Change the code and run again For instance, change theprintstatement in the functionf.
You can see that the latest code is always run. print f Modal’s goal is to make running code in the cloud feel like you’re
running code locally. You don’t need to run any commands to rebuild,
push containers, or go to a web UI to download logs. Map over a larger dataset Change the map range from 20 to some large number. You can see that
Modal will create and run more containers in parallel. The functionfis obviously silly and doesn’t do much, but you could
imagine something more significant, like: f Training a machine learning modelTranscoding mediaBacktesting a trading algorithm. Training a machine learning model Transcoding media Backtesting a trading algorithm. Modal lets you parallelize that operation trivially by running hundreds or
thousands of containers in the cloud. Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger dataset Hello, world! Import Modal and define the app Defining a function Running it What happens? Change the code and run again Map over a larger dataset Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy ","Modal aims to make running code in the cloud feel like you're running code locally. You don't need to run any commands to rebuild, push containers, or go to a web UI to download logs."
6,What are the steps to run an example on Modal?,Hello world What happens,"When you do.remoteon functionf, Modal will executefin the cloud,not locally on your computer. It will take the code, put it inside a
container, run it, and stream all the output back to your local
computer. .remote f f in the cloud, Try doing one of these things next. Change the code and run again For instance, change theprintstatement in the functionf.
You can see that the latest code is always run. print f Modal’s goal is to make running code in the cloud feel like you’re
running code locally. You don’t need to run any commands to rebuild,
push containers, or go to a web UI to download logs. Map over a larger dataset Change the map range from 20 to some large number. You can see that
Modal will create and run more containers in parallel. The functionfis obviously silly and doesn’t do much, but you could
imagine something more significant, like: f Training a machine learning modelTranscoding mediaBacktesting a trading algorithm. Training a machine learning model Transcoding media Backtesting a trading algorithm. Modal lets you parallelize that operation trivially by running hundreds or
thousands of containers in the cloud. Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger dataset Hello, world! Import Modal and define the app Defining a function Running it What happens? Change the code and run again Map over a larger dataset Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy ","First, create a free account. Then, install the Modal Python package and create an API token by using the commands ""$pip install modal"" and ""$modal setup"". Next, clone the modal-examples repository and run it using the commands ""$git clone https://github.com/modal-labs/modal-examples"", ""$cd modal-examples"", and ""$modal run 01_getting_started/hello_world.py""."
0,What happens when you use the .remote on function f in Modal?,Hello world What happens,"When you do.remoteon functionf, Modal will executefin the cloud,not locally on your computer. It will take the code, put it inside a
container, run it, and stream all the output back to your local
computer. .remote f f in the cloud, Try doing one of these things next. Change the code and run again For instance, change theprintstatement in the functionf.
You can see that the latest code is always run. print f Modal’s goal is to make running code in the cloud feel like you’re
running code locally. You don’t need to run any commands to rebuild,
push containers, or go to a web UI to download logs. Map over a larger dataset Change the map range from 20 to some large number. You can see that
Modal will create and run more containers in parallel. The functionfis obviously silly and doesn’t do much, but you could
imagine something more significant, like: f Training a machine learning modelTranscoding mediaBacktesting a trading algorithm. Training a machine learning model Transcoding media Backtesting a trading algorithm. Modal lets you parallelize that operation trivially by running hundreds or
thousands of containers in the cloud. Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger dataset Hello, world! Import Modal and define the app Defining a function Running it What happens? Change the code and run again Map over a larger dataset Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 01_getting_started/hello_world.py $ modal run 01_getting_started/hello_world.py modal run 01_getting_started/hello_world.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","When you use .remote on function f in Modal, Modal executes the function in the cloud, not locally on your computer. It takes the code, puts it inside a container, runs it, and streams all the output back to your local computer."
3,What types of operations can Modal parallelize?,Hello world What happens,"When you do.remoteon functionf, Modal will executefin the cloud,not locally on your computer. It will take the code, put it inside a
container, run it, and stream all the output back to your local
computer. .remote f f in the cloud, Try doing one of these things next. Change the code and run again For instance, change theprintstatement in the functionf.
You can see that the latest code is always run. print f Modal’s goal is to make running code in the cloud feel like you’re
running code locally. You don’t need to run any commands to rebuild,
push containers, or go to a web UI to download logs. Map over a larger dataset Change the map range from 20 to some large number. You can see that
Modal will create and run more containers in parallel. The functionfis obviously silly and doesn’t do much, but you could
imagine something more significant, like: f Training a machine learning modelTranscoding mediaBacktesting a trading algorithm. Training a machine learning model Transcoding media Backtesting a trading algorithm. Modal lets you parallelize that operation trivially by running hundreds or
thousands of containers in the cloud. Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger dataset Hello, world! Import Modal and define the app Defining a function Running it What happens? Change the code and run again Map over a larger dataset Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 01_getting_started/hello_world.py $ modal run 01_getting_started/hello_world.py modal run 01_getting_started/hello_world.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal lets you parallelize significant operations like training a machine learning model, transcoding media, and backtesting a trading algorithm by running hundreds or thousands of containers in the cloud."
6,"What is the year of establishment for Modal Labs, Inc.?",Hello world What happens,"When you do.remoteon functionf, Modal will executefin the cloud,not locally on your computer. It will take the code, put it inside a
container, run it, and stream all the output back to your local
computer. .remote f f in the cloud, Try doing one of these things next. Change the code and run again For instance, change theprintstatement in the functionf.
You can see that the latest code is always run. print f Modal’s goal is to make running code in the cloud feel like you’re
running code locally. You don’t need to run any commands to rebuild,
push containers, or go to a web UI to download logs. Map over a larger dataset Change the map range from 20 to some large number. You can see that
Modal will create and run more containers in parallel. The functionfis obviously silly and doesn’t do much, but you could
imagine something more significant, like: f Training a machine learning modelTranscoding mediaBacktesting a trading algorithm. Training a machine learning model Transcoding media Backtesting a trading algorithm. Modal lets you parallelize that operation trivially by running hundreds or
thousands of containers in the cloud. Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger datasetTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Hello, world!Import Modal and define the appDefining a functionRunning itWhat happens?Change the code and run againMap over a larger dataset Hello, world! Import Modal and define the app Defining a function Running it What happens? Change the code and run again Map over a larger dataset Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 01_getting_started/hello_world.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 01_getting_started/hello_world.py $ modal run 01_getting_started/hello_world.py modal run 01_getting_started/hello_world.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. was established in 2023."
0,"What is the ""client"" in classLocalApp referring to?",modalapp modalappLocalApp,"classLocalApp(object)Copy classLocalApp(object)Copy classLocalApp(object)Copy classLocalApp(object) classLocalApp(object) classLocalApp(object) class LocalApp object Copy Copy    Copy client @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client: @propertydefclient(self) -> _Client: @propertydefclient(self) -> _Client: @property def client self Copy Copy    Copy A reference to the running App’s server client. app_id @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str: @propertydefapp_id(self) ->str: @propertydefapp_id(self) ->str: @property def app_id self str Copy Copy    Copy A unique identifier for this running App. disconnect defdisconnect(self):Copy defdisconnect(self):Copy defdisconnect(self):Copy defdisconnect(self): defdisconnect(self): defdisconnect(self): def disconnect self Copy Copy    Copy Tell the server the client has disconnected for this app. Terminates all running tasks
for ephemeral apps. stop defstop(self):Copy defstop(self):Copy defstop(self):Copy defstop(self): defstop(self): defstop(self): def stop self Copy Copy    Copy Tell the server to stop this app, terminating all running tasks. log_url deflog_url(self):Copy deflog_url(self):Copy deflog_url(self):Copy deflog_url(self): deflog_url(self): deflog_url(self): def log_url self Copy Copy    Copy URL link to a running app’s logs page in the Modal dashboard. deploy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str: defdeploy(self, name:str, namespace, object_entity:str) ->str: defdeploy(self, name:str, namespace, object_entity:str) ->str: def deploy self, name:str, namespace, object_entity:str str str str Copy Copy    Copy App.deployis deprecated in favor ofmodal.runner.deploy_stub. App.deploy modal.runner.deploy_stub spawn_sandbox defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,): defspawn_sandbox(self,
    *args,
    **kwargs,): defspawn_sandbox(self,
    *args,
    **kwargs,): def spawn_sandbox self,
    *args,
    **kwargs, Copy Copy    Copy Deprecated. UseStub.spawn_sandboxinstead. Stub.spawn_sandbox ",It's a reference to the running App’s server client. 
3,"What does the ""disconnect"" function in classLocalApp do?",modalapp modalappLocalApp,"classLocalApp(object)Copy classLocalApp(object)Copy classLocalApp(object)Copy classLocalApp(object) classLocalApp(object) classLocalApp(object) class LocalApp object Copy Copy    Copy client @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client: @propertydefclient(self) -> _Client: @propertydefclient(self) -> _Client: @property def client self Copy Copy    Copy A reference to the running App’s server client. app_id @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str: @propertydefapp_id(self) ->str: @propertydefapp_id(self) ->str: @property def app_id self str Copy Copy    Copy A unique identifier for this running App. disconnect defdisconnect(self):Copy defdisconnect(self):Copy defdisconnect(self):Copy defdisconnect(self): defdisconnect(self): defdisconnect(self): def disconnect self Copy Copy    Copy Tell the server the client has disconnected for this app. Terminates all running tasks
for ephemeral apps. stop defstop(self):Copy defstop(self):Copy defstop(self):Copy defstop(self): defstop(self): defstop(self): def stop self Copy Copy    Copy Tell the server to stop this app, terminating all running tasks. log_url deflog_url(self):Copy deflog_url(self):Copy deflog_url(self):Copy deflog_url(self): deflog_url(self): deflog_url(self): def log_url self Copy Copy    Copy URL link to a running app’s logs page in the Modal dashboard. deploy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str: defdeploy(self, name:str, namespace, object_entity:str) ->str: defdeploy(self, name:str, namespace, object_entity:str) ->str: def deploy self, name:str, namespace, object_entity:str str str str Copy Copy    Copy App.deployis deprecated in favor ofmodal.runner.deploy_stub. App.deploy modal.runner.deploy_stub spawn_sandbox defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,): defspawn_sandbox(self,
    *args,
    **kwargs,): defspawn_sandbox(self,
    *args,
    **kwargs,): def spawn_sandbox self,
    *args,
    **kwargs, Copy Copy    Copy Deprecated. UseStub.spawn_sandboxinstead. Stub.spawn_sandbox ","It tells the server the client has disconnected for this app, and terminates all running tasks for ephemeral apps."
6,"What is the functionality of the ""spawn_sandbox"" method in classLocalApp?",modalapp modalappLocalApp,"classLocalApp(object)Copy classLocalApp(object)Copy classLocalApp(object)Copy classLocalApp(object) classLocalApp(object) classLocalApp(object) class LocalApp object Copy Copy    Copy client @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client:Copy @propertydefclient(self) -> _Client: @propertydefclient(self) -> _Client: @propertydefclient(self) -> _Client: @property def client self Copy Copy    Copy A reference to the running App’s server client. app_id @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str:Copy @propertydefapp_id(self) ->str: @propertydefapp_id(self) ->str: @propertydefapp_id(self) ->str: @property def app_id self str Copy Copy    Copy A unique identifier for this running App. disconnect defdisconnect(self):Copy defdisconnect(self):Copy defdisconnect(self):Copy defdisconnect(self): defdisconnect(self): defdisconnect(self): def disconnect self Copy Copy    Copy Tell the server the client has disconnected for this app. Terminates all running tasks
for ephemeral apps. stop defstop(self):Copy defstop(self):Copy defstop(self):Copy defstop(self): defstop(self): defstop(self): def stop self Copy Copy    Copy Tell the server to stop this app, terminating all running tasks. log_url deflog_url(self):Copy deflog_url(self):Copy deflog_url(self):Copy deflog_url(self): deflog_url(self): deflog_url(self): def log_url self Copy Copy    Copy URL link to a running app’s logs page in the Modal dashboard. deploy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str:Copy defdeploy(self, name:str, namespace, object_entity:str) ->str: defdeploy(self, name:str, namespace, object_entity:str) ->str: defdeploy(self, name:str, namespace, object_entity:str) ->str: def deploy self, name:str, namespace, object_entity:str str str str Copy Copy    Copy App.deployis deprecated in favor ofmodal.runner.deploy_stub. App.deploy modal.runner.deploy_stub spawn_sandbox defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,):Copy defspawn_sandbox(self,
    *args,
    **kwargs,): defspawn_sandbox(self,
    *args,
    **kwargs,): defspawn_sandbox(self,
    *args,
    **kwargs,): def spawn_sandbox self,
    *args,
    **kwargs, Copy Copy    Copy Deprecated. UseStub.spawn_sandboxinstead. Stub.spawn_sandbox ",It is deprecated and should now use Stub.spawn_sandbox instead.
0,What does the function defis_local() return when executed locally on the user's machine?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",True
1,"In the context of the Modal app, what will defis_local() return when executed from a Modal container in the cloud?",modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",False
2,What are some of the actions that could be performed with the ContainerApp in the Modal app?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Initialize the container, spawn a sandbox"
3,What are some of the actions that could be performed with the LocalApp in the Modal app?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Disconnect, stop, access the log URL, deploy, spawn a sandbox"
4,Who is the legal copyright holder mentioned in the content?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc."
0,What does the function defis_local() return if run locally on the user's machine?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It returns True.
1,What does the function defis_local() return if run from a Modal container in the cloud?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It returns False.
2,"Who owns Modal Labs, Inc?",modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. does not indicate a specific owner in the given text."
3,What are the available operations on modal.app.ContainerApp according to the text?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The available operations are init_container and spawn_sandbox.
4,What are the available operations on modal.app.LocalApp according to the text?,modalapp modalappislocal,"defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool:Copy defis_local() ->bool: defis_local() ->bool: defis_local() ->bool: def is_local bool Copy Copy    Copy Returns if we are currently on the machine launching/deploying a Modal app ReturnsTruewhen executed locally on the user’s machine.
ReturnsFalsewhen executed from a Modal container in the cloud. True False modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.appmodal.app.ContainerAppclientapp_idinit_containerspawn_sandboxmodal.app.LocalAppclientapp_iddisconnectstoplog_urldeployspawn_sandboxmodal.app.is_local modal.app modal.app.ContainerApp client app_id init_container spawn_sandbox modal.app.LocalApp client app_id disconnect stop log_url deploy spawn_sandbox modal.app.is_local CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The available operations are disconnect, stop, log_url, deploy, and spawn_sandbox."
0,What is the purpose of the modal app?,modal app,modal app Manage deployed and running apps. Usage: Usage modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]... modal app [OPTIONS] COMMAND [ARGS]... modal app [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands list: List all running or recently running Modal apps for the current accountlogs: Output logs for a running app.stop: Stop an app. list: List all running or recently running Modal apps for the current account list logs: Output logs for a running app. logs stop: Stop an app. stop ,The modal app is used to manage deployed and running apps.
3,"What does the ""--help"" option do in the modal app?",modal app,modal app Manage deployed and running apps. Usage: Usage modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]... modal app [OPTIONS] COMMAND [ARGS]... modal app [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands list: List all running or recently running Modal apps for the current accountlogs: Output logs for a running app.stop: Stop an app. list: List all running or recently running Modal apps for the current account list logs: Output logs for a running app. logs stop: Stop an app. stop ,"The ""--help"" option shows the help message and exits the operation."
6,"What does the ""stop"" command do in the modal app?",modal app,modal app Manage deployed and running apps. Usage: Usage modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]...Copy modal app [OPTIONS] COMMAND [ARGS]... modal app [OPTIONS] COMMAND [ARGS]... modal app [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands list: List all running or recently running Modal apps for the current accountlogs: Output logs for a running app.stop: Stop an app. list: List all running or recently running Modal apps for the current account list logs: Output logs for a running app. logs stop: Stop an app. stop ,"The ""stop"" command is used to stop an app."
0,What do the modal app logs provide? ,modal app modal app logs,modal app logs Output logs for a running app. Usage: Usage modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_ID modal app logs [OPTIONS] APP_ID modal app logs [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help ,Output logs for a running app.
3,What is required to use the 'modal app logs' command?,modal app modal app logs,modal app logs Output logs for a running app. Usage: Usage modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_ID modal app logs [OPTIONS] APP_ID modal app logs [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help ,APP_ID is required.
6,"What does the ""--help"" option provide?",modal app modal app logs,modal app logs Output logs for a running app. Usage: Usage modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_IDCopy modal app logs [OPTIONS] APP_ID modal app logs [OPTIONS] APP_ID modal app logs [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help ,It shows a help message and exits.
0,What is the command to stop an app using the modal app command tool?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The command is 'modal app stop [OPTIONS] APP_ID'
1,What is the APP_ID argument in the modal app command line tool?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",It's a required identifier specific to the app you want to manipulate.
2,What does the --help option do in the modal app command line tool?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The --help option displays assistance and exits the program.
3,What is the name of the company that owns the modal app command line tool?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The company is Modal Labs, Inc."
4,"What are some of the features or sections that Modal Labs, Inc. has on its website? ",modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The website has sections including Company, Examples, Documentation, Pricing, and Legal."
0,What is the usage of the command 'modal app stop'?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The usage of 'modal app stop' command is: Usage modal app stop [OPTIONS] APP_ID.
3,What is the function of the --help option in the 'modal app stop' command?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The --help option in the 'modal app stop' command shows the help message and exits the program.
6,How can one start the Modal app according to the javascript given?,modal app modal app stop,"modal app stop Stop an app. Usage: Usage modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_IDCopy modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID modal app stop [OPTIONS] APP_ID Copy Copy    Copy Arguments: Arguments APP_ID: [required] APP_ID: [required] APP_ID Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal appmodal app listmodal app logsmodal app stop modal app modal app list modal app logs modal app stop CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","One can start the Modal app by importing two modules (""../../../_app/immutable/entry/start.be12ce5d.js"" and ""../../../_app/immutable/entry/app.917210b3.js"") and then calling the start function from the imported kit module with the parameters app, element, and a configuration object."
0,What command can be used to open a serverless app instance on Modal?,modal launch,modal launch [Preview] Open a serverless app instance on Modal. This command is in preview and may change in the future. Usage: Usage modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]... modal launch [OPTIONS] COMMAND [ARGS]... modal launch [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands jupyter: Start Jupyter Lab on Modal.vscode: Start VS Code on Modal. jupyter: Start Jupyter Lab on Modal. jupyter vscode: Start VS Code on Modal. vscode ,The command 'modal launch [OPTIONS] COMMAND [ARGS]...' can be used to open a serverless app instance on Modal.
3,What applications can be started on Modal with the modal launch command?,modal launch,modal launch [Preview] Open a serverless app instance on Modal. This command is in preview and may change in the future. Usage: Usage modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]... modal launch [OPTIONS] COMMAND [ARGS]... modal launch [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands jupyter: Start Jupyter Lab on Modal.vscode: Start VS Code on Modal. jupyter: Start Jupyter Lab on Modal. jupyter vscode: Start VS Code on Modal. vscode ,Jupyter Lab and VS Code can be started on Modal using the 'modal launch' command
6,What is the command to start VS Code on Modal?,modal launch,modal launch [Preview] Open a serverless app instance on Modal. This command is in preview and may change in the future. Usage: Usage modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]...Copy modal launch [OPTIONS] COMMAND [ARGS]... modal launch [OPTIONS] COMMAND [ARGS]... modal launch [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands jupyter: Start Jupyter Lab on Modal.vscode: Start VS Code on Modal. jupyter: Start Jupyter Lab on Modal. jupyter vscode: Start VS Code on Modal. vscode ,The command to start VS Code on Modal is 'modal launch vscode'.
0,What is the command to start VS Code on Modal?,modal launch modal launch vscode,"modal launch vscode Start VS Code on Modal. Usage: Usage modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] Copy Copy    Copy Options: Options --cpu INTEGER: [default: 8]--memory INTEGER: [default: 32768]--gpu TEXT--timeout INTEGER: [default: 3600]--help: Show this message and exit. --cpu INTEGER: [default: 8] --cpu INTEGER --memory INTEGER: [default: 32768] --memory INTEGER --gpu TEXT --gpu TEXT --timeout INTEGER: [default: 3600] --timeout INTEGER --help: Show this message and exit. --help modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launch modal launch jupyter modal launch vscode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The command is 'modal launch vscode'.
3,What is the default setting for CPU in the 'modal launch vscode' command?,modal launch modal launch vscode,"modal launch vscode Start VS Code on Modal. Usage: Usage modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] Copy Copy    Copy Options: Options --cpu INTEGER: [default: 8]--memory INTEGER: [default: 32768]--gpu TEXT--timeout INTEGER: [default: 3600]--help: Show this message and exit. --cpu INTEGER: [default: 8] --cpu INTEGER --memory INTEGER: [default: 32768] --memory INTEGER --gpu TEXT --gpu TEXT --timeout INTEGER: [default: 3600] --timeout INTEGER --help: Show this message and exit. --help modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launch modal launch jupyter modal launch vscode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The default setting for CPU is 8.
6,What company created the 'modal launch vscode' command?,modal launch modal launch vscode,"modal launch vscode Start VS Code on Modal. Usage: Usage modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] Copy Copy    Copy Options: Options --cpu INTEGER: [default: 8]--memory INTEGER: [default: 32768]--gpu TEXT--timeout INTEGER: [default: 3600]--help: Show this message and exit. --cpu INTEGER: [default: 8] --cpu INTEGER --memory INTEGER: [default: 32768] --memory INTEGER --gpu TEXT --gpu TEXT --timeout INTEGER: [default: 3600] --timeout INTEGER --help: Show this message and exit. --help modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launch modal launch jupyter modal launch vscode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. created the 'modal launch vscode' command."
0,What is the command to start VS Code on Modal?,modal launch modal launch vscode,"modal launch vscode Start VS Code on Modal. Usage: Usage modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] Copy Copy    Copy Options: Options --cpu INTEGER: [default: 8]--memory INTEGER: [default: 32768]--gpu TEXT--timeout INTEGER: [default: 3600]--help: Show this message and exit. --cpu INTEGER: [default: 8] --cpu INTEGER --memory INTEGER: [default: 32768] --memory INTEGER --gpu TEXT --gpu TEXT --timeout INTEGER: [default: 3600] --timeout INTEGER --help: Show this message and exit. --help modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launch modal launch jupyter modal launch vscode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The command is modal launch vscode.
3,What is the default value for the --cpu option?,modal launch modal launch vscode,"modal launch vscode Start VS Code on Modal. Usage: Usage modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] Copy Copy    Copy Options: Options --cpu INTEGER: [default: 8]--memory INTEGER: [default: 32768]--gpu TEXT--timeout INTEGER: [default: 3600]--help: Show this message and exit. --cpu INTEGER: [default: 8] --cpu INTEGER --memory INTEGER: [default: 32768] --memory INTEGER --gpu TEXT --gpu TEXT --timeout INTEGER: [default: 3600] --timeout INTEGER --help: Show this message and exit. --help modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launch modal launch jupyter modal launch vscode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The default value for the --cpu option is 8.
6,What is the name of company hosting this site?,modal launch modal launch vscode,"modal launch vscode Start VS Code on Modal. Usage: Usage modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS]Copy modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] modal launch vscode [OPTIONS] Copy Copy    Copy Options: Options --cpu INTEGER: [default: 8]--memory INTEGER: [default: 32768]--gpu TEXT--timeout INTEGER: [default: 3600]--help: Show this message and exit. --cpu INTEGER: [default: 8] --cpu INTEGER --memory INTEGER: [default: 32768] --memory INTEGER --gpu TEXT --gpu TEXT --timeout INTEGER: [default: 3600] --timeout INTEGER --help: Show this message and exit. --help modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launchmodal launch jupytermodal launch vscode modal launch modal launch jupyter modal launch vscode CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The name of the company is Modal Labs, Inc."
0,What is the class FunctionStats used for?,modalfunctions modalfunctionsFunctionStats,"classFunctionStats(object)Copy classFunctionStats(object)Copy classFunctionStats(object)Copy classFunctionStats(object) classFunctionStats(object) classFunctionStats(object) class FunctionStats object Copy Copy    Copy Simple data structure storing stats for a running function. def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def __init__ self, backlog:int, num_active_runners:int, num_total_runners:int int int int None Copy Copy    Copy ",The class FunctionStats is used for storing stats for a running function.
3,What does the int in the __init__ function signify?,modalfunctions modalfunctionsFunctionStats,"classFunctionStats(object)Copy classFunctionStats(object)Copy classFunctionStats(object)Copy classFunctionStats(object) classFunctionStats(object) classFunctionStats(object) class FunctionStats object Copy Copy    Copy Simple data structure storing stats for a running function. def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def __init__ self, backlog:int, num_active_runners:int, num_total_runners:int int int int None Copy Copy    Copy ","The int in the __init__ function signifies that the values for backlog, num_active_runners, and num_total_runners should be integers."
6,What is the purpose of using self in def __init__ in FunctionStats?,modalfunctions modalfunctionsFunctionStats,"classFunctionStats(object)Copy classFunctionStats(object)Copy classFunctionStats(object)Copy classFunctionStats(object) classFunctionStats(object) classFunctionStats(object) class FunctionStats object Copy Copy    Copy Simple data structure storing stats for a running function. def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->NoneCopy def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def__init__(self, backlog:int, num_active_runners:int, num_total_runners:int) ->None def __init__ self, backlog:int, num_active_runners:int, num_total_runners:int int int int None Copy Copy    Copy ",The keyword 'self' in __init__ represents the instance of the class and allows access to the attributes and methods of the class in python.
0,What class does the 'PartialFunction' object belong to? ,modalfunctions modalfunctionsPartialFunction,"classPartialFunction(object)Copy classPartialFunction(object)Copy classPartialFunction(object)Copy classPartialFunction(object) classPartialFunction(object) classPartialFunction(object) class PartialFunction object Copy Copy    Copy Intermediate function, produced by @method or @web_endpoint def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def __init__ self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None, Callable Any Optional None Optional bool None Copy Copy    Copy ",The 'PartialFunction' object belongs to the 'classPartialFunction'.
3,What is the second parameter 'webhook_config' in the '__init__' method of 'classPartialFunction'?,modalfunctions modalfunctionsPartialFunction,"classPartialFunction(object)Copy classPartialFunction(object)Copy classPartialFunction(object)Copy classPartialFunction(object) classPartialFunction(object) classPartialFunction(object) class PartialFunction object Copy Copy    Copy Intermediate function, produced by @method or @web_endpoint def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def __init__ self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None, Callable Any Optional None Optional bool None Copy Copy    Copy ","The second parameter 'webhook_config' in the '__init__' method of 'classPartialFunction' is Optional, and it is of type 'api_pb2.WebhookConfig'."
6,What does an instance of 'classPartialFunction' represent?,modalfunctions modalfunctionsPartialFunction,"classPartialFunction(object)Copy classPartialFunction(object)Copy classPartialFunction(object)Copy classPartialFunction(object) classPartialFunction(object) classPartialFunction(object) class PartialFunction object Copy Copy    Copy Intermediate function, produced by @method or @web_endpoint def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,):Copy def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def__init__(self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None,): def __init__ self,
    raw_f:Callable[...,Any],
    webhook_config:Optional[api_pb2.WebhookConfig] =None,
    is_generator:Optional[bool] =None, Callable Any Optional None Optional bool None Copy Copy    Copy ",An instance of 'classPartialFunction' represents an Intermediate function which can be produced by a method or a web_endpoint.
0,What is an ASGI app in the context of this content?,modalfunctions modalfunctionsasgiapp,"@typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def asgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering an ASGI app with a Modal function. Asynchronous Server Gateway Interface (ASGI) is a standard for Python
synchronous and asynchronous apps, supported by all popular Python web
libraries. This is an advanced decorator that gives full flexibility in
defining one or more web endpoints on Modal. Usage: Usage: fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... from import Callable @stub.function() @modal.asgi_app() def create_asgi Callable Copy Copy    Copy To learn how to use Modal with popular web frameworks, see theguide on web endpoints. guide on web endpoints ","An ASGI app in this context is short for Asynchronous Server Gateway Interface app, which is a standard for Python synchronous and asynchronous apps, supported by all popular Python web libraries."
3,What is the label parameter for?,modalfunctions modalfunctionsasgiapp,"@typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def asgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering an ASGI app with a Modal function. Asynchronous Server Gateway Interface (ASGI) is a standard for Python
synchronous and asynchronous apps, supported by all popular Python web
libraries. This is an advanced decorator that gives full flexibility in
defining one or more web endpoints on Modal. Usage: Usage: fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... from import Callable @stub.function() @modal.asgi_app() def create_asgi Callable Copy Copy    Copy To learn how to use Modal with popular web frameworks, see theguide on web endpoints. guide on web endpoints ",The label parameter is for creating an endpoint. The final subdomain will be '<workspace>--<label>'.
6,What does it mean to create an endpoint using a custom domain fully-qualified domain name?,modalfunctions modalfunctionsasgiapp,"@typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefasgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def asgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering an ASGI app with a Modal function. Asynchronous Server Gateway Interface (ASGI) is a standard for Python
synchronous and asynchronous apps, supported by all popular Python web
libraries. This is an advanced decorator that gives full flexibility in
defining one or more web endpoints on Modal. Usage: Usage: fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.asgi_app()defcreate_asgi() ->Callable:
    ... from import Callable @stub.function() @modal.asgi_app() def create_asgi Callable Copy Copy    Copy To learn how to use Modal with popular web frameworks, see theguide on web endpoints. guide on web endpoints ",A custom domain fully-qualified domain name can optionally be set to create an endpoint on Modal.
0,What is the function of defcurrent_input_id()?,modalfunctions modalfunctionscurrentinputid,"defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str: defcurrent_input_id() ->str: defcurrent_input_id() ->str: def current_input_id str Copy Copy    Copy Returns the input ID for the currently processed input. Can only be called from Modal function (i.e. in a container context). frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") from import @stub.function() def process_stuff print f""Starting to process{current_input_id()}"" {current_input_id()} Copy Copy    Copy ",The function defcurrent_input_id() returns the input ID for the currently processed input.
3,What is the main purpose of the process_stuff() function in this context?,modalfunctions modalfunctionscurrentinputid,"defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str: defcurrent_input_id() ->str: defcurrent_input_id() ->str: def current_input_id str Copy Copy    Copy Returns the input ID for the currently processed input. Can only be called from Modal function (i.e. in a container context). frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") from import @stub.function() def process_stuff print f""Starting to process{current_input_id()}"" {current_input_id()} Copy Copy    Copy ",The function process_stuff() is intended to initiate processing the element with the current input ID.
6,What is the output of the process_stuff() function?,modalfunctions modalfunctionscurrentinputid,"defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str:Copy defcurrent_input_id() ->str: defcurrent_input_id() ->str: defcurrent_input_id() ->str: def current_input_id str Copy Copy    Copy Returns the input ID for the currently processed input. Can only be called from Modal function (i.e. in a container context). frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"")Copy frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") frommodalimportcurrent_input_id@stub.function()defprocess_stuff():print(f""Starting to process{current_input_id()}"") from import @stub.function() def process_stuff print f""Starting to process{current_input_id()}"" {current_input_id()} Copy Copy    Copy ",The process_stuff() function prints out a statement indicating the start of processing the current input ID.
0,What does the gather function do in modal.functions?,modalfunctions modalfunctionsgather,"asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall): asyncdefgather(*function_calls: _FunctionCall): asyncdefgather(*function_calls: _FunctionCall): async def gather *function_calls: _FunctionCall Copy Copy    Copy Wait until all Modal function calls have results before returning Accepts a variable number of FunctionCall objects as returned byFunction.spawn(). Function.spawn() Returns a list of results from each function call, or raises an exception
of the first failing function call. E.g. function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) Copy Copy    Copy ",The gather function in modal.functions waits until all Modal function calls have results before returning.
3,What happens when gather function is executed?,modalfunctions modalfunctionsgather,"asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall): asyncdefgather(*function_calls: _FunctionCall): asyncdefgather(*function_calls: _FunctionCall): async def gather *function_calls: _FunctionCall Copy Copy    Copy Wait until all Modal function calls have results before returning Accepts a variable number of FunctionCall objects as returned byFunction.spawn(). Function.spawn() Returns a list of results from each function call, or raises an exception
of the first failing function call. E.g. function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) Copy Copy    Copy ","The gather function returns a list of results from each function call, or raises an exception of the first failing function call."
6,What are the results in this process returned by?,modalfunctions modalfunctionsgather,"asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall):Copy asyncdefgather(*function_calls: _FunctionCall): asyncdefgather(*function_calls: _FunctionCall): asyncdefgather(*function_calls: _FunctionCall): async def gather *function_calls: _FunctionCall Copy Copy    Copy Wait until all Modal function calls have results before returning Accepts a variable number of FunctionCall objects as returned byFunction.spawn(). Function.spawn() Returns a list of results from each function call, or raises an exception
of the first failing function call. E.g. function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2)Copy function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) function_call_1 = slow_func_1.spawn()
function_call_2 = slow_func_2.spawn()

result_1, result_2 = gather(function_call_1, function_call_2) Copy Copy    Copy ",The results in this process are returned by each function call.
0,What is the purpose of the decorator in the given function?,modalfunctions modalfunctionsmethod,"defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: def method _warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None, None # Set this to True if it's a non-generator function returning # a [sync/async] generator object Optional bool None Callable Callable Any Copy Copy    Copy Decorator for methods that should be transformed into a Modal Function registered against this class’s stub. Usage: Usage: @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8) cpu=8 8 class MyCls @modal.method() def f self Copy Copy    Copy ",The decorator transforms normal methods into a Modal Function registered against the class’s stub.
3,"What argument can be given to the function ""defmethod"" besides ""is_generator""?",modalfunctions modalfunctionsmethod,"defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: def method _warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None, None # Set this to True if it's a non-generator function returning # a [sync/async] generator object Optional bool None Callable Callable Any Copy Copy    Copy Decorator for methods that should be transformed into a Modal Function registered against this class’s stub. Usage: Usage: @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8) cpu=8 8 class MyCls @modal.method() def f self Copy Copy    Copy ","One other argument that can be given to the ""defmethod"" function is ""_warn_parentheses_missing""."
6,"What does the method ""def f self"" seem to denote in this context?",modalfunctions modalfunctionsmethod,"defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: defmethod(_warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None,) ->Callable[[Callable[...,Any]], _PartialFunction]: def method _warn_parentheses_missing=None,
    *,# Set this to True if it's a non-generator function returning# a [sync/async] generator objectis_generator:Optional[bool] =None, None # Set this to True if it's a non-generator function returning # a [sync/async] generator object Optional bool None Callable Callable Any Copy Copy    Copy Decorator for methods that should be transformed into a Modal Function registered against this class’s stub. Usage: Usage: @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ...Copy @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8)classMyCls:@modal.method()deff(self):
        ... @stub.cls(cpu=8) cpu=8 8 class MyCls @modal.method() def f self Copy Copy    Copy ","The ""def f self"" seems to represent an instance method ""f"" for the class ""MyCls""."
0,What is the default REST method for the created endpoint in this application?,modalfunctions modalfunctionswebendpoint,"@typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def web_endpoint _warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None str ""GET"" # REST method for the created endpoint. Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Register a basic web endpoint with this application. This is the simple way to create a web endpoint on Modal. The function
behaves as aFastAPIhandler and should
return a response object to the caller. FastAPI Endpoints created with@stub.web_endpointare meant to be simple, single
request handlers and automatically haveCORSenabled.
For more flexibility, use@stub.asgi_app. @stub.web_endpoint CORS @stub.asgi_app To learn how to use Modal with popular web frameworks, see theguide on web endpoints. guide on web endpoints ","The default REST method is ""GET""."
3,What is the functionality of 'modal.run.wait_for_response' argument?,modalfunctions modalfunctionswebendpoint,"@typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def web_endpoint _warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None str ""GET"" # REST method for the created endpoint. Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Register a basic web endpoint with this application. This is the simple way to create a web endpoint on Modal. The function
behaves as aFastAPIhandler and should
return a response object to the caller. FastAPI Endpoints created with@stub.web_endpointare meant to be simple, single
request handlers and automatically haveCORSenabled.
For more flexibility, use@stub.asgi_app. @stub.web_endpoint CORS @stub.asgi_app To learn how to use Modal with popular web frameworks, see theguide on web endpoints. guide on web endpoints ",It determines whether requests should wait for and return the function response. The default value is True.
6,What is the function 'stub.web_endpoint' used for?,modalfunctions modalfunctionswebendpoint,"@typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefweb_endpoint(_warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def web_endpoint _warn_parentheses_missing=None,
    *,
    method:str=""GET"",# REST method for the created endpoint.label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None str ""GET"" # REST method for the created endpoint. Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Register a basic web endpoint with this application. This is the simple way to create a web endpoint on Modal. The function
behaves as aFastAPIhandler and should
return a response object to the caller. FastAPI Endpoints created with@stub.web_endpointare meant to be simple, single
request handlers and automatically haveCORSenabled.
For more flexibility, use@stub.asgi_app. @stub.web_endpoint CORS @stub.asgi_app To learn how to use Modal with popular web frameworks, see theguide on web endpoints. guide on web endpoints ","The 'stub.web_endpoint' function is used for registering a basic web endpoint with the application. It behaves as a FastAPI handler and should return a response object to the caller. It's meant to be a simple, single request handler and automatically has CORS enabled."
0,What is the WSGI app in Modal for?,modalfunctions modalfunctionswsgiapp,"@typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def wsgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
It has beensucceeded by the ASGI interfacewhich is compatible with ASGI and supports
additional functionality such as web sockets. Modal supports ASGI viaasgi_app. succeeded by the ASGI interface asgi_app asgi_app Usage: Usage: fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... from import Callable @stub.function() @modal.wsgi_app() def create_wsgi Callable Copy Copy    Copy To learn how to use this decorator with popular web frameworks, see theguide on web endpoints. guide on web endpoints modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functions modal.functions.Function from_id persist from_name lookup from_parametrized stub info web_url is_generator map for_each starmap remote remote_gen call shell local spawn get_raw_f get_current_stats modal.functions.FunctionCall from_id persist from_name lookup get get_call_graph cancel modal.functions.FunctionStats modal.functions.PartialFunction modal.functions.asgi_app modal.functions.current_input_id modal.functions.gather modal.functions.method modal.functions.web_endpoint modal.functions.wsgi_app CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",WSGI app in Modal is a decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
3,What does the label parameter signify in the wsgi_app function?,modalfunctions modalfunctionswsgiapp,"@typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def wsgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
It has beensucceeded by the ASGI interfacewhich is compatible with ASGI and supports
additional functionality such as web sockets. Modal supports ASGI viaasgi_app. succeeded by the ASGI interface asgi_app asgi_app Usage: Usage: fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... from import Callable @stub.function() @modal.wsgi_app() def create_wsgi Callable Copy Copy    Copy To learn how to use this decorator with popular web frameworks, see theguide on web endpoints. guide on web endpoints modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functions modal.functions.Function from_id persist from_name lookup from_parametrized stub info web_url is_generator map for_each starmap remote remote_gen call shell local spawn get_raw_f get_current_stats modal.functions.FunctionCall from_id persist from_name lookup get get_call_graph cancel modal.functions.FunctionStats modal.functions.PartialFunction modal.functions.asgi_app modal.functions.current_input_id modal.functions.gather modal.functions.method modal.functions.web_endpoint modal.functions.wsgi_app CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The label parameter in the wsgi_app function is for providing a label for the created endpoint. The final subdomain will be in the format of <workspace>--<label>.
6,Who is the owner of Modal Labs?,modalfunctions modalfunctionswsgiapp,"@typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def wsgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
It has beensucceeded by the ASGI interfacewhich is compatible with ASGI and supports
additional functionality such as web sockets. Modal supports ASGI viaasgi_app. succeeded by the ASGI interface asgi_app asgi_app Usage: Usage: fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... from import Callable @stub.function() @modal.wsgi_app() def create_wsgi Callable Copy Copy    Copy To learn how to use this decorator with popular web frameworks, see theguide on web endpoints. guide on web endpoints modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functions modal.functions.Function from_id persist from_name lookup from_parametrized stub info web_url is_generator map for_each starmap remote remote_gen call shell local spawn get_raw_f get_current_stats modal.functions.FunctionCall from_id persist from_name lookup get get_call_graph cancel modal.functions.FunctionStats modal.functions.PartialFunction modal.functions.asgi_app modal.functions.current_input_id modal.functions.gather modal.functions.method modal.functions.web_endpoint modal.functions.wsgi_app CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs is owned by © 2023 Modal Labs, Inc."
0,What is the purpose of the @typecheckeddefwsgi_app decorator function?,modalfunctions modalfunctionswsgiapp,"@typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def wsgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
It has beensucceeded by the ASGI interfacewhich is compatible with ASGI and supports
additional functionality such as web sockets. Modal supports ASGI viaasgi_app. succeeded by the ASGI interface asgi_app asgi_app Usage: Usage: fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... from import Callable @stub.function() @modal.wsgi_app() def create_wsgi Callable Copy Copy    Copy To learn how to use this decorator with popular web frameworks, see theguide on web endpoints. guide on web endpoints modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functions modal.functions.Function from_id persist from_name lookup from_parametrized stub info web_url is_generator map for_each starmap remote remote_gen call shell local spawn get_raw_f get_current_stats modal.functions.FunctionCall from_id persist from_name lookup get get_call_graph cancel modal.functions.FunctionStats modal.functions.PartialFunction modal.functions.asgi_app modal.functions.current_input_id modal.functions.gather modal.functions.method modal.functions.web_endpoint modal.functions.wsgi_app CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It registers a WSGI app with a Modal function.
3,What will be the final subdomain when a created endpoint is labeled?,modalfunctions modalfunctionswsgiapp,"@typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def wsgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
It has beensucceeded by the ASGI interfacewhich is compatible with ASGI and supports
additional functionality such as web sockets. Modal supports ASGI viaasgi_app. succeeded by the ASGI interface asgi_app asgi_app Usage: Usage: fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... from import Callable @stub.function() @modal.wsgi_app() def create_wsgi Callable Copy Copy    Copy To learn how to use this decorator with popular web frameworks, see theguide on web endpoints. guide on web endpoints modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functions modal.functions.Function from_id persist from_name lookup from_parametrized stub info web_url is_generator map for_each starmap remote remote_gen call shell local spawn get_raw_f get_current_stats modal.functions.FunctionCall from_id persist from_name lookup get get_call_graph cancel modal.functions.FunctionStats modal.functions.PartialFunction modal.functions.asgi_app modal.functions.current_input_id modal.functions.gather modal.functions.method modal.functions.web_endpoint modal.functions.wsgi_app CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The final subdomain will be <workspace>--<label>.
6,Where can you learn how to use the decorator with popular web frameworks?,modalfunctions modalfunctionswsgiapp,"@typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]:Copy @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typecheckeddefwsgi_app(_warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name.) ->Callable[[Callable[...,Any]], _PartialFunction]: @typechecked def wsgi_app _warn_parentheses_missing=None,
    *,
    label:Optional[str] =None,# Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run.wait_for_response:bool=True,# Whether requests should wait for and return the function response.custom_domains:Optional[
        Iterable[str]
    ] =None,# Create an endpoint using a custom domain fully-qualified domain name. None Optional str None # Label for created endpoint. Final subdomain will be <workspace>--<label>.modal.run. bool True # Whether requests should wait for and return the function response. Optional str None # Create an endpoint using a custom domain fully-qualified domain name. Callable Callable Any Copy Copy    Copy Decorator for registering a WSGI app with a Modal function. Web Server Gateway Interface (WSGI) is a standard for synchronous Python web apps.
It has beensucceeded by the ASGI interfacewhich is compatible with ASGI and supports
additional functionality such as web sockets. Modal supports ASGI viaasgi_app. succeeded by the ASGI interface asgi_app asgi_app Usage: Usage: fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ...Copy fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... fromtypingimportCallable@stub.function()@modal.wsgi_app()defcreate_wsgi() ->Callable:
    ... from import Callable @stub.function() @modal.wsgi_app() def create_wsgi Callable Copy Copy    Copy To learn how to use this decorator with popular web frameworks, see theguide on web endpoints. guide on web endpoints modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functionsmodal.functions.Functionfrom_idpersistfrom_namelookupfrom_parametrizedstubinfoweb_urlis_generatormapfor_eachstarmapremoteremote_gencallshelllocalspawnget_raw_fget_current_statsmodal.functions.FunctionCallfrom_idpersistfrom_namelookupgetget_call_graphcancelmodal.functions.FunctionStatsmodal.functions.PartialFunctionmodal.functions.asgi_appmodal.functions.current_input_idmodal.functions.gathermodal.functions.methodmodal.functions.web_endpointmodal.functions.wsgi_app modal.functions modal.functions.Function from_id persist from_name lookup from_parametrized stub info web_url is_generator map for_each starmap remote remote_gen call shell local spawn get_raw_f get_current_stats modal.functions.FunctionCall from_id persist from_name lookup get get_call_graph cancel modal.functions.FunctionStats modal.functions.PartialFunction modal.functions.asgi_app modal.functions.current_input_id modal.functions.gather modal.functions.method modal.functions.web_endpoint modal.functions.wsgi_app CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",You can learn how to use the decorator with popular web frameworks in the guide on web endpoints.
0,What is the cold-start time for containers in Modal?,Cold start performance,"For adeployed functionor aweb endpoint, Modal will spin up as many containers
as needed to handle the current number of concurrent requests. Starting up
containers incurs a cold-start time of ~1s. Any logic in global scope (such as
imports) and the container__enter__functionwill be executed next.
In the case of loading large models from the image, this can take a few seconds
depending on the size of the model, because the file will be copied over the
network to the worker running your job. deployed function web endpoint __enter__function __enter__ After the cold-start, subsequent requests to the same container will see lower
response latency (~50-200ms), until the container is shut down after aperiod of inactivity. Modal
currently exposes two parameters to control how many cold starts users
experience:container_idle_timeoutandkeep_warm. period of inactivity container_idle_timeout keep_warm ",The cold-start time for containers in Modal is approximately 1 second.
3,What happens after loading large models from the image in Modal?,Cold start performance,"For adeployed functionor aweb endpoint, Modal will spin up as many containers
as needed to handle the current number of concurrent requests. Starting up
containers incurs a cold-start time of ~1s. Any logic in global scope (such as
imports) and the container__enter__functionwill be executed next.
In the case of loading large models from the image, this can take a few seconds
depending on the size of the model, because the file will be copied over the
network to the worker running your job. deployed function web endpoint __enter__function __enter__ After the cold-start, subsequent requests to the same container will see lower
response latency (~50-200ms), until the container is shut down after aperiod of inactivity. Modal
currently exposes two parameters to control how many cold starts users
experience:container_idle_timeoutandkeep_warm. period of inactivity container_idle_timeout keep_warm ","After loading large models from the image, it can take a few seconds for the file to be copied over the network to the worker running the job."
6,What parameters does Modal expose to control the frequency of cold starts?,Cold start performance,"For adeployed functionor aweb endpoint, Modal will spin up as many containers
as needed to handle the current number of concurrent requests. Starting up
containers incurs a cold-start time of ~1s. Any logic in global scope (such as
imports) and the container__enter__functionwill be executed next.
In the case of loading large models from the image, this can take a few seconds
depending on the size of the model, because the file will be copied over the
network to the worker running your job. deployed function web endpoint __enter__function __enter__ After the cold-start, subsequent requests to the same container will see lower
response latency (~50-200ms), until the container is shut down after aperiod of inactivity. Modal
currently exposes two parameters to control how many cold starts users
experience:container_idle_timeoutandkeep_warm. period of inactivity container_idle_timeout keep_warm ",Modal exposes two parameters to control how many cold starts users experience: container_idle_timeout and keep_warm.
0,What is the purpose of keep_warm in the context of this content?,Cold start performance Warm pool,"If you want to have some containers running at all times to mitigate the
cold-start penalty, you could set thekeep_warmvalue on the@functiondecorator. This configures a
given minimum number of containers that will always be up for your function, but
Modal will still scale up (and spin down) more containers if the demand for your
function exceeds thekeep_warmvalue, as usual. keep_warm @function @function keep_warm frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} from import @stub.function(keep_warm=3) keep_warm=3 3 @web_endpoint() def my_warm_f return ""hello"" ""world"" Copy Copy    Copy Functions with slow start-up andkeep_warm keep_warm The guarantee thatkeep_warmprovides is that there are always at leastncontainers up that have finished starting up. If your function does expensive /
slow initialization the first time it receives an input (e.g. if you use a
pre-trained model, and this model needs to be loaded into memory the first time
you use it), you’d observe that those function calls will still be slow. keep_warm n To avoid this, you can use acontainer enter methodto perform the expensive initialization. This will ensure that the
initialization is performed before the container is deemed ready for the warm
pool. container enter method Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performance Container idle timeout Warm pool Functions with slow start-up and keep_warm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The keep_warm value helps mitigate the cold-start penalty by ensuring a certain minimum number of containers are always active for a function.
3,"In the programming code given, what is the keep_warm value set to?",Cold start performance Warm pool,"If you want to have some containers running at all times to mitigate the
cold-start penalty, you could set thekeep_warmvalue on the@functiondecorator. This configures a
given minimum number of containers that will always be up for your function, but
Modal will still scale up (and spin down) more containers if the demand for your
function exceeds thekeep_warmvalue, as usual. keep_warm @function @function keep_warm frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} from import @stub.function(keep_warm=3) keep_warm=3 3 @web_endpoint() def my_warm_f return ""hello"" ""world"" Copy Copy    Copy Functions with slow start-up andkeep_warm keep_warm The guarantee thatkeep_warmprovides is that there are always at leastncontainers up that have finished starting up. If your function does expensive /
slow initialization the first time it receives an input (e.g. if you use a
pre-trained model, and this model needs to be loaded into memory the first time
you use it), you’d observe that those function calls will still be slow. keep_warm n To avoid this, you can use acontainer enter methodto perform the expensive initialization. This will ensure that the
initialization is performed before the container is deemed ready for the warm
pool. container enter method Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performance Container idle timeout Warm pool Functions with slow start-up and keep_warm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The keep_warm value is set to 3 in the given code.
6,What method can be used to perform expensive initialization and ensure it is done before the container is ready for the warm pool?,Cold start performance Warm pool,"If you want to have some containers running at all times to mitigate the
cold-start penalty, you could set thekeep_warmvalue on the@functiondecorator. This configures a
given minimum number of containers that will always be up for your function, but
Modal will still scale up (and spin down) more containers if the demand for your
function exceeds thekeep_warmvalue, as usual. keep_warm @function @function keep_warm frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} from import @stub.function(keep_warm=3) keep_warm=3 3 @web_endpoint() def my_warm_f return ""hello"" ""world"" Copy Copy    Copy Functions with slow start-up andkeep_warm keep_warm The guarantee thatkeep_warmprovides is that there are always at leastncontainers up that have finished starting up. If your function does expensive /
slow initialization the first time it receives an input (e.g. if you use a
pre-trained model, and this model needs to be loaded into memory the first time
you use it), you’d observe that those function calls will still be slow. keep_warm n To avoid this, you can use acontainer enter methodto perform the expensive initialization. This will ensure that the
initialization is performed before the container is deemed ready for the warm
pool. container enter method Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performance Container idle timeout Warm pool Functions with slow start-up and keep_warm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","To perform expensive initialization, you can use a container enter method. This ensures that the initialization happens before the container is ready for the warm pool."
0,What is the purpose of the 'keep_warm' value in the function decorator? ,Cold start performance Warm pool,"If you want to have some containers running at all times to mitigate the
cold-start penalty, you could set thekeep_warmvalue on the@functiondecorator. This configures a
given minimum number of containers that will always be up for your function, but
Modal will still scale up (and spin down) more containers if the demand for your
function exceeds thekeep_warmvalue, as usual. keep_warm @function @function keep_warm frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} from import @stub.function(keep_warm=3) keep_warm=3 3 @web_endpoint() def my_warm_f return ""hello"" ""world"" Copy Copy    Copy Functions with slow start-up andkeep_warm keep_warm The guarantee thatkeep_warmprovides is that there are always at leastncontainers up that have finished starting up. If your function does expensive /
slow initialization the first time it receives an input (e.g. if you use a
pre-trained model, and this model needs to be loaded into memory the first time
you use it), you’d observe that those function calls will still be slow. keep_warm n To avoid this, you can use acontainer enter methodto perform the expensive initialization. This will ensure that the
initialization is performed before the container is deemed ready for the warm
pool. container enter method Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performance Container idle timeout Warm pool Functions with slow start-up and keep_warm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'keep_warm' value is used to set a given minimum number of containers that will always be up for a specific function.
3,What does the 'keep_warm' guarantee regarding the containers?,Cold start performance Warm pool,"If you want to have some containers running at all times to mitigate the
cold-start penalty, you could set thekeep_warmvalue on the@functiondecorator. This configures a
given minimum number of containers that will always be up for your function, but
Modal will still scale up (and spin down) more containers if the demand for your
function exceeds thekeep_warmvalue, as usual. keep_warm @function @function keep_warm frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} from import @stub.function(keep_warm=3) keep_warm=3 3 @web_endpoint() def my_warm_f return ""hello"" ""world"" Copy Copy    Copy Functions with slow start-up andkeep_warm keep_warm The guarantee thatkeep_warmprovides is that there are always at leastncontainers up that have finished starting up. If your function does expensive /
slow initialization the first time it receives an input (e.g. if you use a
pre-trained model, and this model needs to be loaded into memory the first time
you use it), you’d observe that those function calls will still be slow. keep_warm n To avoid this, you can use acontainer enter methodto perform the expensive initialization. This will ensure that the
initialization is performed before the container is deemed ready for the warm
pool. container enter method Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performance Container idle timeout Warm pool Functions with slow start-up and keep_warm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'keep_warm' provides a guarantee that there are always at least 'n' containers up that have finished starting up.
6,What is the function of 'stub' in the given code?,Cold start performance Warm pool,"If you want to have some containers running at all times to mitigate the
cold-start penalty, you could set thekeep_warmvalue on the@functiondecorator. This configures a
given minimum number of containers that will always be up for your function, but
Modal will still scale up (and spin down) more containers if the demand for your
function exceeds thekeep_warmvalue, as usual. keep_warm @function @function keep_warm frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""}Copy frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} frommodalimportStub, web_endpoint

stub = Stub()@stub.function(keep_warm=3)@web_endpoint()defmy_warm_f():return{""hello"":""world""} from import @stub.function(keep_warm=3) keep_warm=3 3 @web_endpoint() def my_warm_f return ""hello"" ""world"" Copy Copy    Copy Functions with slow start-up andkeep_warm keep_warm The guarantee thatkeep_warmprovides is that there are always at leastncontainers up that have finished starting up. If your function does expensive /
slow initialization the first time it receives an input (e.g. if you use a
pre-trained model, and this model needs to be loaded into memory the first time
you use it), you’d observe that those function calls will still be slow. keep_warm n To avoid this, you can use acontainer enter methodto perform the expensive initialization. This will ensure that the
initialization is performed before the container is deemed ready for the warm
pool. container enter method Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performanceContainer idle timeoutWarm poolFunctions with slow start-up and keep_warm Cold start performance Container idle timeout Warm pool Functions with slow start-up and keep_warm CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","'Stub' serves as a placeholder in the code, typically for a procedure or a module, which is in the process of being developed or integrated."
0,What is the purpose of this guide?,Concurrent inputs on a single container beta,"This guide explores why and how to configure containers to process multiple
inputs simultaneously. ",The purpose of this guide is to explore why and how to configure containers to process multiple inputs simultaneously.
3,What is being processed simultaneously according to the content?,Concurrent inputs on a single container beta,"This guide explores why and how to configure containers to process multiple
inputs simultaneously. ",Multiple inputs are being processed simultaneously according to the content.
6,What is the processing capability of these containers according to the content?,Concurrent inputs on a single container beta,"This guide explores why and how to configure containers to process multiple
inputs simultaneously. ","According to the content, these containers are capable of processing multiple inputs simultaneously."
0,What situations are ideal for running multiple inputs concurrently on a single container?,Concurrent inputs on a single container beta When to use concurrent inputs,"There are, however, a few cases where it is ideal to run multiple inputs on each
containerconcurrently. concurrently                                     One use case is hostingweb applicationswhere
the endpoints are not CPU-bound - for example, making an asynchronous request to
a deployed Modal function or querying a database. Only a handful of containers
can handle hundreds of simultaneous requests for such applications if we allow
concurrent inputs. web applications Another use case is to support continuous batching on GPU-accelerated
containers. Frameworks such asvLLMallow us to
push higher token throughputs by maximizing compute in each forward pass. In
LLMs, this means each GPU step can generate tokens for multiple user queries; in
diffusion models, we can denoise multiple images concurrently. In order to take
full advantage of this, containers need to be processing multiple inputs
concurrently. vLLM ","There are a few cases, such as hosting web applications where the endpoints are not CPU-bound or supporting continuous batching on GPU-accelerated containers."
3,What benefits can be derived from processing multiple inputs concurrently for applications like web hosting?,Concurrent inputs on a single container beta When to use concurrent inputs,"There are, however, a few cases where it is ideal to run multiple inputs on each
containerconcurrently. concurrently                                     One use case is hostingweb applicationswhere
the endpoints are not CPU-bound - for example, making an asynchronous request to
a deployed Modal function or querying a database. Only a handful of containers
can handle hundreds of simultaneous requests for such applications if we allow
concurrent inputs. web applications Another use case is to support continuous batching on GPU-accelerated
containers. Frameworks such asvLLMallow us to
push higher token throughputs by maximizing compute in each forward pass. In
LLMs, this means each GPU step can generate tokens for multiple user queries; in
diffusion models, we can denoise multiple images concurrently. In order to take
full advantage of this, containers need to be processing multiple inputs
concurrently. vLLM ",Only a handful of containers can handle hundreds of simultaneous requests for such applications if we allow concurrent inputs.
6,"In GPU-accelerated containers, how does concurrent processing aid frameworks like vLLM?",Concurrent inputs on a single container beta When to use concurrent inputs,"There are, however, a few cases where it is ideal to run multiple inputs on each
containerconcurrently. concurrently                                     One use case is hostingweb applicationswhere
the endpoints are not CPU-bound - for example, making an asynchronous request to
a deployed Modal function or querying a database. Only a handful of containers
can handle hundreds of simultaneous requests for such applications if we allow
concurrent inputs. web applications Another use case is to support continuous batching on GPU-accelerated
containers. Frameworks such asvLLMallow us to
push higher token throughputs by maximizing compute in each forward pass. In
LLMs, this means each GPU step can generate tokens for multiple user queries; in
diffusion models, we can denoise multiple images concurrently. In order to take
full advantage of this, containers need to be processing multiple inputs
concurrently. vLLM ","In vLLMs, this means each GPU step can generate tokens for multiple user queries; in diffusion models, we can denoise multiple images concurrently."
0,What is the function of 'allow_concurrent_inputs'?,Concurrent inputs on a single container beta Configuring concurrent inputs,"To configure functions to allow each container to processninputs
concurrently, we setallow_concurrent_inputs=non the function decorator. n allow_concurrent_inputs=n If the function is synchronous, the Modal container will execute concurrent
inputs on separate threads.As such, one must take care that function
implementation itself is thread-safe. As such, one must take care that function
implementation itself is thread-safe Similarly, if the function is asynchronous, the Modal container will execute the
concurrent inputs on separateasynciotasks. asyncio # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 def sleep_sync # Function must be thread-safe 1 # Each container executes up to 10 inputs in separate async tasks @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 async def sleep_async await 1 Copy Copy    Copy Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputs Concurrent inputs on a single container (beta) Default parallelism When to use concurrent inputs Configuring concurrent inputs See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in action Single GPU serving concurrent requests Single GPU serving concurrent requests Single GPU serving concurrent requests     Responsive web app on one low-cost container Responsive web app on one low-cost container Responsive web app on one low-cost container     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'allow_concurrent_inputs' is configured to allow each container to process inputs concurrently.
3,How can a number of concurrent inputs be set for a function?,Concurrent inputs on a single container beta Configuring concurrent inputs,"To configure functions to allow each container to processninputs
concurrently, we setallow_concurrent_inputs=non the function decorator. n allow_concurrent_inputs=n If the function is synchronous, the Modal container will execute concurrent
inputs on separate threads.As such, one must take care that function
implementation itself is thread-safe. As such, one must take care that function
implementation itself is thread-safe Similarly, if the function is asynchronous, the Modal container will execute the
concurrent inputs on separateasynciotasks. asyncio # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 def sleep_sync # Function must be thread-safe 1 # Each container executes up to 10 inputs in separate async tasks @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 async def sleep_async await 1 Copy Copy    Copy Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputs Concurrent inputs on a single container (beta) Default parallelism When to use concurrent inputs Configuring concurrent inputs See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in action Single GPU serving concurrent requests Single GPU serving concurrent requests Single GPU serving concurrent requests     Responsive web app on one low-cost container Responsive web app on one low-cost container Responsive web app on one low-cost container     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Concurrent inputs for a function can be set by specifying the number in 'allow_concurrent_inputs', for example, 'allow_concurrent_inputs=10' allows for up to 10 concurrent inputs."
6,What example is given of an asynchronous function?,Concurrent inputs on a single container beta Configuring concurrent inputs,"To configure functions to allow each container to processninputs
concurrently, we setallow_concurrent_inputs=non the function decorator. n allow_concurrent_inputs=n If the function is synchronous, the Modal container will execute concurrent
inputs on separate threads.As such, one must take care that function
implementation itself is thread-safe. As such, one must take care that function
implementation itself is thread-safe Similarly, if the function is asynchronous, the Modal container will execute the
concurrent inputs on separateasynciotasks. asyncio # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 def sleep_sync # Function must be thread-safe 1 # Each container executes up to 10 inputs in separate async tasks @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 async def sleep_async await 1 Copy Copy    Copy Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputs Concurrent inputs on a single container (beta) Default parallelism When to use concurrent inputs Configuring concurrent inputs See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in action Single GPU serving concurrent requests Single GPU serving concurrent requests Single GPU serving concurrent requests     Responsive web app on one low-cost container Responsive web app on one low-cost container Responsive web app on one low-cost container     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The example given of an asynchronous function is 'sleep_async', which executes up to 10 inputs in separate asyncio tasks."
0,What does allow_concurrent_inputs=n do in a function decorator?,Concurrent inputs on a single container beta Configuring concurrent inputs,"To configure functions to allow each container to processninputs
concurrently, we setallow_concurrent_inputs=non the function decorator. n allow_concurrent_inputs=n If the function is synchronous, the Modal container will execute concurrent
inputs on separate threads.As such, one must take care that function
implementation itself is thread-safe. As such, one must take care that function
implementation itself is thread-safe Similarly, if the function is asynchronous, the Modal container will execute the
concurrent inputs on separateasynciotasks. asyncio # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 def sleep_sync # Function must be thread-safe 1 # Each container executes up to 10 inputs in separate async tasks @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 async def sleep_async await 1 Copy Copy    Copy Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputs Concurrent inputs on a single container (beta) Default parallelism When to use concurrent inputs Configuring concurrent inputs See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in action Single GPU serving concurrent requests Single GPU serving concurrent requests Single GPU serving concurrent requests     Responsive web app on one low-cost container Responsive web app on one low-cost container Responsive web app on one low-cost container     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",It configures functions to allow each container to process n inputs concurrently.
3,What requirements must be met when implementing functions to work with concurrent inputs?,Concurrent inputs on a single container beta Configuring concurrent inputs,"To configure functions to allow each container to processninputs
concurrently, we setallow_concurrent_inputs=non the function decorator. n allow_concurrent_inputs=n If the function is synchronous, the Modal container will execute concurrent
inputs on separate threads.As such, one must take care that function
implementation itself is thread-safe. As such, one must take care that function
implementation itself is thread-safe Similarly, if the function is asynchronous, the Modal container will execute the
concurrent inputs on separateasynciotasks. asyncio # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 def sleep_sync # Function must be thread-safe 1 # Each container executes up to 10 inputs in separate async tasks @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 async def sleep_async await 1 Copy Copy    Copy Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputs Concurrent inputs on a single container (beta) Default parallelism When to use concurrent inputs Configuring concurrent inputs See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in action Single GPU serving concurrent requests Single GPU serving concurrent requests Single GPU serving concurrent requests     Responsive web app on one low-cost container Responsive web app on one low-cost container Responsive web app on one low-cost container     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Function implementation must be thread-safe when working with concurrent inputs.
6,How many inputs can each container execute in the given examples?,Concurrent inputs on a single container beta Configuring concurrent inputs,"To configure functions to allow each container to processninputs
concurrently, we setallow_concurrent_inputs=non the function decorator. n allow_concurrent_inputs=n If the function is synchronous, the Modal container will execute concurrent
inputs on separate threads.As such, one must take care that function
implementation itself is thread-safe. As such, one must take care that function
implementation itself is thread-safe Similarly, if the function is asynchronous, the Modal container will execute the
concurrent inputs on separateasynciotasks. asyncio # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1)Copy # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads@stub.function(allow_concurrent_inputs=10)defsleep_sync():# Function must be thread-safetime.sleep(1)# Each container executes up to 10 inputs in separate async tasks@stub.function(allow_concurrent_inputs=10)asyncdefsleep_async():awaitasyncio.sleep(1) # Each container executes up to 10 inputs in separate threads @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 def sleep_sync # Function must be thread-safe 1 # Each container executes up to 10 inputs in separate async tasks @stub.function(allow_concurrent_inputs=10) allow_concurrent_inputs=10 10 async def sleep_async await 1 Copy Copy    Copy Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputsSee it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container Concurrent inputs on a single container (beta)Default parallelismWhen to use concurrent inputsConfiguring concurrent inputs Concurrent inputs on a single container (beta) Default parallelism When to use concurrent inputs Configuring concurrent inputs See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in actionSingle GPU serving concurrent requestsResponsive web app on one low-cost container See it in action Single GPU serving concurrent requests Single GPU serving concurrent requests Single GPU serving concurrent requests     Responsive web app on one low-cost container Responsive web app on one low-cost container Responsive web app on one low-cost container     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In the given examples, each container can execute up to 10 inputs, either on separate threads or in separate async tasks."
0,What should the completion time ideally be for web endpoint requests?,Request timeouts,"Web endpoint (a.k.a. webhook) requests should complete quickly, ideally within a
few seconds. All web endpoint function types
(web_endpoint,asgi_app,wsgi_app)
have a maximum HTTP request timeout of 150 seconds enforced. However, the
underlying Modal function can have a longertimeout. web_endpoint,asgi_app,wsgi_app web_endpoint asgi_app wsgi_app timeout In case the function takes more than 150 seconds to complete, a HTTP status 303
redirect response is returned pointing at the original URL with a special query
parameter linking it that request. This is theresult URLfor your function.
Most web browsers allow for up to 20 such redirects, effectively allowing up to
50 minutes (20 * 150 s) for web endpoints before the request times out. result URL Some libraries and tools might require you to add a flag or option in order to
follow redirects automatically, e.g.curl -L ...orhttp --follow .... curl -L ... http --follow ... Theresult URLcan be reloaded without triggering a new request. It will block
until the request completes. result URL ",Web endpoint requests should ideally complete within a few seconds.
3,What happens if a function takes more than 150 seconds to complete?,Request timeouts,"Web endpoint (a.k.a. webhook) requests should complete quickly, ideally within a
few seconds. All web endpoint function types
(web_endpoint,asgi_app,wsgi_app)
have a maximum HTTP request timeout of 150 seconds enforced. However, the
underlying Modal function can have a longertimeout. web_endpoint,asgi_app,wsgi_app web_endpoint asgi_app wsgi_app timeout In case the function takes more than 150 seconds to complete, a HTTP status 303
redirect response is returned pointing at the original URL with a special query
parameter linking it that request. This is theresult URLfor your function.
Most web browsers allow for up to 20 such redirects, effectively allowing up to
50 minutes (20 * 150 s) for web endpoints before the request times out. result URL Some libraries and tools might require you to add a flag or option in order to
follow redirects automatically, e.g.curl -L ...orhttp --follow .... curl -L ... http --follow ... Theresult URLcan be reloaded without triggering a new request. It will block
until the request completes. result URL ","If a function takes more than 150 seconds to complete, a HTTP status 303 redirect response is returned pointing at the original URL with a special query parameter linking it that request. This is known as the result URL for the function."
6,"What happens when the ""result URL"" is reloaded?",Request timeouts,"Web endpoint (a.k.a. webhook) requests should complete quickly, ideally within a
few seconds. All web endpoint function types
(web_endpoint,asgi_app,wsgi_app)
have a maximum HTTP request timeout of 150 seconds enforced. However, the
underlying Modal function can have a longertimeout. web_endpoint,asgi_app,wsgi_app web_endpoint asgi_app wsgi_app timeout In case the function takes more than 150 seconds to complete, a HTTP status 303
redirect response is returned pointing at the original URL with a special query
parameter linking it that request. This is theresult URLfor your function.
Most web browsers allow for up to 20 such redirects, effectively allowing up to
50 minutes (20 * 150 s) for web endpoints before the request times out. result URL Some libraries and tools might require you to add a flag or option in order to
follow redirects automatically, e.g.curl -L ...orhttp --follow .... curl -L ... http --follow ... Theresult URLcan be reloaded without triggering a new request. It will block
until the request completes. result URL ","When the ""result URL"" is reloaded, it won't trigger a new request. Instead, it will block until the original request completes."
0,What can be a solution to long running HTTP request?,Request timeouts Polling solutions,"Sometimes it can be useful to be able to poll for results rather than wait for a
long running HTTP request. The easiest way to do this is to have your web
endpoint spawn amodal.Functioncall and return the function call id that
another endpoint can use to poll the submitted function’s status. Here is an
example: modal.Function importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) import from import from import @stub.function() @asgi_app() def fastapi_app return @stub.function() def slow_operation @web_app.post(""/accept"") ""/accept"" ""/accept"" async def accept_job request: fastapi.Request return ""call_id"" @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str try return 0 except 202 return Copy Copy    Copy Document OCR Web Appis an example that uses
this pattern. Document OCR Web App Document OCR Web App Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeouts wait_for_response=False Polling solutions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Polling for results can be a solution for long running HTTP requests.
3,How is the result of a function call obtained?,Request timeouts Polling solutions,"Sometimes it can be useful to be able to poll for results rather than wait for a
long running HTTP request. The easiest way to do this is to have your web
endpoint spawn amodal.Functioncall and return the function call id that
another endpoint can use to poll the submitted function’s status. Here is an
example: modal.Function importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) import from import from import @stub.function() @asgi_app() def fastapi_app return @stub.function() def slow_operation @web_app.post(""/accept"") ""/accept"" ""/accept"" async def accept_job request: fastapi.Request return ""call_id"" @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str try return 0 except 202 return Copy Copy    Copy Document OCR Web Appis an example that uses
this pattern. Document OCR Web App Document OCR Web App Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeouts wait_for_response=False Polling solutions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The result of a function call can be obtained using FunctionCall.from_id(call_id) method.
6,What is the purpose of setting wait_for_response to False in polling solutions?,Request timeouts Polling solutions,"Sometimes it can be useful to be able to poll for results rather than wait for a
long running HTTP request. The easiest way to do this is to have your web
endpoint spawn amodal.Functioncall and return the function call id that
another endpoint can use to poll the submitted function’s status. Here is an
example: modal.Function importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) import from import from import @stub.function() @asgi_app() def fastapi_app return @stub.function() def slow_operation @web_app.post(""/accept"") ""/accept"" ""/accept"" async def accept_job request: fastapi.Request return ""call_id"" @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str try return 0 except 202 return Copy Copy    Copy Document OCR Web Appis an example that uses
this pattern. Document OCR Web App Document OCR Web App Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeouts wait_for_response=False Polling solutions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Setting wait_for_response to False in polling solutions ensures that the request does not hang while waiting for a response that might take a long time.
0,What is a polling solution in HTTP requests?,Request timeouts Polling solutions,"Sometimes it can be useful to be able to poll for results rather than wait for a
long running HTTP request. The easiest way to do this is to have your web
endpoint spawn amodal.Functioncall and return the function call id that
another endpoint can use to poll the submitted function’s status. Here is an
example: modal.Function importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) import from import from import @stub.function() @asgi_app() def fastapi_app return @stub.function() def slow_operation @web_app.post(""/accept"") ""/accept"" ""/accept"" async def accept_job request: fastapi.Request return ""call_id"" @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str try return 0 except 202 return Copy Copy    Copy Document OCR Web Appis an example that uses
this pattern. Document OCR Web App Document OCR Web App Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeouts wait_for_response=False Polling solutions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",A polling solution in HTTP requests is a technique where results are polled rather than waiting for a long-running HTTP request. This can be achieved by having your web endpoint spawn a function call and return the function call id that another endpoint can use to poll the function's status.
3,What does the poll_results function in the given content do?,Request timeouts Polling solutions,"Sometimes it can be useful to be able to poll for results rather than wait for a
long running HTTP request. The easiest way to do this is to have your web
endpoint spawn amodal.Functioncall and return the function call id that
another endpoint can use to poll the submitted function’s status. Here is an
example: modal.Function importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) import from import from import @stub.function() @asgi_app() def fastapi_app return @stub.function() def slow_operation @web_app.post(""/accept"") ""/accept"" ""/accept"" async def accept_job request: fastapi.Request return ""call_id"" @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str try return 0 except 202 return Copy Copy    Copy Document OCR Web Appis an example that uses
this pattern. Document OCR Web App Document OCR Web App Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeouts wait_for_response=False Polling solutions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The poll_results function in the content retrieves a FunctionCall object using a provided call_id and tries to get the result of the function call. If the function is not completed (TimeoutError is raised), it returns a JSONResponse with an HTTP accepted status code."
6,Who are the rightful owners of the content?,Request timeouts Polling solutions,"Sometimes it can be useful to be able to poll for results rather than wait for a
long running HTTP request. The easiest way to do this is to have your web
endpoint spawn amodal.Functioncall and return the function call id that
another endpoint can use to poll the submitted function’s status. Here is an
example: modal.Function importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code)Copy importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) importfastapifrommodalimportStub, asgi_appfrommodal.functionsimportFunctionCall


stub = Stub()

web_app = fastapi.FastAPI()@stub.function()@asgi_app()deffastapi_app():returnweb_app@stub.function()defslow_operation():
    ...@web_app.post(""/accept"")asyncdefaccept_job(request: fastapi.Request):
    call = slow_operation.spawn()return{""call_id"": call.object_id}@web_app.get(""/result/{call_id}"")asyncdefpoll_results(call_id:str):
    function_call = FunctionCall.from_id(call_id)try:returnfunction_call.get(timeout=0)exceptTimeoutError:
        http_accepted_code =202returnfastapi.responses.JSONResponse({}, status_code=http_accepted_code) import from import from import @stub.function() @asgi_app() def fastapi_app return @stub.function() def slow_operation @web_app.post(""/accept"") ""/accept"" ""/accept"" async def accept_job request: fastapi.Request return ""call_id"" @web_app.get(""/result/{call_id}"") ""/result/{call_id}"" ""/result/{call_id}"" async def poll_results call_id:str str try return 0 except 202 return Copy Copy    Copy Document OCR Web Appis an example that uses
this pattern. Document OCR Web App Document OCR Web App Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeoutswait_for_response=FalsePolling solutions Request timeouts wait_for_response=False Polling solutions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The content is owned by Modal Labs, Inc."
0,What does the classInputStatus(enum.IntEnum) represent?,modalcallgraph modalcallgraphInputStatus,"classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) class InputStatus Copy Copy    Copy Enum representing status of a function input. The possible values are: PENDINGSUCCESSFAILURETERMINATEDTIMEOUT PENDING PENDING SUCCESS SUCCESS FAILURE FAILURE TERMINATED TERMINATED TIMEOUT TIMEOUT modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graph modal.call_graph.InputInfo modal.call_graph.InputStatus CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",This class represents the status of a function input.
3,What is the base URL used in the __sveltekit_qfhbjo?,modalcallgraph modalcallgraphInputStatus,"classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) class InputStatus Copy Copy    Copy Enum representing status of a function input. The possible values are: PENDINGSUCCESSFAILURETERMINATEDTIMEOUT PENDING PENDING SUCCESS SUCCESS FAILURE FAILURE TERMINATED TERMINATED TIMEOUT TIMEOUT modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graph modal.call_graph.InputInfo modal.call_graph.InputStatus CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The base URL used is ""../.."", which would be related to the location in a real-world use case."
6,Who is the owner of the Copyright mentioned?,modalcallgraph modalcallgraphInputStatus,"classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) class InputStatus Copy Copy    Copy Enum representing status of a function input. The possible values are: PENDINGSUCCESSFAILURETERMINATEDTIMEOUT PENDING PENDING SUCCESS SUCCESS FAILURE FAILURE TERMINATED TERMINATED TIMEOUT TIMEOUT modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graph modal.call_graph.InputInfo modal.call_graph.InputStatus CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright is owned by Modal Labs, Inc."
0,What status does a function input represent in Modal's call graph?,modalcallgraph modalcallgraphInputStatus,"classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) class InputStatus Copy Copy    Copy Enum representing status of a function input. The possible values are: PENDINGSUCCESSFAILURETERMINATEDTIMEOUT PENDING PENDING SUCCESS SUCCESS FAILURE FAILURE TERMINATED TERMINATED TIMEOUT TIMEOUT modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graph modal.call_graph.InputInfo modal.call_graph.InputStatus CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The function input status in Modal's call graph represents whether the function is pending, successful, failed, terminated or has timed out."
3,"In the script included in the content, what happens when the Promise is fulfilled?",modalcallgraph modalcallgraphInputStatus,"classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) class InputStatus Copy Copy    Copy Enum representing status of a function input. The possible values are: PENDINGSUCCESSFAILURETERMINATEDTIMEOUT PENDING PENDING SUCCESS SUCCESS FAILURE FAILURE TERMINATED TERMINATED TIMEOUT TIMEOUT modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graph modal.call_graph.InputInfo modal.call_graph.InputStatus CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","When the Promise is fulfilled, the Kit starts the app, loading it onto the element with certain configurations."
6,Who is the legal owner of the copyright as per the text?,modalcallgraph modalcallgraphInputStatus,"classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum)Copy classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) classInputStatus(enum.IntEnum) class InputStatus Copy Copy    Copy Enum representing status of a function input. The possible values are: PENDINGSUCCESSFAILURETERMINATEDTIMEOUT PENDING PENDING SUCCESS SUCCESS FAILURE FAILURE TERMINATED TERMINATED TIMEOUT TIMEOUT modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graphmodal.call_graph.InputInfomodal.call_graph.InputStatus modal.call_graph modal.call_graph.InputInfo modal.call_graph.InputStatus CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright is legally owned by Modal Labs, Inc. set to expire in 2023."
0,What are two key objects provided by Modal for enabling seamless interactivity and data transfer?,Dicts and queues,"Modal provides a variety of distributed objects to enable seamless interactivity
and data transfer across different components of a distributed system. Two key
objects are dicts and queues, both of which serve specific roles in facilitating
communication and data management in your applications. ",Dicts and queues
3,Can dicts and queues be used across different components of a distributed system?,Dicts and queues,"Modal provides a variety of distributed objects to enable seamless interactivity
and data transfer across different components of a distributed system. Two key
objects are dicts and queues, both of which serve specific roles in facilitating
communication and data management in your applications. ","Yes, they can be used across different components of a distributed system."
6,"In the context of Modal, what components are involved in data management and communication?",Dicts and queues,"Modal provides a variety of distributed objects to enable seamless interactivity
and data transfer across different components of a distributed system. Two key
objects are dicts and queues, both of which serve specific roles in facilitating
communication and data management in your applications. ",Dicts and queues.
0,What is a Queue in Modal?,Dicts and queues Modal Queues,"AQueuein Modal is a distributed queue-like
object. It allows you to add and retrieve items in a first-in-first-out (FIFO)
manner. Queues are particularly useful when you want to handle tasks or process
data asynchronously, or when you need to pass messages between different
components of your distributed system. Queue importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value import @stub.local_entrypoint() def main ""some object"" # adding a value # retrieving a value Copy Copy    Copy Similar to Dicts, Queues are also persisted and support values of any type. ",A Queue in Modal is a distributed queue-like object that allows you to add and retrieve items in a first-in-first-out (FIFO) manner.
3,What is a common use of Queues in Modal? ,Dicts and queues Modal Queues,"AQueuein Modal is a distributed queue-like
object. It allows you to add and retrieve items in a first-in-first-out (FIFO)
manner. Queues are particularly useful when you want to handle tasks or process
data asynchronously, or when you need to pass messages between different
components of your distributed system. Queue importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value import @stub.local_entrypoint() def main ""some object"" # adding a value # retrieving a value Copy Copy    Copy Similar to Dicts, Queues are also persisted and support values of any type. ","Queues are particularly useful when you want to handle tasks or process data asynchronously, or when you need to pass messages between different components of your distributed system."
5,"By using the put method, one can add a value to a Queue in Modal. The step involves following a code pattern such as: ",Dicts and queues Modal Queues,"AQueuein Modal is a distributed queue-like
object. It allows you to add and retrieve items in a first-in-first-out (FIFO)
manner. Queues are particularly useful when you want to handle tasks or process
data asynchronously, or when you need to pass messages between different
components of your distributed system. Queue importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value import @stub.local_entrypoint() def main ""some object"" # adding a value # retrieving a value Copy Copy    Copy Similar to Dicts, Queues are also persisted and support values of any type. ","stub.my_queue.put(""some object"")."
7,"By using the get method, one can retrieve a value from a Queue in Modal. This process involves following a code pattern such as: ",Dicts and queues Modal Queues,"AQueuein Modal is a distributed queue-like
object. It allows you to add and retrieve items in a first-in-first-out (FIFO)
manner. Queues are particularly useful when you want to handle tasks or process
data asynchronously, or when you need to pass messages between different
components of your distributed system. Queue importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a valueCopy importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value importmodal

stub = modal.Stub()
stub.my_queue = modal.Queue.new()@stub.local_entrypoint()defmain():
    stub.my_queue.put(""some object"")# adding a valuevalue = stub.my_queue.get()# retrieving a value import @stub.local_entrypoint() def main ""some object"" # adding a value # retrieving a value Copy Copy    Copy Similar to Dicts, Queues are also persisted and support values of any type. ",value = stub.my_queue.get().
0,What does the .aiofunction suffix indicate in the code?,Dicts and queues Asynchronous calls,"Both Dicts and Queues are synchronous by default, but they support asynchronous
interaction with the.aiofunction suffix. .aio @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint() async def main await 100 assert await 100 await ""hello"" 400 assert await ""hello"" 400 Copy Copy    Copy Note that.putand.getare aliases for the overloaded indexing operators on
Dicts, and you need them name for asynchronous calls. .put .get Please see the docs onasynchronous functionsfor more
information. asynchronous functions ",It indicates that both Dicts and Queues support asynchronous interaction.
3,What are these aliases needed for?,Dicts and queues Asynchronous calls,"Both Dicts and Queues are synchronous by default, but they support asynchronous
interaction with the.aiofunction suffix. .aio @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint() async def main await 100 assert await 100 await ""hello"" 400 assert await ""hello"" 400 Copy Copy    Copy Note that.putand.getare aliases for the overloaded indexing operators on
Dicts, and you need them name for asynchronous calls. .put .get Please see the docs onasynchronous functionsfor more
information. asynchronous functions ",These aliases are needed for asynchronous calls.
6,Where can you find more information about asynchronous functions?,Dicts and queues Asynchronous calls,"Both Dicts and Queues are synchronous by default, but they support asynchronous
interaction with the.aiofunction suffix. .aio @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400Copy @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint()asyncdefmain():awaitstub.my_queue.put.aio(100)assertawaitstub.my_queue.get.aio() ==100awaitstub.my_dict.put.aio(""hello"",400)assertawaitstub.my_dict.get.aio(""hello"") ==400 @stub.local_entrypoint() async def main await 100 assert await 100 await ""hello"" 400 assert await ""hello"" 400 Copy Copy    Copy Note that.putand.getare aliases for the overloaded indexing operators on
Dicts, and you need them name for asynchronous calls. .put .get Please see the docs onasynchronous functionsfor more
information. asynchronous functions ",You can find more information on the docs on asynchronous functions.
0,What is the purpose of the Dict in the given program?,Dicts and queues Example Dict and Queue Interaction,"To illustrate how dicts and queues can interact together in a simple distributed
system, consider the following example program that crawls the web, starting
fromwikipedia.organd traversing links to many
sites in breadth-first order. The Queue stores pages to crawl, while the Dict is
used as a kill switch to stop execution of tasks immediately upon completion. wikipedia.org importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") import import from import from import Dict ""requests"" ""beautifulsoup4"" Dict # Used to signal the app to stop # Stream of URLs that have been crawled def extract_links url:str str list str """"""Extract links from a given URL."""""" import import from import 10 ""html.parser"" for in ""a"" ""href"" return @stub.function() def crawl_pages urls:set[str] set str None for in if ""stop"" in return try print f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"" {url} {datetime.now() - s} {len(links)} len except as print f""Failed to crawl:{url}with error{exc}, skipping..."" {url} {exc} @stub.local_entrypoint() def main # Initialize queue with a starting URL ""https://www.wikipedia.org/"" # Crawl until the queue is empty, or reaching some number of URLs set 50000 while True try 2000 5 except break set if len else ""stop"" True print f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"" {len(visited)} len {elapsed:.2f} .2 Copy Copy    Copy Starting from Wikipedia, this spawns several dozen containers (auto-scaled on
demand) to crawl over 200,000 URLs in 40 seconds. Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queues Modal Dicts Modal Queues Asynchronous calls Example: Dict and Queue Interaction CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The Dict is used as a kill switch to stop execution of tasks immediately upon completion.
3,What type of information does the 'extract_links' function return?,Dicts and queues Example Dict and Queue Interaction,"To illustrate how dicts and queues can interact together in a simple distributed
system, consider the following example program that crawls the web, starting
fromwikipedia.organd traversing links to many
sites in breadth-first order. The Queue stores pages to crawl, while the Dict is
used as a kill switch to stop execution of tasks immediately upon completion. wikipedia.org importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") import import from import from import Dict ""requests"" ""beautifulsoup4"" Dict # Used to signal the app to stop # Stream of URLs that have been crawled def extract_links url:str str list str """"""Extract links from a given URL."""""" import import from import 10 ""html.parser"" for in ""a"" ""href"" return @stub.function() def crawl_pages urls:set[str] set str None for in if ""stop"" in return try print f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"" {url} {datetime.now() - s} {len(links)} len except as print f""Failed to crawl:{url}with error{exc}, skipping..."" {url} {exc} @stub.local_entrypoint() def main # Initialize queue with a starting URL ""https://www.wikipedia.org/"" # Crawl until the queue is empty, or reaching some number of URLs set 50000 while True try 2000 5 except break set if len else ""stop"" True print f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"" {len(visited)} len {elapsed:.2f} .2 Copy Copy    Copy Starting from Wikipedia, this spawns several dozen containers (auto-scaled on
demand) to crawl over 200,000 URLs in 40 seconds. Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queues Modal Dicts Modal Queues Asynchronous calls Example: Dict and Queue Interaction CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'extract_links' function returns a list of links from a given URL.
6,What happens if the web crawling encounters an error with a URL?,Dicts and queues Example Dict and Queue Interaction,"To illustrate how dicts and queues can interact together in a simple distributed
system, consider the following example program that crawls the web, starting
fromwikipedia.organd traversing links to many
sites in breadth-first order. The Queue stores pages to crawl, while the Dict is
used as a kill switch to stop execution of tasks immediately upon completion. wikipedia.org importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"")Copy importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") importqueueimportsysfromdatetimeimportdatetimefrommodalimportDict, Image, Queue, Stub


stub = Stub()
stub.image = Image.debian_slim().pip_install(""requests"",""beautifulsoup4"")

stub.signal =Dict.new()# Used to signal the app to stopstub.queue = Queue.new()# Stream of URLs that have been crawleddefextract_links(url:str) ->list[str]:""""""Extract links from a given URL.""""""importrequestsimporturllib.parsefrombs4importBeautifulSoup

    resp = requests.get(url, timeout=10)
    resp.raise_for_status()
    soup = BeautifulSoup(resp.text,""html.parser"")
    links = []forlinkinsoup.find_all(""a""):
        links.append(urllib.parse.urljoin(url, link.get(""href"")))returnlinks@stub.function()defcrawl_pages(urls:set[str]) ->None:forurlinurls:if""stop""instub.signal:returntry:
            s = datetime.now()
            links = extract_links(url)print(f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"")
            stub.queue.put_many(links)exceptExceptionasexc:print(f""Failed to crawl:{url}with error{exc}, skipping..."", file=sys.stderr)@stub.local_entrypoint()defmain():
    start_time = datetime.now()# Initialize queue with a starting URLstub.queue.put(""https://www.wikipedia.org/"")# Crawl until the queue is empty, or reaching some number of URLsvisited =set()
    max_urls =50000whileTrue:try:
            next_urls = stub.queue.get_many(2000, timeout=5)exceptqueue.Empty:breaknew_urls =set(next_urls) - visited
        visited |= new_urlsiflen(visited) < max_urls:
            crawl_pages.spawn(new_urls)else:
            stub.signal[""stop""] =Trueelapsed = (datetime.now() - start_time).total_seconds()print(f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"") import import from import from import Dict ""requests"" ""beautifulsoup4"" Dict # Used to signal the app to stop # Stream of URLs that have been crawled def extract_links url:str str list str """"""Extract links from a given URL."""""" import import from import 10 ""html.parser"" for in ""a"" ""href"" return @stub.function() def crawl_pages urls:set[str] set str None for in if ""stop"" in return try print f""Crawled:{url}in{datetime.now() - s}, with{len(links)}links"" {url} {datetime.now() - s} {len(links)} len except as print f""Failed to crawl:{url}with error{exc}, skipping..."" {url} {exc} @stub.local_entrypoint() def main # Initialize queue with a starting URL ""https://www.wikipedia.org/"" # Crawl until the queue is empty, or reaching some number of URLs set 50000 while True try 2000 5 except break set if len else ""stop"" True print f""Crawled{len(visited)}URLs in{elapsed:.2f}seconds"" {len(visited)} len {elapsed:.2f} .2 Copy Copy    Copy Starting from Wikipedia, this spawns several dozen containers (auto-scaled on
demand) to crawl over 200,000 URLs in 40 seconds. Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queuesModal DictsModal QueuesAsynchronous callsExample: Dict and Queue Interaction Dicts and queues Modal Dicts Modal Queues Asynchronous calls Example: Dict and Queue Interaction CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If an error is encountered, the script prints that it failed to crawl the URL due to the specific error and skips to the next URL."
0,What is the problem of declaring types in your Python entrypoint file during troubleshooting Custom types defined in __main__?,Troubleshooting Custom types defined in main,"__main__ Modal currently usescloudpickleto transfer objects returned or exceptions raised by functions that are executed
in Modal. This gives a lot of flexibility and support for custom data types. cloudpickle cloudpickle However, any types that are declared in your Python entrypoint file (The one you
call on the command line) will currently beredeclaredif they are returned
from Modal functions, and will therefore have the same structure and type name
but not maintain class object identity with your local types. This means that
youcan’tcatch specific custom exception classes: redeclared can’t importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass import class MyException Exception pass @stub.function() def raise_custom raise @stub.local_entrypoint() def main try except # this will not catch the remote exception pass except # this will catch it instead, as it's still a subclass of Exception pass Copy Copy    Copy Nor can you do object equality checks ondataclasses, orisinstancechecks: dataclasses isinstance importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! import import @dataclasses.dataclass class MyType int @stub.function() def return_custom return 10 @stub.local_entrypoint() def main assert 10 # false! assert 10 # true!, the type still has the same fields etc. assert isinstance # false! Copy Copy    Copy If this is a problem for you, you can easily solve it by moving your custom type
definitions to a separate Python file from the one you trigger to run your Modal
code, and import that file instead. # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.py import @dataclasses.dataclass class MyType int Copy Copy    Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.py import from import @stub.function() def return_custom return 10 @stub.local_entrypoint() def main assert 10 # true! assert isinstance # true! Copy Copy    Copy ","The problem is any types declared in your Python entrypoint file will be redeclared if they are returned from Modal functions, meaning they will not maintain class object identity with your local types."
3,"What issues may you encounter when doing object equality checks on dataclasses, or isinstance checks?",Troubleshooting Custom types defined in main,"__main__ Modal currently usescloudpickleto transfer objects returned or exceptions raised by functions that are executed
in Modal. This gives a lot of flexibility and support for custom data types. cloudpickle cloudpickle However, any types that are declared in your Python entrypoint file (The one you
call on the command line) will currently beredeclaredif they are returned
from Modal functions, and will therefore have the same structure and type name
but not maintain class object identity with your local types. This means that
youcan’tcatch specific custom exception classes: redeclared can’t importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass import class MyException Exception pass @stub.function() def raise_custom raise @stub.local_entrypoint() def main try except # this will not catch the remote exception pass except # this will catch it instead, as it's still a subclass of Exception pass Copy Copy    Copy Nor can you do object equality checks ondataclasses, orisinstancechecks: dataclasses isinstance importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! import import @dataclasses.dataclass class MyType int @stub.function() def return_custom return 10 @stub.local_entrypoint() def main assert 10 # false! assert 10 # true!, the type still has the same fields etc. assert isinstance # false! Copy Copy    Copy If this is a problem for you, you can easily solve it by moving your custom type
definitions to a separate Python file from the one you trigger to run your Modal
code, and import that file instead. # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.py import @dataclasses.dataclass class MyType int Copy Copy    Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.py import from import @stub.function() def return_custom return 10 @stub.local_entrypoint() def main assert 10 # true! assert isinstance # true! Copy Copy    Copy ",You may find that the checks may return false as the data returned does not maintain identity with the local types.
6,What changes when you import the custom type definitions from a separate file for your Modal code?,Troubleshooting Custom types defined in main,"__main__ Modal currently usescloudpickleto transfer objects returned or exceptions raised by functions that are executed
in Modal. This gives a lot of flexibility and support for custom data types. cloudpickle cloudpickle However, any types that are declared in your Python entrypoint file (The one you
call on the command line) will currently beredeclaredif they are returned
from Modal functions, and will therefore have the same structure and type name
but not maintain class object identity with your local types. This means that
youcan’tcatch specific custom exception classes: redeclared can’t importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of ExceptionpassCopy importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass importmodal
stub = modal.Stub()classMyException(Exception):pass@stub.function()defraise_custom():raiseMyException()@stub.local_entrypoint()defmain():try:
        raise_custom.remote()exceptMyException:# this will not catch the remote exceptionpassexceptException:# this will catch it instead, as it's still a subclass of Exceptionpass import class MyException Exception pass @stub.function() def raise_custom raise @stub.local_entrypoint() def main try except # this will not catch the remote exception pass except # this will catch it instead, as it's still a subclass of Exception pass Copy Copy    Copy Nor can you do object equality checks ondataclasses, orisinstancechecks: dataclasses isinstance importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false!Copy importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! importmodalimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intstub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# false!assertdata.foo ==10# true!, the type still has the same fields etc.assertisinstance(data, MyType)# false! import import @dataclasses.dataclass class MyType int @stub.function() def return_custom return 10 @stub.local_entrypoint() def main assert 10 # false! assert 10 # true!, the type still has the same fields etc. assert isinstance # false! Copy Copy    Copy If this is a problem for you, you can easily solve it by moving your custom type
definitions to a separate Python file from the one you trigger to run your Modal
code, and import that file instead. # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:intCopy # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.pyimportdataclasses@dataclasses.dataclassclassMyType:
    foo:int # File: my_types.py import @dataclasses.dataclass class MyType int Copy Copy    Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true!Copy # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.pyimportmodalfrommy_typesimportMyType

stub = modal.Stub()@stub.function()defreturn_custom():returnMyType(foo=10)@stub.local_entrypoint()defmain():
    data = return_custom.remote()assertdata == MyType(foo=10)# true!assertisinstance(data, MyType)# true! # File: modal_script.py import from import @stub.function() def return_custom return 10 @stub.local_entrypoint() def main assert 10 # true! assert isinstance # true! Copy Copy    Copy ","The issues with redeclaring types is fixed, and the data maintains identity with the local types."
0,What does it mean if a function has side effects in terms of reusing a container for multiple invocations of the same function within an app?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","This means that if your function has side effects like modifying files on disk, they may or may not be present for subsequent calls to that function."
3,What are two suggested ways to handle potential side effects of functions?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","You can either clean up your side effects, like deleting the database file at the end of your function call, or your functions can take them into consideration, like adding a condition to check if the database file already exists or randomizing the filename."
6,What is the role of the 'kit.start()' function in the provided script?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The 'kit.start()' function initializes the application with the imported app module, targeting the document's current script parent element, and providing additional options including node ids, data, form, and error."
0,What could be one of the side effects of using the same container for multiple function invocations?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The function may have side effects like modifying files on disk, so they may or may not be present for subsequent calls to that function."
1,What is the potential issue with using a disk-backed database like sqlite3 in the context of function reuse?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If you create a table during one function invocation, it may cause an OperationalError during the second invocation as the table already exists."
2,What is the suggested way to avoid errors when using a disk-backed database in function invocations?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","You can either clean up your side effects, like deleting the db file at the end of your function call, or make your functions take into consideration if the required resources already exist."
3,What is an example of a check which could be included in your function to avoid errors when reusing containers?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Adding a check like 'if os.path.exists(""db_file.sqlite"")' can prevent errors caused by trying to recreate something that already exists."
4,What does the 'db_op' function do in this context?,Troubleshooting Function side effects,"The same containercanbe reused for multiple invocations of the same function
within an app. This means that if your function has side effects like modifying
files on disk, they may or may not be present for subsequent calls to that
function. You should not rely on the side effects to be present, but you might
have to be careful so they don’t cause problems. can For example, if you create a disk-backed database using sqlite3: importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ...Copy importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... importmodalimportsqlite3

stub = modal.Stub()@stub.function()defdb_op():
    db = sqlite3(""db_file.sqlite3"")
    db.execute(""CREATE TABLE example (col_1 TEXT)"")
    ... import import @stub.function() def db_op ""db_file.sqlite3"" ""CREATE TABLE example (col_1 TEXT)"" Copy Copy    Copy This functioncan(but will not necessarily) fail on the second invocation
with an can OperationalError: table foo already exists OperationalError: table foo already exists To get around this, take care to either clean up your side effects (e.g.
deleting the db file at the end your function call above) or make your functions
take them into consideration (e.g. adding anif os.path.exists(""db_file.sqlite"")condition or randomize the filename
above). if os.path.exists(""db_file.sqlite"") Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting“Command not found” errorsCustom types defined in __main__Function side effects Troubleshooting “Command not found” errors Custom types defined in __main__ Function side effects CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'db_op' function creates a sqlite3 database and executes a statement to create a table named 'example' with a text column 'col_1'. 
0,What is the default execution timeout for all ModalFunctionexecutions? ,Timeouts,"All ModalFunctionexecutions have a default
execution timeout of 300 seconds (5 minutes), but users may specify timeout
durations between 10 seconds and 24 hours. Function importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") import @stub.function() def f 599 # Timeout! @stub.function(timeout=600) timeout=600 600 def f 599 print ""*Just* made it!"" Copy Copy    Copy The timeout duration is a measure of a Function’sexecutiontime. It does not
include scheduling time or any other period besides the time your code is
executing in Modal. This duration is also per execution attempt, meaning
Functions configured withmodal.Retrieswill
start new execution timeouts on each retry. For example, an infinite-looping
Function with a 100 second timeout and 3 allowed retries will run for least 400
seconds within Modal. execution modal.Retries modal.Retries ",The default execution timeout for all ModalFunctionexecutions is 300 seconds (5 minutes).
3,Does the timeout duration include scheduling time or any other period besides the time your code is executing in Modal?,Timeouts,"All ModalFunctionexecutions have a default
execution timeout of 300 seconds (5 minutes), but users may specify timeout
durations between 10 seconds and 24 hours. Function importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") import @stub.function() def f 599 # Timeout! @stub.function(timeout=600) timeout=600 600 def f 599 print ""*Just* made it!"" Copy Copy    Copy The timeout duration is a measure of a Function’sexecutiontime. It does not
include scheduling time or any other period besides the time your code is
executing in Modal. This duration is also per execution attempt, meaning
Functions configured withmodal.Retrieswill
start new execution timeouts on each retry. For example, an infinite-looping
Function with a 100 second timeout and 3 allowed retries will run for least 400
seconds within Modal. execution modal.Retries modal.Retries ","No, the timeout duration is a measure of a Function’s execution time. It does not include scheduling time or any other period besides the time your code is executing in Modal."
6,What is the total running time for an infinite-looping Function with a 100 second timeout and 3 allowed retries within Modal?,Timeouts,"All ModalFunctionexecutions have a default
execution timeout of 300 seconds (5 minutes), but users may specify timeout
durations between 10 seconds and 24 hours. Function importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"")Copy importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") importtime@stub.function()deff():
    time.sleep(599)# Timeout!@stub.function(timeout=600)deff():
    time.sleep(599)print(""*Just* made it!"") import @stub.function() def f 599 # Timeout! @stub.function(timeout=600) timeout=600 600 def f 599 print ""*Just* made it!"" Copy Copy    Copy The timeout duration is a measure of a Function’sexecutiontime. It does not
include scheduling time or any other period besides the time your code is
executing in Modal. This duration is also per execution attempt, meaning
Functions configured withmodal.Retrieswill
start new execution timeouts on each retry. For example, an infinite-looping
Function with a 100 second timeout and 3 allowed retries will run for least 400
seconds within Modal. execution modal.Retries modal.Retries ",An infinite-looping Function with a 100 second timeout and 3 allowed retries will run for least 400 seconds within Modal.
0,What is recommended if I require accurate and precise timeout durations on Function executions?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",It is recommended that you implement timeout logic in your user code.
1,What is the name of the company mentioned in the content?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The company mentioned in the content is Modal Labs, Inc."
2,"What information does the company Modal Labs provide, according to the text?",Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs provides company examples, documentation, pricing, and legal information."
3,In what year is it indicated that this data or script might be from?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The data or script might be from the year 2023.
4,What is the content suggesting the functions will do in relation to their timeout?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Functions will run for at least as long as their timeout allows, but they may run a handful of seconds longer."
0,What does Functions' timeout accuracy indicate?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Functions will run for at least as long as their timeout allows, but they may run a few extra seconds."
3,What is the base URL value of __sveltekit_qfhbjo?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The base URL value of __sveltekit_qfhbjo is ""../..""."
6,What is expected to happen after the Promise.all function has been resolved?,Timeouts Timeout accuracy,"Functions will run forat leastas long as their timeout allows, but they may
run a handful of seconds longer. If you require accurate and precise timeout
durations on your Function executions, it is recommended that you implement
timeout logic in your user code. at least TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy TimeoutsHandling timeoutsTimeout accuracy Timeouts Handling timeouts Timeout accuracy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The kit.start method is expected to be triggered, initializing the application with specific settings."
0,What is the purpose of using global variables in this context?,Global variables,"There are cases where you might want objects or data available inglobalscope. For example: global You need to use the data in a scheduled function (scheduled functions don’t
accept arguments)You need to construct objects (e.g. Secrets) in global scope to use as
function annotationsYou don’t want to clutter many function signatures with some common arguments
they all use, and pass the same arguments through many layers of function
calls. You need to use the data in a scheduled function (scheduled functions don’t
accept arguments) You need to construct objects (e.g. Secrets) in global scope to use as
function annotations You don’t want to clutter many function signatures with some common arguments
they all use, and pass the same arguments through many layers of function
calls. For these cases, you can use themodal.is_localfunction, which
returnsTrueif the app is running locally (initializing) orFalseif the
app is executing in the cloud. modal.is_local modal.is_local True False For instance, you can use amodal.Dictobject to
store one or multiple objects by key (similar to a Python dict) for later access
in Modal functions: modal.Dict modal.Dict importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) import import if with open ""list.json"" ""r"" as # reads from local disk on the development machine Dict ""foo"" @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_random_entry print ""foo"" Copy Copy    Copy Similarly, to create amodal.Secretthat you can pass
to your function decorators to create environment variables, you can run: modal.Secret modal.Secret importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... import if ""password"" ""PGPASS"" ""MY_LOCAL_PASSWORD"" @stub.function(secret=stub[""password""]) secret=stub[""password""] ""password"" def get_secret_data ""PGPASS"" Copy Copy    Copy ","The purpose of using global variables in this context is to keep data or objects available at a global scope. It could be helpful for scheduled functions, for constructing objects in global scope for function annotations, and to avoid filling many function signatures with common arguments they all use."
3,How is the modal.Dict object used in this context?,Global variables,"There are cases where you might want objects or data available inglobalscope. For example: global You need to use the data in a scheduled function (scheduled functions don’t
accept arguments)You need to construct objects (e.g. Secrets) in global scope to use as
function annotationsYou don’t want to clutter many function signatures with some common arguments
they all use, and pass the same arguments through many layers of function
calls. You need to use the data in a scheduled function (scheduled functions don’t
accept arguments) You need to construct objects (e.g. Secrets) in global scope to use as
function annotations You don’t want to clutter many function signatures with some common arguments
they all use, and pass the same arguments through many layers of function
calls. For these cases, you can use themodal.is_localfunction, which
returnsTrueif the app is running locally (initializing) orFalseif the
app is executing in the cloud. modal.is_local modal.is_local True False For instance, you can use amodal.Dictobject to
store one or multiple objects by key (similar to a Python dict) for later access
in Modal functions: modal.Dict modal.Dict importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) import import if with open ""list.json"" ""r"" as # reads from local disk on the development machine Dict ""foo"" @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_random_entry print ""foo"" Copy Copy    Copy Similarly, to create amodal.Secretthat you can pass
to your function decorators to create environment variables, you can run: modal.Secret modal.Secret importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... import if ""password"" ""PGPASS"" ""MY_LOCAL_PASSWORD"" @stub.function(secret=stub[""password""]) secret=stub[""password""] ""password"" def get_secret_data ""PGPASS"" Copy Copy    Copy ","The modal.Dict object is used to store one or multiple objects by key, much like a Python dict, for later access in Modal functions."
6,How is the scheduled function daily_random_entry() using the global variable?,Global variables,"There are cases where you might want objects or data available inglobalscope. For example: global You need to use the data in a scheduled function (scheduled functions don’t
accept arguments)You need to construct objects (e.g. Secrets) in global scope to use as
function annotationsYou don’t want to clutter many function signatures with some common arguments
they all use, and pass the same arguments through many layers of function
calls. You need to use the data in a scheduled function (scheduled functions don’t
accept arguments) You need to construct objects (e.g. Secrets) in global scope to use as
function annotations You don’t want to clutter many function signatures with some common arguments
they all use, and pass the same arguments through many layers of function
calls. For these cases, you can use themodal.is_localfunction, which
returnsTrueif the app is running locally (initializing) orFalseif the
app is executing in the cloud. modal.is_local modal.is_local True False For instance, you can use amodal.Dictobject to
store one or multiple objects by key (similar to a Python dict) for later access
in Modal functions: modal.Dict modal.Dict importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""]))Copy importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) importjsonimportrandomifmodal.is_local():withopen(""list.json"",""r"")asf:
        foo_list = json.load(f)# reads from local disk on the development machinestub.data_dict = modal.Dict({""foo"": foo_list})@stub.function(schedule=modal.Period(days=1))defdaily_random_entry():print(random.choice(stub.data_dict[""foo""])) import import if with open ""list.json"" ""r"" as # reads from local disk on the development machine Dict ""foo"" @stub.function(schedule=modal.Period(days=1)) schedule=modal.Period(days=1) days=1 1 def daily_random_entry print ""foo"" Copy Copy    Copy Similarly, to create amodal.Secretthat you can pass
to your function decorators to create environment variables, you can run: modal.Secret modal.Secret importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ...Copy importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... importosifmodal.is_local():
    stub[""password""] = modal.Secret.from_dict({""PGPASS"": os.environ[""MY_LOCAL_PASSWORD""]})@stub.function(secret=stub[""password""])defget_secret_data():
    connection = psycopg2.connect(password=os.environ[""PGPASS""])
    ... import if ""password"" ""PGPASS"" ""MY_LOCAL_PASSWORD"" @stub.function(secret=stub[""password""]) secret=stub[""password""] ""password"" def get_secret_data ""PGPASS"" Copy Copy    Copy ",The scheduled function daily_random_entry() uses the global variable to access stored data and print a random choice from the data.
0,What is the warning about regarding global variables in modules?,Global variables Warning about regular module globals,"If you try to construct a global in module scope using some local datawithoutusing something likemodal.is_local, it might have
unexpected effects since your Python modules will be not only be loaded on your
local machine, but also on the remote worker. without modal.is_local modal.is_local E.g., this will typically not work: # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error there open ""blob.json"" ""r"" @stub.function() def foo print Copy Copy    Copy Global variablesWarning about regular module globals Global variablesWarning about regular module globals Global variablesWarning about regular module globals Global variables Warning about regular module globals CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The warning is about the potential unexpected effects if you try to construct a global in module scope using some local data without using something like modal.is_local. The same modules will be loaded not only on the local machine but also on the remote worker which can cause issues.
3,What is advised to avoid this problem?,Global variables Warning about regular module globals,"If you try to construct a global in module scope using some local datawithoutusing something likemodal.is_local, it might have
unexpected effects since your Python modules will be not only be loaded on your
local machine, but also on the remote worker. without modal.is_local modal.is_local E.g., this will typically not work: # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error there open ""blob.json"" ""r"" @stub.function() def foo print Copy Copy    Copy Global variablesWarning about regular module globals Global variablesWarning about regular module globals Global variablesWarning about regular module globals Global variables Warning about regular module globals CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The advice given is to use something like ""modal.is_local"" when constructing a global in the module scope using local data."
6,"What does ""import(""../../_app/immutable/entry/start.be12ce5d.js"")"" do in the JavaScript code?",Global variables Warning about regular module globals,"If you try to construct a global in module scope using some local datawithoutusing something likemodal.is_local, it might have
unexpected effects since your Python modules will be not only be loaded on your
local machine, but also on the remote worker. without modal.is_local modal.is_local E.g., this will typically not work: # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob)Copy # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error theredata_blob =open(""blob.json"",""r"").read()@stub.function()deffoo():print(data_blob) # blob.json doesn't exist on the remote worker, so this will cause an error there open ""blob.json"" ""r"" @stub.function() def foo print Copy Copy    Copy Global variablesWarning about regular module globals Global variablesWarning about regular module globals Global variablesWarning about regular module globals Global variables Warning about regular module globals CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","This line of code in JavaScript is asynchronously importing a JavaScript module named ""start.be12ce5d.js"" that is located in the directory ""../../_app/immutable/entry/""."
0,What is a common requirement for performing tasks automatically?,Scheduling remote cron jobs,"A common requirement is to perform some task at a given time every day or week
automatically. Modal facilitates this through function schedules. ",Scheduling remote cron jobs at a given time every day or week is a common requirement.
3,How can a task be performed at a given time every day or week automatically?,Scheduling remote cron jobs,"A common requirement is to perform some task at a given time every day or week
automatically. Modal facilitates this through function schedules. ",This can be done by scheduling remote cron jobs.
6,What is the process to perform a task automatically every day or week?,Scheduling remote cron jobs,"A common requirement is to perform some task at a given time every day or week
automatically. Modal facilitates this through function schedules. ",The process is facilitated through the scheduling of remote cron jobs using function schedules in Modal.
0,Where can you view past execution logs for the scheduled function?,Scheduling remote cron jobs Monitoring your scheduled runs,"To see past execution logs for the scheduled function, go to theAppssection on the Modal web site. Apps Schedules currently cannot be paused. Instead the schedule should be removed and
the app redeployed. Schedules can be started manually on the app’s dashboard
page, using the “run now” button. ",You can view them in the Apps section on the Modal web site.
1,Can the Apps Schedules be paused?,Scheduling remote cron jobs Monitoring your scheduled runs,"To see past execution logs for the scheduled function, go to theAppssection on the Modal web site. Apps Schedules currently cannot be paused. Instead the schedule should be removed and
the app redeployed. Schedules can be started manually on the app’s dashboard
page, using the “run now” button. ","No, Apps Schedules cannot be paused."
2,What should be done instead of pausing the Apps Schedules?,Scheduling remote cron jobs Monitoring your scheduled runs,"To see past execution logs for the scheduled function, go to theAppssection on the Modal web site. Apps Schedules currently cannot be paused. Instead the schedule should be removed and
the app redeployed. Schedules can be started manually on the app’s dashboard
page, using the “run now” button. ","Instead, the schedule should be removed and the app redeployed."
3,Can schedules be started manually?,Scheduling remote cron jobs Monitoring your scheduled runs,"To see past execution logs for the scheduled function, go to theAppssection on the Modal web site. Apps Schedules currently cannot be paused. Instead the schedule should be removed and
the app redeployed. Schedules can be started manually on the app’s dashboard
page, using the “run now” button. ","Yes, schedules can be started manually on the app’s dashboard page."
4,How can you manually start a schedule?,Scheduling remote cron jobs Monitoring your scheduled runs,"To see past execution logs for the scheduled function, go to theAppssection on the Modal web site. Apps Schedules currently cannot be paused. Instead the schedule should be removed and
the app redeployed. Schedules can be started manually on the app’s dashboard
page, using the “run now” button. ",You can manually start a schedule using the “run now” button on the app’s dashboard page.
0,What are the two types of base schedule values in scheduling remote cron jobs?,Scheduling remote cron jobs Schedule types,"There are two kinds of base schedule values -modal.Periodandmodal.Cron. modal.Period modal.Period modal.Cron modal.Cron modal.Periodlets you specify an interval
between function calls, e.g.Period(days=1)orPeriod(hours=5): modal.Period modal.Period Period(days=1) Period(hours=5) # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours @stub.function(schedule=modal.Period(hours=5)) schedule=modal.Period(hours=5) hours=5 5 def perform_heavy_computation Copy Copy    Copy modal.Crongives you finer control usingcronsyntax: modal.Cron modal.Cron cron # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday @stub.function(schedule=modal.Cron(""0 8 * * 1"")) schedule=modal.Cron(""0 8 * * 1"") ""0 8 * * 1"" ""0 8 * * 1"" def perform_heavy_computation Copy Copy    Copy For more details, see the API reference forPeriod,CronandFunction Period Cron Function Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule types Scheduling remote cron jobs Basic scheduling Monitoring your scheduled runs Schedule types See it in actionHacker News Slackbot See it in actionHacker News Slackbot See it in action Hacker News Slackbot Hacker News Slackbot Hacker News Slackbot     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The two types of base schedule values are modal.Period and modal.Cron.
3,What does modal.Period allow you to do?,Scheduling remote cron jobs Schedule types,"There are two kinds of base schedule values -modal.Periodandmodal.Cron. modal.Period modal.Period modal.Cron modal.Cron modal.Periodlets you specify an interval
between function calls, e.g.Period(days=1)orPeriod(hours=5): modal.Period modal.Period Period(days=1) Period(hours=5) # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours @stub.function(schedule=modal.Period(hours=5)) schedule=modal.Period(hours=5) hours=5 5 def perform_heavy_computation Copy Copy    Copy modal.Crongives you finer control usingcronsyntax: modal.Cron modal.Cron cron # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday @stub.function(schedule=modal.Cron(""0 8 * * 1"")) schedule=modal.Cron(""0 8 * * 1"") ""0 8 * * 1"" ""0 8 * * 1"" def perform_heavy_computation Copy Copy    Copy For more details, see the API reference forPeriod,CronandFunction Period Cron Function Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule types Scheduling remote cron jobs Basic scheduling Monitoring your scheduled runs Schedule types See it in actionHacker News Slackbot See it in actionHacker News Slackbot See it in action Hacker News Slackbot Hacker News Slackbot Hacker News Slackbot     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal.Period allows you to specify an interval between function calls.
6,How often does the function perform_heavy_computation run when it is scheduled with modal.Period(hours=5)?,Scheduling remote cron jobs Schedule types,"There are two kinds of base schedule values -modal.Periodandmodal.Cron. modal.Period modal.Period modal.Cron modal.Cron modal.Periodlets you specify an interval
between function calls, e.g.Period(days=1)orPeriod(hours=5): modal.Period modal.Period Period(days=1) Period(hours=5) # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours @stub.function(schedule=modal.Period(hours=5)) schedule=modal.Period(hours=5) hours=5 5 def perform_heavy_computation Copy Copy    Copy modal.Crongives you finer control usingcronsyntax: modal.Cron modal.Cron cron # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday @stub.function(schedule=modal.Cron(""0 8 * * 1"")) schedule=modal.Cron(""0 8 * * 1"") ""0 8 * * 1"" ""0 8 * * 1"" def perform_heavy_computation Copy Copy    Copy For more details, see the API reference forPeriod,CronandFunction Period Cron Function Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule types Scheduling remote cron jobs Basic scheduling Monitoring your scheduled runs Schedule types See it in actionHacker News Slackbot See it in actionHacker News Slackbot See it in action Hacker News Slackbot Hacker News Slackbot Hacker News Slackbot     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The function perform_heavy_computation runs once every 5 hours when scheduled with modal.Period(hours=5).
0,What are the two kinds of base schedule values in scheduling remote cron jobs?,Scheduling remote cron jobs Schedule types,"There are two kinds of base schedule values -modal.Periodandmodal.Cron. modal.Period modal.Period modal.Cron modal.Cron modal.Periodlets you specify an interval
between function calls, e.g.Period(days=1)orPeriod(hours=5): modal.Period modal.Period Period(days=1) Period(hours=5) # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours @stub.function(schedule=modal.Period(hours=5)) schedule=modal.Period(hours=5) hours=5 5 def perform_heavy_computation Copy Copy    Copy modal.Crongives you finer control usingcronsyntax: modal.Cron modal.Cron cron # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday @stub.function(schedule=modal.Cron(""0 8 * * 1"")) schedule=modal.Cron(""0 8 * * 1"") ""0 8 * * 1"" ""0 8 * * 1"" def perform_heavy_computation Copy Copy    Copy For more details, see the API reference forPeriod,CronandFunction Period Cron Function Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule types Scheduling remote cron jobs Basic scheduling Monitoring your scheduled runs Schedule types See it in actionHacker News Slackbot See it in actionHacker News Slackbot See it in action Hacker News Slackbot Hacker News Slackbot Hacker News Slackbot     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The two kinds of base schedule values are modal.Period and modal.Cron.
3,What control does modal.Cron provide in scheduling of function?,Scheduling remote cron jobs Schedule types,"There are two kinds of base schedule values -modal.Periodandmodal.Cron. modal.Period modal.Period modal.Cron modal.Cron modal.Periodlets you specify an interval
between function calls, e.g.Period(days=1)orPeriod(hours=5): modal.Period modal.Period Period(days=1) Period(hours=5) # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours @stub.function(schedule=modal.Period(hours=5)) schedule=modal.Period(hours=5) hours=5 5 def perform_heavy_computation Copy Copy    Copy modal.Crongives you finer control usingcronsyntax: modal.Cron modal.Cron cron # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday @stub.function(schedule=modal.Cron(""0 8 * * 1"")) schedule=modal.Cron(""0 8 * * 1"") ""0 8 * * 1"" ""0 8 * * 1"" def perform_heavy_computation Copy Copy    Copy For more details, see the API reference forPeriod,CronandFunction Period Cron Function Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule types Scheduling remote cron jobs Basic scheduling Monitoring your scheduled runs Schedule types See it in actionHacker News Slackbot See it in actionHacker News Slackbot See it in action Hacker News Slackbot Hacker News Slackbot Hacker News Slackbot     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal.Cron gives finer control using cron syntax.
6,"What year was Modal Labs, Inc. established?",Scheduling remote cron jobs Schedule types,"There are two kinds of base schedule values -modal.Periodandmodal.Cron. modal.Period modal.Period modal.Cron modal.Cron modal.Periodlets you specify an interval
between function calls, e.g.Period(days=1)orPeriod(hours=5): modal.Period modal.Period Period(days=1) Period(hours=5) # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ...Copy # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours@stub.function(schedule=modal.Period(hours=5))defperform_heavy_computation():
    ... # runs once every 5 hours @stub.function(schedule=modal.Period(hours=5)) schedule=modal.Period(hours=5) hours=5 5 def perform_heavy_computation Copy Copy    Copy modal.Crongives you finer control usingcronsyntax: modal.Cron modal.Cron cron # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ...Copy # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday@stub.function(schedule=modal.Cron(""0 8 * * 1""))defperform_heavy_computation():
    ... # runs at 8 am (UTC) every Monday @stub.function(schedule=modal.Cron(""0 8 * * 1"")) schedule=modal.Cron(""0 8 * * 1"") ""0 8 * * 1"" ""0 8 * * 1"" def perform_heavy_computation Copy Copy    Copy For more details, see the API reference forPeriod,CronandFunction Period Cron Function Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule typesSee it in actionHacker News Slackbot Scheduling remote cron jobsBasic schedulingMonitoring your scheduled runsSchedule types Scheduling remote cron jobs Basic scheduling Monitoring your scheduled runs Schedule types See it in actionHacker News Slackbot See it in actionHacker News Slackbot See it in action Hacker News Slackbot Hacker News Slackbot Hacker News Slackbot     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. was established in 2023."
0,What is the purpose of Dynamic Sandboxes in Modal?,Dynamic sandboxes beta,"In addition to the function interface, Modal has a direct interface for defining
containersat runtimeand running arbitrary code inside them. at runtime This can be useful if, for example, you want to: Run code generated by a language model with a list of dynamically generated
requirements.Check out a git repository and run a command against it, like a test suite, ornpm lint.Use Modal to orchestrate containers that don’t have or use Python. Run code generated by a language model with a list of dynamically generated
requirements. Check out a git repository and run a command against it, like a test suite, ornpm lint. npm lint Use Modal to orchestrate containers that don’t have or use Python. Each individual job is called aSandbox, and can be created using thespawn_sandboxfunction on a running
app: Sandbox spawn_sandbox spawn_sandbox @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint() def main ""bash"" ""-c"" ""cd /repo && pytest ."" ""pandas"" ""./my_repo"" ""/repo"" 600 # 10 minutes if 0 print f""Tests failed with code{sb.returncode}"" {sb.returncode} print Copy Copy    Copy It’s useful to note that theSandboxobject returned
above has an interface similar to Python’sasyncio.subprocess.ProcessAPI, and can be used in a similar way. Sandbox Sandbox asyncio.subprocess.Process ","In Modal, Dynamic Sandboxes are useful for defining containers at runtime and running arbitrary code inside them. They can be used to run code generated by a language model, checkout a git repository and run a command against it, or for orchestrating containers that don’t have or use Python."
3,How can Modal’s Dynamic Sandbox interface run a command against a git repository?,Dynamic sandboxes beta,"In addition to the function interface, Modal has a direct interface for defining
containersat runtimeand running arbitrary code inside them. at runtime This can be useful if, for example, you want to: Run code generated by a language model with a list of dynamically generated
requirements.Check out a git repository and run a command against it, like a test suite, ornpm lint.Use Modal to orchestrate containers that don’t have or use Python. Run code generated by a language model with a list of dynamically generated
requirements. Check out a git repository and run a command against it, like a test suite, ornpm lint. npm lint Use Modal to orchestrate containers that don’t have or use Python. Each individual job is called aSandbox, and can be created using thespawn_sandboxfunction on a running
app: Sandbox spawn_sandbox spawn_sandbox @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint() def main ""bash"" ""-c"" ""cd /repo && pytest ."" ""pandas"" ""./my_repo"" ""/repo"" 600 # 10 minutes if 0 print f""Tests failed with code{sb.returncode}"" {sb.returncode} print Copy Copy    Copy It’s useful to note that theSandboxobject returned
above has an interface similar to Python’sasyncio.subprocess.ProcessAPI, and can be used in a similar way. Sandbox Sandbox asyncio.subprocess.Process ","In Modal, the Dynamic Sandbox interface can checkout a git repository and run a command against it. This can be useful for tasks like running a test suite or npm lint operations."
6,How is the Sandbox object in Modal similar to Python's asyncio.subprocess.Process API?,Dynamic sandboxes beta,"In addition to the function interface, Modal has a direct interface for defining
containersat runtimeand running arbitrary code inside them. at runtime This can be useful if, for example, you want to: Run code generated by a language model with a list of dynamically generated
requirements.Check out a git repository and run a command against it, like a test suite, ornpm lint.Use Modal to orchestrate containers that don’t have or use Python. Run code generated by a language model with a list of dynamically generated
requirements. Check out a git repository and run a command against it, like a test suite, ornpm lint. npm lint Use Modal to orchestrate containers that don’t have or use Python. Each individual job is called aSandbox, and can be created using thespawn_sandboxfunction on a running
app: Sandbox spawn_sandbox spawn_sandbox @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read())Copy @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint()defmain():
    sb = stub.spawn_sandbox(""bash"",""-c"",""cd /repo && pytest ."",
        image=modal.Image.debian_slim().pip_install(""pandas""),
        mounts=[modal.Mount.from_local_dir(""./my_repo"", remote_path=""/repo"")],
        timeout=600,# 10 minutes)

    sb.wait()ifsb.returncode !=0:print(f""Tests failed with code{sb.returncode}"")print(sb.stderr.read()) @stub.local_entrypoint() def main ""bash"" ""-c"" ""cd /repo && pytest ."" ""pandas"" ""./my_repo"" ""/repo"" 600 # 10 minutes if 0 print f""Tests failed with code{sb.returncode}"" {sb.returncode} print Copy Copy    Copy It’s useful to note that theSandboxobject returned
above has an interface similar to Python’sasyncio.subprocess.ProcessAPI, and can be used in a similar way. Sandbox Sandbox asyncio.subprocess.Process ","The Sandbox object returned in Modal has an interface similar to Python’s asyncio.subprocess.Process API, and can be used in a similar way to run and manage processes."
0,What are dynamic sandboxes used for?,Dynamic sandboxes beta Isolation and security,"Sandboxes can be used to run untrusted code, such as code from third parties or
generated by a language model. Unlike regularFunctionrunners,Sandboxrunners do not have the ability to spawn new containers, or otherwise perform
operations in your workspace. These runners are also torn down after execution,
and never reused across calls. Function Sandbox ","Dynamic sandboxes are used to run untrusted code, such as code from third parties or code generated by a language model."
3,What happens to Sandbox runners after execution?,Dynamic sandboxes beta Isolation and security,"Sandboxes can be used to run untrusted code, such as code from third parties or
generated by a language model. Unlike regularFunctionrunners,Sandboxrunners do not have the ability to spawn new containers, or otherwise perform
operations in your workspace. These runners are also torn down after execution,
and never reused across calls. Function Sandbox ",These runners are torn down after execution.
6,What is the benefit of sandbox isolation and security?,Dynamic sandboxes beta Isolation and security,"Sandboxes can be used to run untrusted code, such as code from third parties or
generated by a language model. Unlike regularFunctionrunners,Sandboxrunners do not have the ability to spawn new containers, or otherwise perform
operations in your workspace. These runners are also torn down after execution,
and never reused across calls. Function Sandbox ","The benefit is that it protects your workspace from potentially harmful operations, as they do not have the ability to spawn new containers or perform other operations."
0,What is the mean of accessing sandbox output in Dynamic sandboxes (beta)?,Dynamic sandboxes beta Output,"The interface for accessing sandbox output is via thestdoutandstderrattributes on the sandbox object. These areLogsReaderobjects,
and at the moment have a single methodread, which returns the entire output
stream. In the future, we plan to add support for streaming output and input. stdout stderr LogsReader LogsReader read sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) ""echo"" ""hello"" print Copy Copy    Copy Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutput Dynamic sandboxes (beta) Parameters Dynamically defined environments Returning or persisting data Isolation and security Output See it in actionSafe LLM code execution See it in actionSafe LLM code execution See it in action Safe LLM code execution Safe LLM code execution Safe LLM code execution     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The interface for accessing sandbox output is via the stdout and stderr attributes on the sandbox object.
3,What is future plan for accessing output and input in Dynamic sandboxes (beta)?,Dynamic sandboxes beta Output,"The interface for accessing sandbox output is via thestdoutandstderrattributes on the sandbox object. These areLogsReaderobjects,
and at the moment have a single methodread, which returns the entire output
stream. In the future, we plan to add support for streaming output and input. stdout stderr LogsReader LogsReader read sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) ""echo"" ""hello"" print Copy Copy    Copy Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutput Dynamic sandboxes (beta) Parameters Dynamically defined environments Returning or persisting data Isolation and security Output See it in actionSafe LLM code execution See it in actionSafe LLM code execution See it in action Safe LLM code execution Safe LLM code execution Safe LLM code execution     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In the future, Dynamic sandboxes (beta) plan to add support for streaming output and input."
6,What are the parts of Dynamic Sandboxes (beta)?,Dynamic sandboxes beta Output,"The interface for accessing sandbox output is via thestdoutandstderrattributes on the sandbox object. These areLogsReaderobjects,
and at the moment have a single methodread, which returns the entire output
stream. In the future, we plan to add support for streaming output and input. stdout stderr LogsReader LogsReader read sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) ""echo"" ""hello"" print Copy Copy    Copy Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutput Dynamic sandboxes (beta) Parameters Dynamically defined environments Returning or persisting data Isolation and security Output See it in actionSafe LLM code execution See it in actionSafe LLM code execution See it in action Safe LLM code execution Safe LLM code execution Safe LLM code execution     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The parts of Dynamic Sandboxes (beta) include Parameters, Dynamically defined environments, Returning or persisting data, Isolation and security, and Output."
0,What is the means of accessing the sandbox output in the context of dynamic sandboxes?,Dynamic sandboxes beta Output,"The interface for accessing sandbox output is via thestdoutandstderrattributes on the sandbox object. These areLogsReaderobjects,
and at the moment have a single methodread, which returns the entire output
stream. In the future, we plan to add support for streaming output and input. stdout stderr LogsReader LogsReader read sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) ""echo"" ""hello"" print Copy Copy    Copy Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutput Dynamic sandboxes (beta) Parameters Dynamically defined environments Returning or persisting data Isolation and security Output See it in actionSafe LLM code execution See it in actionSafe LLM code execution See it in action Safe LLM code execution Safe LLM code execution Safe LLM code execution     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The interface for accessing sandbox output is through the stdout and stderr attributes on the sandbox object.
3,What is the method used to return the entire output stream in the context of dynamic sandboxes?,Dynamic sandboxes beta Output,"The interface for accessing sandbox output is via thestdoutandstderrattributes on the sandbox object. These areLogsReaderobjects,
and at the moment have a single methodread, which returns the entire output
stream. In the future, we plan to add support for streaming output and input. stdout stderr LogsReader LogsReader read sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) ""echo"" ""hello"" print Copy Copy    Copy Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutput Dynamic sandboxes (beta) Parameters Dynamically defined environments Returning or persisting data Isolation and security Output See it in actionSafe LLM code execution See it in actionSafe LLM code execution See it in action Safe LLM code execution Safe LLM code execution Safe LLM code execution     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The method used is ""read""."
6,What is shown in the safe LLM code execution as per dynamic sandboxes?,Dynamic sandboxes beta Output,"The interface for accessing sandbox output is via thestdoutandstderrattributes on the sandbox object. These areLogsReaderobjects,
and at the moment have a single methodread, which returns the entire output
stream. In the future, we plan to add support for streaming output and input. stdout stderr LogsReader LogsReader read sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read())Copy sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) sandbox = stub.spawn_sandbox(""echo"",""hello"")
sandbox.wait()print(sandbox.stdout.read()) ""echo"" ""hello"" print Copy Copy    Copy Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutputSee it in actionSafe LLM code execution Dynamic sandboxes (beta)ParametersDynamically defined environmentsReturning or persisting dataIsolation and securityOutput Dynamic sandboxes (beta) Parameters Dynamically defined environments Returning or persisting data Isolation and security Output See it in actionSafe LLM code execution See it in actionSafe LLM code execution See it in action Safe LLM code execution Safe LLM code execution Safe LLM code execution     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In safe LLM code execution, it's shown how to spawn a sandbox and read its output."
0,What software is used to render an animated 3D scene in this example?,Render a video with Blender on GPUs,"This example shows how you can render an animated 3D scene usingBlender’s Python interface.
We use Modal’s GPU workers for this. Blender ",Blender
3,What function does Modal's GPU workers serve in this content?,Render a video with Blender on GPUs,"This example shows how you can render an animated 3D scene usingBlender’s Python interface.
We use Modal’s GPU workers for this. Blender ",They are used to render an animated 3D scene in Blender.
6,What technology does this example use for rendering with Blender?,Render a video with Blender on GPUs,"This example shows how you can render an animated 3D scene usingBlender’s Python interface.
We use Modal’s GPU workers for this. Blender ",GPUs
0,What is the python version being used in this setup?,Render a video with Blender on GPUs Defining the image,"Blender requires a very custom image in order to run properly.
In order to save you some time, we have precompiled the Python packages
and stored them in a Dockerhub image. dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) ""RUN export DEBIAN_FRONTEND=noninteractive && "" ""chown root:root /var /etc /usr /var/lib /var/log / && "" # needed for some weird systemd error '    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && ' ""    apt update && "" ""    apt install -yq --no-install-recommends libcrypt1 && "" ""    apt install -yq --no-install-recommends"" ""        libgomp1 "" ""        xorg "" ""        openbox "" ""        xvfb "" ""        libxxf86vm1 "" ""        libxfixes3 "" ""        libgl1"" ""COPY --from=akshatb42/bpy:2.93-gpu"" ""     /usr/local/lib/python3.9/dist-packages/"" ""     /usr/local/lib/python3.9/site-packages/"" ""RUN apt install -yq curl"" f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"" {SCENE_FILENAME} f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"" {MATERIALS_FILENAME} ""example-blender-video"" ""3.9"" Copy Copy    Copy ",Python version 3.9 is being used in this setup.
3,What is the name of the Dockerhub image being copied from?,Render a video with Blender on GPUs Defining the image,"Blender requires a very custom image in order to run properly.
In order to save you some time, we have precompiled the Python packages
and stored them in a Dockerhub image. dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) ""RUN export DEBIAN_FRONTEND=noninteractive && "" ""chown root:root /var /etc /usr /var/lib /var/log / && "" # needed for some weird systemd error '    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && ' ""    apt update && "" ""    apt install -yq --no-install-recommends libcrypt1 && "" ""    apt install -yq --no-install-recommends"" ""        libgomp1 "" ""        xorg "" ""        openbox "" ""        xvfb "" ""        libxxf86vm1 "" ""        libxfixes3 "" ""        libgl1"" ""COPY --from=akshatb42/bpy:2.93-gpu"" ""     /usr/local/lib/python3.9/dist-packages/"" ""     /usr/local/lib/python3.9/site-packages/"" ""RUN apt install -yq curl"" f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"" {SCENE_FILENAME} f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"" {MATERIALS_FILENAME} ""example-blender-video"" ""3.9"" Copy Copy    Copy ",The Dockerhub image being copied from is akshatb42/bpy:2.93-gpu.
6,What is the apt package being installed that is required for opening applications in a windowed interface?,Render a video with Blender on GPUs Defining the image,"Blender requires a very custom image in order to run properly.
In order to save you some time, we have precompiled the Python packages
and stored them in a Dockerhub image. dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
)Copy dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) dockerfile_commands = [""RUN export DEBIAN_FRONTEND=noninteractive && """"chown root:root /var /etc /usr /var/lib /var/log / && ""# needed for some weird systemd error'    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && '""    apt update && """"    apt install -yq --no-install-recommends libcrypt1 && """"    apt install -yq --no-install-recommends""""        libgomp1 """"        xorg """"        openbox """"        xvfb """"        libxxf86vm1 """"        libxfixes3 """"        libgl1"",""COPY --from=akshatb42/bpy:2.93-gpu""""     /usr/local/lib/python3.9/dist-packages/""""     /usr/local/lib/python3.9/site-packages/"",""RUN apt install -yq curl"",f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"",f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"",
]
stub = modal.Stub(""example-blender-video"",
    image=modal.Image.debian_slim(python_version=""3.9"").dockerfile_commands(
        dockerfile_commands
    ),
) ""RUN export DEBIAN_FRONTEND=noninteractive && "" ""chown root:root /var /etc /usr /var/lib /var/log / && "" # needed for some weird systemd error '    echo ""deb http://deb.debian.org/debian testing main contrib non-free"" > /etc/apt/sources.list.d/testing.list && ' ""    apt update && "" ""    apt install -yq --no-install-recommends libcrypt1 && "" ""    apt install -yq --no-install-recommends"" ""        libgomp1 "" ""        xorg "" ""        openbox "" ""        xvfb "" ""        libxxf86vm1 "" ""        libxfixes3 "" ""        libgl1"" ""COPY --from=akshatb42/bpy:2.93-gpu"" ""     /usr/local/lib/python3.9/dist-packages/"" ""     /usr/local/lib/python3.9/site-packages/"" ""RUN apt install -yq curl"" f""RUN curl -L -o scene.blend -C - '{SCENE_FILENAME}'"" {SCENE_FILENAME} f""RUN curl -L -o scene.mtl -C - '{MATERIALS_FILENAME}'"" {MATERIALS_FILENAME} ""example-blender-video"" ""3.9"" Copy Copy    Copy ",The package openbox is being installed for this purpose.
0,What is the purpose of the stub.is_inside() conditional in this context?,Render a video with Blender on GPUs Setting things up in the containers,"We need various global configuration that we want to happen inside the containers (but not locally), such as
enabling the GPU device.
To do this, we use thestub.is_inside()conditional, which will evaluate toFalsewhen the script runs
locally, but toTruewhen imported in the cloud. stub.is_inside() False True ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 if import #NOTE:Blender segfaults if you try to do this after the other imports. NOTE: ""/scene.blend"" ""Scene"" ""Camera.001"" 0 ""CYCLES"" # Set the device_type ""cycles"" ""CUDA"" # Set the device and feature set ""GPU"" ""cycles"" for in ""cycles"" ""use"" 1 # Using all devices, include GPU and CPU print ""Has active device:"" ""cycles"" 0 64 0 64 0 200 Copy Copy    Copy ","It determines whether the script runs locally or on the cloud. If it's running in the cloud, the conditional will evaluate to true."
3,What kind of device is this script setting up to use for rendering with Blender in the cloud?,Render a video with Blender on GPUs Setting things up in the containers,"We need various global configuration that we want to happen inside the containers (but not locally), such as
enabling the GPU device.
To do this, we use thestub.is_inside()conditional, which will evaluate toFalsewhen the script runs
locally, but toTruewhen imported in the cloud. stub.is_inside() False True ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 if import #NOTE:Blender segfaults if you try to do this after the other imports. NOTE: ""/scene.blend"" ""Scene"" ""Camera.001"" 0 ""CYCLES"" # Set the device_type ""cycles"" ""CUDA"" # Set the device and feature set ""GPU"" ""cycles"" for in ""cycles"" ""use"" 1 # Using all devices, include GPU and CPU print ""Has active device:"" ""cycles"" 0 64 0 64 0 200 Copy Copy    Copy ",The script is setting up a GPU device for rendering.
6,What are the dimensions set for the render tiles in this script?,Render a video with Blender on GPUs Setting things up in the containers,"We need various global configuration that we want to happen inside the containers (but not locally), such as
enabling the GPU device.
To do this, we use thestub.is_inside()conditional, which will evaluate toFalsewhen the script runs
locally, but toTruewhen imported in the cloud. stub.is_inside() False True ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200Copy ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 ifstub.is_inside():importbpy#NOTE:Blender segfaults if you try to do this after the other imports.bpy.ops.wm.open_mainfile(filepath=""/scene.blend"")
    bpy.data.scenes[""Scene""].camera = bpy.data.objects.get(""Camera.001"")

    bpy.data.scenes[0].render.engine =""CYCLES""# Set the device_typebpy.context.preferences.addons[""cycles""].preferences.compute_device_type =""CUDA""# Set the device and feature setbpy.context.scene.cycles.device =""GPU""bpy.context.preferences.addons[""cycles""].preferences.get_devices()fordinbpy.context.preferences.addons[""cycles""].preferences.devices:
        d[""use""] =1# Using all devices, include GPU and CPUprint(""Has active device:"",
        bpy.context.preferences.addons[""cycles""].preferences.has_active_device(),
    )

    bpy.data.scenes[0].render.tile_x =64bpy.data.scenes[0].render.tile_y =64bpy.data.scenes[0].cycles.samples =200 if import #NOTE:Blender segfaults if you try to do this after the other imports. NOTE: ""/scene.blend"" ""Scene"" ""Camera.001"" 0 ""CYCLES"" # Set the device_type ""cycles"" ""CUDA"" # Set the device and feature set ""GPU"" ""cycles"" for in ""cycles"" ""use"" 1 # Using all devices, include GPU and CPU print ""Has active device:"" ""cycles"" 0 64 0 64 0 200 Copy Copy    Copy ",The render tiles are set at 64x64.
0,What GPU is used in the function for rendering a frame?,Render a video with Blender on GPUs Use a GPU from a Modal function,"Now, let’s define the function that renders each frame in parallel.
Note thegpu=""any""argument which tells Modal to use GPU workers. gpu=""any"" @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"") gpu=""t4"" ""t4"" def render_frame i print f""Using frame{i}"" {i} 400 400 100 with "".png"" as # Render still frame True with open ""rb"" as bytearray return Copy Copy    Copy ","The function uses a ""t4"" GPU for rendering a frame."
3,What are the given dimensions for scene rendering in the script?,Render a video with Blender on GPUs Use a GPU from a Modal function,"Now, let’s define the function that renders each frame in parallel.
Note thegpu=""any""argument which tells Modal to use GPU workers. gpu=""any"" @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"") gpu=""t4"" ""t4"" def render_frame i print f""Using frame{i}"" {i} 400 400 100 with "".png"" as # Render still frame True with open ""rb"" as bytearray return Copy Copy    Copy ",The given dimensions for scene rendering are 400x400.
6,What command is given to execute rendering in the script?,Render a video with Blender on GPUs Use a GPU from a Modal function,"Now, let’s define the function that renders each frame in parallel.
Note thegpu=""any""argument which tells Modal to use GPU workers. gpu=""any"" @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytesCopy @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"")defrender_frame(i):print(f""Using frame{i}"")

    scn = bpy.context.scene
    scn.render.resolution_x =400scn.render.resolution_y =400scn.render.resolution_percentage =100scn.frame_set(i)withtempfile.NamedTemporaryFile(suffix="".png"")astf:
        scn.render.filepath = tf.name# Render still framebpy.ops.render.render(write_still=True)withopen(tf.name,""rb"")asimage:
            img_bytes =bytearray(image.read())returni, img_bytes @stub.function(gpu=""t4"") gpu=""t4"" ""t4"" def render_frame i print f""Using frame{i}"" {i} 400 400 100 with "".png"" as # Render still frame True with open ""rb"" as bytearray return Copy Copy    Copy ",The command 'bpy.ops.render.render(write_still=True)' is given to execute the rendering in the script.
0,What function is used to render frames in parallel?,Render a video with Blender on GPUs Entrypoint,"The code that gets run locally.
Note that it doesn’t require Blender present to run it.
In order to render in parallel, we use the.mapmethod on therender_framefunction.
This spins up as many workers as are needed—as
many as one for each frame, doing everything in parallel. .map render_frame OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) ""/tmp/render"" @stub.local_entrypoint() def main True # Render the frames in parallel using modal, and write them to disk. for in map range 1 with open f""scene_{idx:03}.png"" {idx:03} ""wb"" as # Stitch together frames into a gif. import from import open for in sorted ""scene*.png"" ""scene.gif"" format ""GIF"" True 200 0 Copy Copy    Copy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypoint Render a video with Blender on GPUs Basic setup Defining the image Setting things up in the containers Use a GPU from a Modal function Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy ",The .map method is used to render frames in parallel.
3,What format are the rendered frames saved in?,Render a video with Blender on GPUs Entrypoint,"The code that gets run locally.
Note that it doesn’t require Blender present to run it.
In order to render in parallel, we use the.mapmethod on therender_framefunction.
This spins up as many workers as are needed—as
many as one for each frame, doing everything in parallel. .map render_frame OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) ""/tmp/render"" @stub.local_entrypoint() def main True # Render the frames in parallel using modal, and write them to disk. for in map range 1 with open f""scene_{idx:03}.png"" {idx:03} ""wb"" as # Stitch together frames into a gif. import from import open for in sorted ""scene*.png"" ""scene.gif"" format ""GIF"" True 200 0 Copy Copy    Copy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypoint Render a video with Blender on GPUs Basic setup Defining the image Setting things up in the containers Use a GPU from a Modal function Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy ",The rendered frames are saved in PNG format.
6,What duration is set for each frame in the GIF?,Render a video with Blender on GPUs Entrypoint,"The code that gets run locally.
Note that it doesn’t require Blender present to run it.
In order to render in parallel, we use the.mapmethod on therender_framefunction.
This spins up as many workers as are needed—as
many as one for each frame, doing everything in parallel. .map render_frame OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) ""/tmp/render"" @stub.local_entrypoint() def main True # Render the frames in parallel using modal, and write them to disk. for in map range 1 with open f""scene_{idx:03}.png"" {idx:03} ""wb"" as # Stitch together frames into a gif. import from import open for in sorted ""scene*.png"" ""scene.gif"" format ""GIF"" True 200 0 Copy Copy    Copy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypoint Render a video with Blender on GPUs Basic setup Defining the image Setting things up in the containers Use a GPU from a Modal function Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy ",Each frame in the GIF is set to have a duration of 200.
0,What software is used to render a video on GPU?,Render a video with Blender on GPUs Entrypoint,"The code that gets run locally.
Note that it doesn’t require Blender present to run it.
In order to render in parallel, we use the.mapmethod on therender_framefunction.
This spins up as many workers as are needed—as
many as one for each frame, doing everything in parallel. .map render_frame OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) ""/tmp/render"" @stub.local_entrypoint() def main True # Render the frames in parallel using modal, and write them to disk. for in map range 1 with open f""scene_{idx:03}.png"" {idx:03} ""wb"" as # Stitch together frames into a gif. import from import open for in sorted ""scene*.png"" ""scene.gif"" format ""GIF"" True 200 0 Copy Copy    Copy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypoint Render a video with Blender on GPUs Basic setup Defining the image Setting things up in the containers Use a GPU from a Modal function Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/blender/blender_video.py $ modal run 06_gpu_and_ml/blender/blender_video.py modal run 06_gpu_and_ml/blender/blender_video.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",Blender is used to render a video on GPU.
3,Where are the rendered frames written to?,Render a video with Blender on GPUs Entrypoint,"The code that gets run locally.
Note that it doesn’t require Blender present to run it.
In order to render in parallel, we use the.mapmethod on therender_framefunction.
This spins up as many workers as are needed—as
many as one for each frame, doing everything in parallel. .map render_frame OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) ""/tmp/render"" @stub.local_entrypoint() def main True # Render the frames in parallel using modal, and write them to disk. for in map range 1 with open f""scene_{idx:03}.png"" {idx:03} ""wb"" as # Stitch together frames into a gif. import from import open for in sorted ""scene*.png"" ""scene.gif"" format ""GIF"" True 200 0 Copy Copy    Copy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypoint Render a video with Blender on GPUs Basic setup Defining the image Setting things up in the containers Use a GPU from a Modal function Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/blender/blender_video.py $ modal run 06_gpu_and_ml/blender/blender_video.py modal run 06_gpu_and_ml/blender/blender_video.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","The rendered frames are written to disk. Specifically in the directory ""/tmp/render""."
6,How do I set up and run the modal example?,Render a video with Blender on GPUs Entrypoint,"The code that gets run locally.
Note that it doesn’t require Blender present to run it.
In order to render in parallel, we use the.mapmethod on therender_framefunction.
This spins up as many workers as are needed—as
many as one for each frame, doing everything in parallel. .map render_frame OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    )Copy OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) OUTPUT_DIR =""/tmp/render""@stub.local_entrypoint()defmain():
    os.makedirs(OUTPUT_DIR, exist_ok=True)# Render the frames in parallel using modal, and write them to disk.foridx, frameinrender_frame.map(range(START_FRAME, END_FRAME +1)):withopen(os.path.join(OUTPUT_DIR,f""scene_{idx:03}.png""),""wb"")asf:
            f.write(frame)# Stitch together frames into a gif.importglobfromPILimportImage

    img, *imgs = [
        Image.open(f)forfinsorted(glob.glob(os.path.join(OUTPUT_DIR,""scene*.png"")))
    ]
    img.save(
        fp=os.path.join(OUTPUT_DIR,""scene.gif""),format=""GIF"",
        append_images=imgs,
        save_all=True,
        duration=200,
        loop=0,
    ) ""/tmp/render"" @stub.local_entrypoint() def main True # Render the frames in parallel using modal, and write them to disk. for in map range 1 with open f""scene_{idx:03}.png"" {idx:03} ""wb"" as # Stitch together frames into a gif. import from import open for in sorted ""scene*.png"" ""scene.gif"" format ""GIF"" True 200 0 Copy Copy    Copy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypointTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Render a video with Blender on GPUsBasic setupDefining the imageSetting things up in the containersUse a GPU from a Modal functionEntrypoint Render a video with Blender on GPUs Basic setup Defining the image Setting things up in the containers Use a GPU from a Modal function Entrypoint Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/blender/blender_video.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/blender/blender_video.py $ modal run 06_gpu_and_ml/blender/blender_video.py modal run 06_gpu_and_ml/blender/blender_video.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","First you need to create a free account, install the Modal Python package, and create an API token. Then, clone the modal-examples repository and run the specific Python file."
0,What can be achieved using Modal's class syntax and the @stub.cls decorator when reusing the same container for multiple inputs?,Container lifecycle functions and parameters,"Since Modalreuses the same container for multiple inputs,
sometimes you might want to run some code exactly once when the container starts
or exits. In addition, you might want to pass some parameters to the startup
function that do not change between invocations (e.g. the name of a model that’s
slow to load). reuses the same container for multiple inputs To accomplish any of these things, you need to use Modal’s class syntax and the@stub.clsdecorator. Specifically, you’ll
need to: @stub.cls @stub.cls Convert your function to a method by making it a member of a class.Decorate the class with@stub.cls(...)with same arguments you previously
had for@stub.function(...).Instead of@stub.functionon the original method, just use@method.Add the correct methods to your class based on your need:__enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container Convert your function to a method by making it a member of a class. Decorate the class with@stub.cls(...)with same arguments you previously
had for@stub.function(...). @stub.cls(...) @stub.function(...) Instead of@stub.functionon the original method, just use@method. @stub.function @method Add the correct methods to your class based on your need:__enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container __enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container __enter__or__aenter__for one-time initialization __enter__ __aenter__ __exit__or__aexit__for one-time cleanup __exit__ __aexit__ __init__for passing parameters to the container __init__ Note that the syntax and behavior for the__(a)enter__and__(a)exit__functions is similar to Pythoncontext managers. Note that the syntax and behavior for the__(a)enter__and__(a)exit__functions is similar to Pythoncontext managers. __(a)enter__ __(a)exit__ context managers ","You can run some code exactly once when the container starts or exits, and pass some parameters to the startup function that do not change between invocations."
3,Which methods do you add to your class for one-time initialization and cleanup?,Container lifecycle functions and parameters,"Since Modalreuses the same container for multiple inputs,
sometimes you might want to run some code exactly once when the container starts
or exits. In addition, you might want to pass some parameters to the startup
function that do not change between invocations (e.g. the name of a model that’s
slow to load). reuses the same container for multiple inputs To accomplish any of these things, you need to use Modal’s class syntax and the@stub.clsdecorator. Specifically, you’ll
need to: @stub.cls @stub.cls Convert your function to a method by making it a member of a class.Decorate the class with@stub.cls(...)with same arguments you previously
had for@stub.function(...).Instead of@stub.functionon the original method, just use@method.Add the correct methods to your class based on your need:__enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container Convert your function to a method by making it a member of a class. Decorate the class with@stub.cls(...)with same arguments you previously
had for@stub.function(...). @stub.cls(...) @stub.function(...) Instead of@stub.functionon the original method, just use@method. @stub.function @method Add the correct methods to your class based on your need:__enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container __enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container __enter__or__aenter__for one-time initialization __enter__ __aenter__ __exit__or__aexit__for one-time cleanup __exit__ __aexit__ __init__for passing parameters to the container __init__ Note that the syntax and behavior for the__(a)enter__and__(a)exit__functions is similar to Pythoncontext managers. Note that the syntax and behavior for the__(a)enter__and__(a)exit__functions is similar to Pythoncontext managers. __(a)enter__ __(a)exit__ context managers ","You would add __enter__ or __aenter__ for one-time initialization, and __exit__ or __aexit__ for one-time cleanup."
6,How are the functions __(a)enter__ and __(a)exit__ similar to certain features in Python?,Container lifecycle functions and parameters,"Since Modalreuses the same container for multiple inputs,
sometimes you might want to run some code exactly once when the container starts
or exits. In addition, you might want to pass some parameters to the startup
function that do not change between invocations (e.g. the name of a model that’s
slow to load). reuses the same container for multiple inputs To accomplish any of these things, you need to use Modal’s class syntax and the@stub.clsdecorator. Specifically, you’ll
need to: @stub.cls @stub.cls Convert your function to a method by making it a member of a class.Decorate the class with@stub.cls(...)with same arguments you previously
had for@stub.function(...).Instead of@stub.functionon the original method, just use@method.Add the correct methods to your class based on your need:__enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container Convert your function to a method by making it a member of a class. Decorate the class with@stub.cls(...)with same arguments you previously
had for@stub.function(...). @stub.cls(...) @stub.function(...) Instead of@stub.functionon the original method, just use@method. @stub.function @method Add the correct methods to your class based on your need:__enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container __enter__or__aenter__for one-time initialization__exit__or__aexit__for one-time cleanup__init__for passing parameters to the container __enter__or__aenter__for one-time initialization __enter__ __aenter__ __exit__or__aexit__for one-time cleanup __exit__ __aexit__ __init__for passing parameters to the container __init__ Note that the syntax and behavior for the__(a)enter__and__(a)exit__functions is similar to Pythoncontext managers. Note that the syntax and behavior for the__(a)enter__and__(a)exit__functions is similar to Pythoncontext managers. __(a)enter__ __(a)exit__ context managers ",The syntax and behavior for the __(a)enter__ and __(a)exit__ functions are similar to Python's context managers.
0,What are the three additional arguments taken by '__exit__' for a context manager?,Container lifecycle functions and parameters exit and aexit,"__exit__ __aexit__ The container exit handler is called when a container is about to exit. Just
like__exit__for a context manager,
this function takes three additional arguments,exc_type,exc_value, andtraceback, that describe the exception that was raised. If the container
exited normally, these values are allNone. __exit__for a context manager __exit__ exc_type exc_value traceback None The exit handler is useful for doing one-time cleanup, such as closing a
database connection or saving intermediate results. The exit handler is also called if the container was stopped due to a user
action, or the app exited due to an exception. in this case, the exception type
will be aKeyboardInterrupt. Note that the exit handler is given a fixed grace
period of 4 minutes to exit. If the function takes longer than that, aSIGKILLis issued to the process. KeyboardInterrupt SIGKILL To use with a synchronous Modal app, make your function a member of a class, and
override__aexit__for the class: __aexit__ frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() from import @stub.cls() class ETLPipeline def __enter__ self import ""DATABASE_URI"" @method() def run self # Run some queries pass def __exit__ self, exc_type, exc_value, traceback @stub.local_entrypoint() async def main Copy Copy    Copy When working with anasynchronous Modalapp, you may use__aexit__instead. asynchronous Modal __aexit__ ","The three additional arguments are 'exc_type', 'exc_value', and 'traceback'."
3,What is the purpose of the exit handler in a container lifecycle?,Container lifecycle functions and parameters exit and aexit,"__exit__ __aexit__ The container exit handler is called when a container is about to exit. Just
like__exit__for a context manager,
this function takes three additional arguments,exc_type,exc_value, andtraceback, that describe the exception that was raised. If the container
exited normally, these values are allNone. __exit__for a context manager __exit__ exc_type exc_value traceback None The exit handler is useful for doing one-time cleanup, such as closing a
database connection or saving intermediate results. The exit handler is also called if the container was stopped due to a user
action, or the app exited due to an exception. in this case, the exception type
will be aKeyboardInterrupt. Note that the exit handler is given a fixed grace
period of 4 minutes to exit. If the function takes longer than that, aSIGKILLis issued to the process. KeyboardInterrupt SIGKILL To use with a synchronous Modal app, make your function a member of a class, and
override__aexit__for the class: __aexit__ frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() from import @stub.cls() class ETLPipeline def __enter__ self import ""DATABASE_URI"" @method() def run self # Run some queries pass def __exit__ self, exc_type, exc_value, traceback @stub.local_entrypoint() async def main Copy Copy    Copy When working with anasynchronous Modalapp, you may use__aexit__instead. asynchronous Modal __aexit__ ","The exit handler is useful for doing one-time cleanup, such as closing a database connection or saving intermediate results."
6,How can '__aexit__' function be used with a synchronous Modal app?,Container lifecycle functions and parameters exit and aexit,"__exit__ __aexit__ The container exit handler is called when a container is about to exit. Just
like__exit__for a context manager,
this function takes three additional arguments,exc_type,exc_value, andtraceback, that describe the exception that was raised. If the container
exited normally, these values are allNone. __exit__for a context manager __exit__ exc_type exc_value traceback None The exit handler is useful for doing one-time cleanup, such as closing a
database connection or saving intermediate results. The exit handler is also called if the container was stopped due to a user
action, or the app exited due to an exception. in this case, the exception type
will be aKeyboardInterrupt. Note that the exit handler is given a fixed grace
period of 4 minutes to exit. If the function takes longer than that, aSIGKILLis issued to the process. KeyboardInterrupt SIGKILL To use with a synchronous Modal app, make your function a member of a class, and
override__aexit__for the class: __aexit__ frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote()Copy frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() frommodalimportStub, method

stub = Stub()@stub.cls()classETLPipeline:def__enter__(self):importpsycopg2
        self.connection = psycopg2.connect(os.environ[""DATABASE_URI""])@method()defrun(self):# Run some queriespassdef__exit__(self, exc_type, exc_value, traceback):
        self.connection.close()@stub.local_entrypoint()asyncdefmain():
    ETLPipeline().run.remote() from import @stub.cls() class ETLPipeline def __enter__ self import ""DATABASE_URI"" @method() def run self # Run some queries pass def __exit__ self, exc_type, exc_value, traceback @stub.local_entrypoint() async def main Copy Copy    Copy When working with anasynchronous Modalapp, you may use__aexit__instead. asynchronous Modal __aexit__ ","To use '__aexit__' with a synchronous Modal app, make your function a member of a class and override '__aexit__' for the class."
0,What is the purpose of the __init__ method in the described context?,Container lifecycle functions and parameters init,"__init__ Imagine this scenario: you want to run different variants of a model based on
some argument (say the size of the model), but still share the same code for all
of these variants. In other words, instead of defining a single Modal function, you want to define
a family of functions parametrized by a set of arguments. To do this, you can define an__init__method on your class that accepts some
arguments and performs the necessary initialization: __init__ frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) from import @stub.cls(gpu=""A100"") gpu=""A100"" ""A100"" class Model def __init__ self, model_name:str, size:int str int None @method() def generate self Copy Copy    Copy Then, you can construct a remote object with the desired parameters, and call
the method on it: @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint() def main ""hedgehog"" 7 ""fox"" 13 Copy Copy    Copy Each variant of the model will behave like an independent Modal function. In
addition, each pool is uniquely identified by a hash of the parameters. This
means that if you constructed aModelwith the same parameters in a different
context, the calls togeneratewould be routed to the same set of containers
as before. Model generate Note that__enter__will still run after__init__, however it is mostly
redundant in this case. If you want to do async one-time initialization, you can
still use__aenter__. __enter__ __init__ __aenter__ ","The __init__ method accepts some arguments and performs the necessary initialization. It's used in the scenario of wanting to run different variants of a model, yet still sharing the same code for all these variants."
3,How can you call a method on a constructed remote object?,Container lifecycle functions and parameters init,"__init__ Imagine this scenario: you want to run different variants of a model based on
some argument (say the size of the model), but still share the same code for all
of these variants. In other words, instead of defining a single Modal function, you want to define
a family of functions parametrized by a set of arguments. To do this, you can define an__init__method on your class that accepts some
arguments and performs the necessary initialization: __init__ frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) from import @stub.cls(gpu=""A100"") gpu=""A100"" ""A100"" class Model def __init__ self, model_name:str, size:int str int None @method() def generate self Copy Copy    Copy Then, you can construct a remote object with the desired parameters, and call
the method on it: @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint() def main ""hedgehog"" 7 ""fox"" 13 Copy Copy    Copy Each variant of the model will behave like an independent Modal function. In
addition, each pool is uniquely identified by a hash of the parameters. This
means that if you constructed aModelwith the same parameters in a different
context, the calls togeneratewould be routed to the same set of containers
as before. Model generate Note that__enter__will still run after__init__, however it is mostly
redundant in this case. If you want to do async one-time initialization, you can
still use__aenter__. __enter__ __init__ __aenter__ ",You can call a method on a constructed remote object with the '.remote' postfix such as m1.generate.remote().
6,What is the role of __enter__ and __aenter__ in this case?,Container lifecycle functions and parameters init,"__init__ Imagine this scenario: you want to run different variants of a model based on
some argument (say the size of the model), but still share the same code for all
of these variants. In other words, instead of defining a single Modal function, you want to define
a family of functions parametrized by a set of arguments. To do this, you can define an__init__method on your class that accepts some
arguments and performs the necessary initialization: __init__ frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...)Copy frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) frommodalimportStub, method

stub = Stub()@stub.cls(gpu=""A100"")classModel():def__init__(self, model_name:str, size:int) ->None:
        self.model = load_model(model_name, size)@method()defgenerate(self):
        self.model.generate(...) from import @stub.cls(gpu=""A100"") gpu=""A100"" ""A100"" class Model def __init__ self, model_name:str, size:int str int None @method() def generate self Copy Copy    Copy Then, you can construct a remote object with the desired parameters, and call
the method on it: @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote()Copy @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint()defmain():
    m1 = Model(""hedgehog"", size=7)
    m1.generate.remote()

    m2 = Model(""fox"", size=13)
    m2.generate.remote() @stub.local_entrypoint() def main ""hedgehog"" 7 ""fox"" 13 Copy Copy    Copy Each variant of the model will behave like an independent Modal function. In
addition, each pool is uniquely identified by a hash of the parameters. This
means that if you constructed aModelwith the same parameters in a different
context, the calls togeneratewould be routed to the same set of containers
as before. Model generate Note that__enter__will still run after__init__, however it is mostly
redundant in this case. If you want to do async one-time initialization, you can
still use__aenter__. __enter__ __init__ __aenter__ ","__enter__ will still run after __init__, however it is mostly redundant in this case. For async one-time initialization, you can use __aenter__."
0,What does the Cls.lookup function do?,Container lifecycle functions and parameters Looking up a parametrized function,"If you want to call your parametrized function from a Python script running
anywhere, you can useCls.lookup: Cls.lookup frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() from import ""cls-stub"" ""Model"" # returns a class-like object ""snake"" 12 Copy Copy    Copy Web endpoints for parametrized functions is not supported at this point. Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters __enter__ and __aenter__ __exit__ and __aexit__ __init__ Looking up a parametrized function CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","This function is used to call a parametrized function from a Python script, essentially retrieving a specified class-like object."
3,What is used to start the kit in the underlying code?,Container lifecycle functions and parameters Looking up a parametrized function,"If you want to call your parametrized function from a Python script running
anywhere, you can useCls.lookup: Cls.lookup frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() from import ""cls-stub"" ""Model"" # returns a class-like object ""snake"" 12 Copy Copy    Copy Web endpoints for parametrized functions is not supported at this point. Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters __enter__ and __aenter__ __exit__ and __aexit__ __init__ Looking up a parametrized function CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The function `kit.start(app, element, {node_ids: [0, 3, 5, 26], data, form: null, error: null});` is used to start the kit."
6,Who owns the copyright to the document or code?,Container lifecycle functions and parameters Looking up a parametrized function,"If you want to call your parametrized function from a Python script running
anywhere, you can useCls.lookup: Cls.lookup frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() from import ""cls-stub"" ""Model"" # returns a class-like object ""snake"" 12 Copy Copy    Copy Web endpoints for parametrized functions is not supported at this point. Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters __enter__ and __aenter__ __exit__ and __aexit__ __init__ Looking up a parametrized function CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright belongs to Modal Labs, Inc., as noted at the bottom of the content: ""© 2023 Modal Labs, Inc."""
0,What is the function Cls.lookup used for in a Python script?,Container lifecycle functions and parameters Looking up a parametrized function,"If you want to call your parametrized function from a Python script running
anywhere, you can useCls.lookup: Cls.lookup frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() from import ""cls-stub"" ""Model"" # returns a class-like object ""snake"" 12 Copy Copy    Copy Web endpoints for parametrized functions is not supported at this point. Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters __enter__ and __aenter__ __exit__ and __aexit__ __init__ Looking up a parametrized function CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The Cls.lookup function is used to call a parameterized function from a Python script running anywhere.
3,How does one generate a remote model in the provided script?,Container lifecycle functions and parameters Looking up a parametrized function,"If you want to call your parametrized function from a Python script running
anywhere, you can useCls.lookup: Cls.lookup frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() from import ""cls-stub"" ""Model"" # returns a class-like object ""snake"" 12 Copy Copy    Copy Web endpoints for parametrized functions is not supported at this point. Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters __enter__ and __aenter__ __exit__ and __aexit__ __init__ Looking up a parametrized function CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In the provided script, a remote model can be generated using the command 'm.generate.remote()'."
6,"What company is associated with this script, based on the copyright notice?",Container lifecycle functions and parameters Looking up a parametrized function,"If you want to call your parametrized function from a Python script running
anywhere, you can useCls.lookup: Cls.lookup frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote()Copy frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() frommodalimportCls

Model = Cls.lookup(""cls-stub"",""Model"")# returns a class-like objectm = Model(""snake"", size=12)
m.generate.remote() from import ""cls-stub"" ""Model"" # returns a class-like object ""snake"" 12 Copy Copy    Copy Web endpoints for parametrized functions is not supported at this point. Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters__enter__ and __aenter____exit__ and __aexit____init__Looking up a parametrized function Container lifecycle functions and parameters __enter__ and __aenter__ __exit__ and __aexit__ __init__ Looking up a parametrized function CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The company associated with this script, based on the copyright notice, is Modal Labs, Inc."
0,What is the modal volume command used for?,modal volume,"modal volume [Beta] Read and editmodal.Volumevolumes. modal.Volume This command is in preview and may change in the future. Previous users ofmodal.NetworkFileSystemshould replace their usage with
themodal nfscommand instead. modal.NetworkFileSystem modal nfs Usage: Usage modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]... modal volume [OPTIONS] COMMAND [ARGS]... modal volume [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named, persistent modal.Volume.get: Download files from a modal.Volume.ls: List files and directories in a modal.Volume volume.put: Upload a file or directory to a volume. create: Create a named, persistent modal.Volume. create get: Download files from a modal.Volume. get ls: List files and directories in a modal.Volume volume. ls put: Upload a file or directory to a volume. put ","It can be used to create a named, persistent modal volume."
3,What is the function of 'modal.Volume.get' command?,modal volume,"modal volume [Beta] Read and editmodal.Volumevolumes. modal.Volume This command is in preview and may change in the future. Previous users ofmodal.NetworkFileSystemshould replace their usage with
themodal nfscommand instead. modal.NetworkFileSystem modal nfs Usage: Usage modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]... modal volume [OPTIONS] COMMAND [ARGS]... modal volume [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named, persistent modal.Volume.get: Download files from a modal.Volume.ls: List files and directories in a modal.Volume volume.put: Upload a file or directory to a volume. create: Create a named, persistent modal.Volume. create get: Download files from a modal.Volume. get ls: List files and directories in a modal.Volume volume. ls put: Upload a file or directory to a volume. put ",This command is used to download files from a modal volume.
6,What is the purpose of 'modal.Volume.ls' command?,modal volume,"modal volume [Beta] Read and editmodal.Volumevolumes. modal.Volume This command is in preview and may change in the future. Previous users ofmodal.NetworkFileSystemshould replace their usage with
themodal nfscommand instead. modal.NetworkFileSystem modal nfs Usage: Usage modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]...Copy modal volume [OPTIONS] COMMAND [ARGS]... modal volume [OPTIONS] COMMAND [ARGS]... modal volume [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a named, persistent modal.Volume.get: Download files from a modal.Volume.ls: List files and directories in a modal.Volume volume.put: Upload a file or directory to a volume. create: Create a named, persistent modal.Volume. create get: Download files from a modal.Volume. get ls: List files and directories in a modal.Volume volume. ls put: Upload a file or directory to a volume. put ",It is used to list files and directories in a modal volume.
0,What command allows you to download files from a modal.Volume with a specific pattern? ,modal volume modal volume get,"modal volume get Download files from a modal.Volume. Specifying a glob pattern (using any*or**patterns) as theremote_pathwill download all matchingfiles, preserving
the source directory structure for the matched files. * ** remote_path files Example Example modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume ""**"" Copy Copy    Copy Use ”-” (a hyphen) as LOCAL_DESTINATION to write contents of file to stdout (only for non-glob paths). Usage: Usage modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required][LOCAL_DESTINATION]: [default: .] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH [LOCAL_DESTINATION]: [default: .] [LOCAL_DESTINATION] Options: Options --force / --no-force: [default: no-force]--env TEXT: Environment to interact with. --force / --no-force: [default: no-force] --force / --no-force --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The command ""modal volume get <volume-name>"" with a specified glob pattern like ""*"" or ""**"" in the remote_path will download all matching files."
3,"What is the default value for LOCAL_DESTINATION in the ""modal volume get"" command?",modal volume modal volume get,"modal volume get Download files from a modal.Volume. Specifying a glob pattern (using any*or**patterns) as theremote_pathwill download all matchingfiles, preserving
the source directory structure for the matched files. * ** remote_path files Example Example modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume ""**"" Copy Copy    Copy Use ”-” (a hyphen) as LOCAL_DESTINATION to write contents of file to stdout (only for non-glob paths). Usage: Usage modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required][LOCAL_DESTINATION]: [default: .] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH [LOCAL_DESTINATION]: [default: .] [LOCAL_DESTINATION] Options: Options --force / --no-force: [default: no-force]--env TEXT: Environment to interact with. --force / --no-force: [default: no-force] --force / --no-force --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","The default value for LOCAL_DESTINATION in the ""modal volume get"" command is "".""."
6,What happens if the workspace has multiple environments and none is specified with the --env TEXT command?,modal volume modal volume get,"modal volume get Download files from a modal.Volume. Specifying a glob pattern (using any*or**patterns) as theremote_pathwill download all matchingfiles, preserving
the source directory structure for the matched files. * ** remote_path files Example Example modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volumeCopy modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume modal volume get <volume-name> logs/april-12-1.txt .
modal volume get <volume-name>""**""dump_volume ""**"" Copy Copy    Copy Use ”-” (a hyphen) as LOCAL_DESTINATION to write contents of file to stdout (only for non-glob paths). Usage: Usage modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION]Copy modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] modal volume get [OPTIONS] VOLUME_NAME REMOTE_PATH [LOCAL_DESTINATION] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]REMOTE_PATH: [required][LOCAL_DESTINATION]: [default: .] VOLUME_NAME: [required] VOLUME_NAME REMOTE_PATH: [required] REMOTE_PATH [LOCAL_DESTINATION]: [default: .] [LOCAL_DESTINATION] Options: Options --force / --no-force: [default: no-force]--env TEXT: Environment to interact with. --force / --no-force: [default: no-force] --force / --no-force --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","If the workspace has multiple environments and none is specified with the --env TEXT command, an error is raised."
0,What is the purpose of the command modal volume ls?,modal volume modal volume ls,"modal volume ls List files and directories in a modal.Volume volume. Usage: Usage modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH] modal volume ls [OPTIONS] VOLUME_NAME [PATH] modal volume ls [OPTIONS] VOLUME_NAME [PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required][PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME [PATH]: [default: /] [PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ",The purpose of the command modal volume ls is to list files and directories in a modal volume. 
3,What happens if the --env TEXT option is not specified for the command modal volume ls?,modal volume modal volume ls,"modal volume ls List files and directories in a modal.Volume volume. Usage: Usage modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH] modal volume ls [OPTIONS] VOLUME_NAME [PATH] modal volume ls [OPTIONS] VOLUME_NAME [PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required][PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME [PATH]: [default: /] [PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ","If the --env TEXT option is not specified, Modal will use the default environment of your current profile, or the MODAL_ENVIRONMENT variable. It raises an error if the workspace has multiple environments."
6,What is the default value for the argument [PATH] in the command modal volume ls?,modal volume modal volume ls,"modal volume ls List files and directories in a modal.Volume volume. Usage: Usage modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH]Copy modal volume ls [OPTIONS] VOLUME_NAME [PATH] modal volume ls [OPTIONS] VOLUME_NAME [PATH] modal volume ls [OPTIONS] VOLUME_NAME [PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required][PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME [PATH]: [default: /] [PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help ",The default value for the argument [PATH] in the command modal volume ls is '/'.
0,"What is the purpose of the ""modal volume put"" command?",modal volume modal volume put,"modal volume put Upload a file or directory to a volume. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volume modal volume create modal volume get modal volume ls modal volume put CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""modal volume put"" command is used to upload a file or directory to a volume. If needed, remote parent directories will be created. "
3,What does the --env TEXT option do?,modal volume modal volume put,"modal volume put Upload a file or directory to a volume. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volume modal volume create modal volume get modal volume ls modal volume put CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The --env TEXT option specifies the environment to interact with. If it is not specified, Modal will use the default environment of the current profile, or the MODAL_ENVIRONMENT variable."
6,Whose copyright is on the document?,modal volume modal volume put,"modal volume put Upload a file or directory to a volume. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volume modal volume create modal volume get modal volume ls modal volume put CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The document is copyrighted by Modal Labs, Inc."
0,"What is the function of ""modal volume put"" command?",modal volume modal volume put,"modal volume put Upload a file or directory to a volume. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volume modal volume create modal volume get modal volume ls modal volume put CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""modal volume put"" command is used to upload a file or directory to a volume. "
3,"What is the role of ""--env TEXT"" option in this context?",modal volume modal volume put,"modal volume put Upload a file or directory to a volume. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volume modal volume create modal volume get modal volume ls modal volume put CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""--env TEXT"" option is used to specify the environment to interact with. If not specified, Modal will use the default environment of the user's current profile, or the MODAL_ENVIRONMENT variable."
6,"What is expected to be the function of the ""--help"" option in this context?",modal volume modal volume put,"modal volume put Upload a file or directory to a volume. Remote parent directories will be created as needed. Ending the REMOTE_PATH with a forward slash (/), it’s assumed to be a directory and the file will be uploaded with its current name under that directory. Usage: Usage modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH]Copy modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] modal volume put [OPTIONS] VOLUME_NAME LOCAL_PATH [REMOTE_PATH] Copy Copy    Copy Arguments: Arguments VOLUME_NAME: [required]LOCAL_PATH: [required][REMOTE_PATH]: [default: /] VOLUME_NAME: [required] VOLUME_NAME LOCAL_PATH: [required] LOCAL_PATH [REMOTE_PATH]: [default: /] [REMOTE_PATH] Options: Options --env TEXT: Environment to interact with. --env TEXT: Environment to interact with. --env TEXT If not specified, Modal will use the default environment of your current profile, or theMODAL_ENVIRONMENTvariable.
Otherwise, raises an error if the workspace has multiple environments. MODAL_ENVIRONMENT --help: Show this message and exit. --help: Show this message and exit. --help modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volumemodal volume createmodal volume getmodal volume lsmodal volume put modal volume modal volume create modal volume get modal volume ls modal volume put CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""--help"" option is expected to show a help message and exit the running process."
0,What happens when there is an issue connecting to the Modal servers?,modalexception modalexceptionConnectionError,classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) class ConnectionError Copy Copy    Copy Raised when an issue occurs while connecting to the Modal servers. ,A ConnectionError is raised.
1,What is a ConnectionError?,modalexception modalexceptionConnectionError,classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) class ConnectionError Copy Copy    Copy Raised when an issue occurs while connecting to the Modal servers. ,A ConnectionError is an error class raised when an issue occurs while connecting to the Modal servers.
2,What class does a ConnectionError belong to?,modalexception modalexceptionConnectionError,classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) class ConnectionError Copy Copy    Copy Raised when an issue occurs while connecting to the Modal servers. ,The ConnectionError belongs to the modal.exception.Error class.
3,When is a ConnectionError error raised?,modalexception modalexceptionConnectionError,classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) class ConnectionError Copy Copy    Copy Raised when an issue occurs while connecting to the Modal servers. ,A ConnectionError is raised when an issue occurs while connecting to the Modal servers.
4,What causes a ConnectionError in the modal program?,modalexception modalexceptionConnectionError,classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error)Copy classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) classConnectionError(modal.exception.Error) class ConnectionError Copy Copy    Copy Raised when an issue occurs while connecting to the Modal servers. ,An issue occurring while connecting to the Modal servers causes a ConnectionError.
0,What is the meaning of a DeprecationError?,modalexception modalexceptionDeprecationError,classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning) classDeprecationError(UserWarning) classDeprecationError(UserWarning) class DeprecationError UserWarning Copy Copy    Copy UserWarning category emitted when a deprecated Modal feature or API is used. ,It's a type of user warning category emitted when a deprecated Modal feature or API is used.
3,What kind of system warning is a DeprecationError considered?,modalexception modalexceptionDeprecationError,classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning) classDeprecationError(UserWarning) classDeprecationError(UserWarning) class DeprecationError UserWarning Copy Copy    Copy UserWarning category emitted when a deprecated Modal feature or API is used. ,DeprecationError is considered a UserWarning.
6,What kind of error results from utilizing a deprecated Modal feature?,modalexception modalexceptionDeprecationError,classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning)Copy classDeprecationError(UserWarning) classDeprecationError(UserWarning) classDeprecationError(UserWarning) class DeprecationError UserWarning Copy Copy    Copy UserWarning category emitted when a deprecated Modal feature or API is used. ,It results in a DeprecationError.
0,What does FunctionTimeoutError indicate?,modalexception modalexceptionFunctionTimeoutError,classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError) classFunctionTimeoutError(modal.exception.TimeoutError) classFunctionTimeoutError(modal.exception.TimeoutError) class FunctionTimeoutError Copy Copy    Copy Raised when a Function exceeds its execution duration limit and times out. ,It is raised when a Function exceeds its execution duration limit and times out. 
3,What is the outcome if a function times out?,modalexception modalexceptionFunctionTimeoutError,classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError) classFunctionTimeoutError(modal.exception.TimeoutError) classFunctionTimeoutError(modal.exception.TimeoutError) class FunctionTimeoutError Copy Copy    Copy Raised when a Function exceeds its execution duration limit and times out. ,FunctionTimeoutError is raised.
6,What type of error might you encounter when your program runs longer than intended?,modalexception modalexceptionFunctionTimeoutError,classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError)Copy classFunctionTimeoutError(modal.exception.TimeoutError) classFunctionTimeoutError(modal.exception.TimeoutError) classFunctionTimeoutError(modal.exception.TimeoutError) class FunctionTimeoutError Copy Copy    Copy Raised when a Function exceeds its execution duration limit and times out. ,You might encounter a FunctionTimeoutError.
0,What does the InvalidError class do?,modalexception modalexceptionInvalidError,classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error) classInvalidError(modal.exception.Error) classInvalidError(modal.exception.Error) class InvalidError Copy Copy    Copy Raised when user does something invalid. ,It is raised when a user does something invalid.
3,What function does the InvalidError class serve in a program?,modalexception modalexceptionInvalidError,classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error) classInvalidError(modal.exception.Error) classInvalidError(modal.exception.Error) class InvalidError Copy Copy    Copy Raised when user does something invalid. ,The InvalidError class signals when a user has done something invalid in a program.
6,What is the role of the InvalidError class?,modalexception modalexceptionInvalidError,classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error)Copy classInvalidError(modal.exception.Error) classInvalidError(modal.exception.Error) classInvalidError(modal.exception.Error) class InvalidError Copy Copy    Copy Raised when user does something invalid. ,The role of the InvalidError class is to flag when a user does something invalid.
0,What is a MountUploadTimeoutError? ,modalexception modalexceptionMountUploadTimeoutError,classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError) classMountUploadTimeoutError(modal.exception.TimeoutError) classMountUploadTimeoutError(modal.exception.TimeoutError) class MountUploadTimeoutError Copy Copy    Copy Raised when a Mount upload times out. ,It is an error raised when a Mount upload times out.
3,Where would you commonly see a MountUploadTimeoutError?,modalexception modalexceptionMountUploadTimeoutError,classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError) classMountUploadTimeoutError(modal.exception.TimeoutError) classMountUploadTimeoutError(modal.exception.TimeoutError) class MountUploadTimeoutError Copy Copy    Copy Raised when a Mount upload times out. ,You would commonly see a MountUploadTimeoutError in problems related to file uploading on a mount.
6,What is the underlying cause of MountUploadTimeoutError?,modalexception modalexceptionMountUploadTimeoutError,classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError)Copy classMountUploadTimeoutError(modal.exception.TimeoutError) classMountUploadTimeoutError(modal.exception.TimeoutError) classMountUploadTimeoutError(modal.exception.TimeoutError) class MountUploadTimeoutError Copy Copy    Copy Raised when a Mount upload times out. ,The underlying cause of MountUploadTimeoutError is when the upload process to a mount takes longer than the designated time limit.
0,What does a NotFoundError indicate?,modalexception modalexceptionNotFoundError,classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error) classNotFoundError(modal.exception.Error) classNotFoundError(modal.exception.Error) class NotFoundError Copy Copy    Copy Raised when a requested resource was not found. ,It indicates that a requested resource was not found.
3,What kind of information does a NotFoundError provide?,modalexception modalexceptionNotFoundError,classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error) classNotFoundError(modal.exception.Error) classNotFoundError(modal.exception.Error) class NotFoundError Copy Copy    Copy Raised when a requested resource was not found. ,A NotFoundError provides information that a requested resource was not found.
6,What does 'modal.exception' in 'modal.exception.NotFoundError' refer to?,modalexception modalexceptionNotFoundError,classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error)Copy classNotFoundError(modal.exception.Error) classNotFoundError(modal.exception.Error) classNotFoundError(modal.exception.Error) class NotFoundError Copy Copy    Copy Raised when a requested resource was not found. ,'modal.exception' refers to the namespace or module in which the 'NotFoundError' is defined.
0,What does the term 'PendingDeprecationError' denote?,modalexception modalexceptionPendingDeprecationError,classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) class PendingDeprecationError UserWarning Copy Copy    Copy Soon to be deprecated feature. Only used intermittently because of multi-repo concerns. ,It denotes a feature that is soon to be deprecated.
1,What does the user warning class allude to?,modalexception modalexceptionPendingDeprecationError,classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) class PendingDeprecationError UserWarning Copy Copy    Copy Soon to be deprecated feature. Only used intermittently because of multi-repo concerns. ,The UserWarning class alludes to a feature that is only used intermittently because of multi-repo concerns.
2,How would you define 'deprecated' in terms of software features?,modalexception modalexceptionPendingDeprecationError,classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) class PendingDeprecationError UserWarning Copy Copy    Copy Soon to be deprecated feature. Only used intermittently because of multi-repo concerns. ,"In terms of software features, 'deprecated' means it is a feature that is not advised to be used as it might not exist in future versions."
3,What is the reason given for the intermittent use of a certain feature?,modalexception modalexceptionPendingDeprecationError,classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) class PendingDeprecationError UserWarning Copy Copy    Copy Soon to be deprecated feature. Only used intermittently because of multi-repo concerns. ,The given reason is because of multi-repo concerns.
4,What does 'multi-repo concerns' refer to in this context?,modalexception modalexceptionPendingDeprecationError,classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning)Copy classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) classPendingDeprecationError(UserWarning) class PendingDeprecationError UserWarning Copy Copy    Copy Soon to be deprecated feature. Only used intermittently because of multi-repo concerns. ,"In this context, 'multi-repo concerns' refers to concerns involving multiple repositories."
0,What is the class RemoteError associated with?,modalexception modalexceptionRemoteError,classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error) classRemoteError(modal.exception.Error) classRemoteError(modal.exception.Error) class RemoteError Copy Copy    Copy Raised when an error occurs on the Modal server. ,The class RemoteError is associated with errors that occur on the Modal server.
3,What are the common causes for class RemoteError?,modalexception modalexceptionRemoteError,classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error) classRemoteError(modal.exception.Error) classRemoteError(modal.exception.Error) class RemoteError Copy Copy    Copy Raised when an error occurs on the Modal server. ,The common cause for a class RemoteError is an error that happens on the Modal Server.
6,What kind of error is represented by the class RemoteError?,modalexception modalexceptionRemoteError,classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error)Copy classRemoteError(modal.exception.Error) classRemoteError(modal.exception.Error) classRemoteError(modal.exception.Error) class RemoteError Copy Copy    Copy Raised when an error occurs on the Modal server. ,The class RemoteError represents an error that happens on the Modal server.
0,What is a SandboxTerminatedError?,modalexception modalexceptionSandboxTerminatedError,classSandboxTerminatedError(modal.exception.Error)Copy classSandboxTerminatedError(modal.exception.Error)Copy classSandboxTerminatedError(modal.exception.Error)Copy classSandboxTerminatedError(modal.exception.Error) classSandboxTerminatedError(modal.exception.Error) classSandboxTerminatedError(modal.exception.Error) class SandboxTerminatedError Copy Copy    Copy Raised when a Sandbox is terminated for an internal reason. ,A SandboxTerminatedError is raised when a Sandbox is terminated for an internal reason.
0,What does SandboxTimeoutError indicate?,modalexception modalexceptionSandboxTimeoutError,classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError) classSandboxTimeoutError(modal.exception.TimeoutError) classSandboxTimeoutError(modal.exception.TimeoutError) class SandboxTimeoutError Copy Copy    Copy Raised when a Sandbox exceeds its execution duration limit and times out. ,It indicates that a Sandbox has exceeded its execution duration limit and has times out.
3,What is the execution duration limit referred to in the context of a SandboxTimeoutError?,modalexception modalexceptionSandboxTimeoutError,classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError) classSandboxTimeoutError(modal.exception.TimeoutError) classSandboxTimeoutError(modal.exception.TimeoutError) class SandboxTimeoutError Copy Copy    Copy Raised when a Sandbox exceeds its execution duration limit and times out. ,It refers to the maximum time a Sandbox is allowed to complete its task before it times out.
6,What is the result of a Sandbox reaching its execution duration limit?,modalexception modalexceptionSandboxTimeoutError,classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError)Copy classSandboxTimeoutError(modal.exception.TimeoutError) classSandboxTimeoutError(modal.exception.TimeoutError) classSandboxTimeoutError(modal.exception.TimeoutError) class SandboxTimeoutError Copy Copy    Copy Raised when a Sandbox exceeds its execution duration limit and times out. ,"When a Sandbox reaches its execution duration limit, a SandboxTimeoutError is raised."
0,"What kind of error is a ""classTimeoutError""?",modalexception modalexceptionTimeoutError,classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error) classTimeoutError(modal.exception.Error) classTimeoutError(modal.exception.Error) class TimeoutError Copy Copy    Copy Base class for Modal timeouts. ,A classTimeoutError is a Base class for Modal timeouts. 
3,What could possibly cause a classTimeoutError?,modalexception modalexceptionTimeoutError,classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error) classTimeoutError(modal.exception.Error) classTimeoutError(modal.exception.Error) class TimeoutError Copy Copy    Copy Base class for Modal timeouts. ,A classTimeoutError could be caused due to a timeout in Modal.
6,What is the category of the classTimeoutError?,modalexception modalexceptionTimeoutError,classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error)Copy classTimeoutError(modal.exception.Error) classTimeoutError(modal.exception.Error) classTimeoutError(modal.exception.Error) class TimeoutError Copy Copy    Copy Base class for Modal timeouts. ,The category of classTimeoutError is TimeoutError.
0,What does the VersionError indicate?,modalexception modalexceptionVersionError,classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error) classVersionError(modal.exception.Error) classVersionError(modal.exception.Error) class VersionError Copy Copy    Copy Raised when the current client version of Modal is unsupported. ,It indicates that the current client version of Modal is unsupported.
3,Who raises the VersionError?,modalexception modalexceptionVersionError,classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error) classVersionError(modal.exception.Error) classVersionError(modal.exception.Error) class VersionError Copy Copy    Copy Raised when the current client version of Modal is unsupported. ,The VersionError is raised by the system.
6,Is the VersionError a system generated error?,modalexception modalexceptionVersionError,classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error)Copy classVersionError(modal.exception.Error) classVersionError(modal.exception.Error) classVersionError(modal.exception.Error) class VersionError Copy Copy    Copy Raised when the current client version of Modal is unsupported. ,"Yes, the VersionError is a system generated error."
0,What is the function of the 'deprecation_error'?,modalexception modalexceptiondeprecationerror,"defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str): defdeprecation_error(deprecated_on: date, msg:str): defdeprecation_error(deprecated_on: date, msg:str): def deprecation_error deprecated_on: date, msg:str str Copy Copy    Copy ","The function 'deprecation_error' likely marks certain features or functions as deprecated, which means they are obsolete and no longer recommended for use."
3,What are the parameters of the 'deprecation_error' function?,modalexception modalexceptiondeprecationerror,"defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str): defdeprecation_error(deprecated_on: date, msg:str): defdeprecation_error(deprecated_on: date, msg:str): def deprecation_error deprecated_on: date, msg:str str Copy Copy    Copy ","The parameters of the 'deprecation_error' function are 'deprecated_on', which refers to the date when the feature or function was marked as deprecated, and 'msg', likely a message about the deprecation."
6,What could the 'msg: str' parameter in the 'deprecation_error' function be used for?,modalexception modalexceptiondeprecationerror,"defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str):Copy defdeprecation_error(deprecated_on: date, msg:str): defdeprecation_error(deprecated_on: date, msg:str): defdeprecation_error(deprecated_on: date, msg:str): def deprecation_error deprecated_on: date, msg:str str Copy Copy    Copy ",The 'msg: str' parameter in the 'deprecation_error' function could be used to provide a message or explanation about the deprecation.
0,What is defdeprecation_warning used for?,modalexception modalexceptiondeprecationwarning,"defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): def deprecation_warning deprecated_on: date, msg:str, pending=False str False Copy Copy    Copy Utility for getting the proper stack entry. See the implementation of the built-inwarnings.warn. warnings.warn ",It is used for getting the proper stack entry. 
1,What does defdeprecation_warning depend on for its operation?,modalexception modalexceptiondeprecationwarning,"defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): def deprecation_warning deprecated_on: date, msg:str, pending=False str False Copy Copy    Copy Utility for getting the proper stack entry. See the implementation of the built-inwarnings.warn. warnings.warn ",It depends on the implementation of the built-in warnings.warn. 
2,Can defdeprecation_warning operate independently?,modalexception modalexceptiondeprecationwarning,"defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): def deprecation_warning deprecated_on: date, msg:str, pending=False str False Copy Copy    Copy Utility for getting the proper stack entry. See the implementation of the built-inwarnings.warn. warnings.warn ","No, it depends on the implementation of the built-in warnings.warn. "
3,What does defdeprecation_warning require as input parameters?,modalexception modalexceptiondeprecationwarning,"defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): def deprecation_warning deprecated_on: date, msg:str, pending=False str False Copy Copy    Copy Utility for getting the proper stack entry. See the implementation of the built-inwarnings.warn. warnings.warn ","It requires deprecated_on (a date), msg (a string), and pending (a boolean)."
4,What is the return type of defdeprecation_warning?,modalexception modalexceptiondeprecationwarning,"defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False):Copy defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): defdeprecation_warning(deprecated_on: date, msg:str, pending=False): def deprecation_warning deprecated_on: date, msg:str, pending=False str False Copy Copy    Copy Utility for getting the proper stack entry. See the implementation of the built-inwarnings.warn. warnings.warn ",It returns a string.
0,What function is used to simulate a preemption interrupt?,modalexception modalexceptionsimulatepreemption,"defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): def simulate_preemption wait_seconds:int, jitter_seconds:int=0 int int 0 Copy Copy    Copy Utility for simulating a preemption interrupt afterwait_secondsseconds.
The first interrupt is the SIGINT/SIGTERM signal. After 30 seconds a second
interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught.
Optionally add between zero andjitter_secondsseconds of additional waiting before first interrupt. wait_seconds jitter_seconds Usage: Usage: importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise import from import 3 try 4 except print ""got preempted"" # Handle interrupt raise Copy Copy    Copy Seehttps://modal.com/docs/guide/preemptionfor more details on preemption
handling. https://modal.com/docs/guide/preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exception modal.exception.AuthError modal.exception.ConnectionError modal.exception.DeprecationError modal.exception.ExecutionError modal.exception.FunctionTimeoutError modal.exception.InvalidError modal.exception.MountUploadTimeoutError modal.exception.NotFoundError modal.exception.PendingDeprecationError modal.exception.RemoteError modal.exception.SandboxTerminatedError modal.exception.SandboxTimeoutError modal.exception.TimeoutError modal.exception.VersionError modal.exception.deprecation_error modal.exception.deprecation_warning modal.exception.simulate_preemption CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",simulate_preemption function
3,What signal does the first interrupt simulate?,modalexception modalexceptionsimulatepreemption,"defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): def simulate_preemption wait_seconds:int, jitter_seconds:int=0 int int 0 Copy Copy    Copy Utility for simulating a preemption interrupt afterwait_secondsseconds.
The first interrupt is the SIGINT/SIGTERM signal. After 30 seconds a second
interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught.
Optionally add between zero andjitter_secondsseconds of additional waiting before first interrupt. wait_seconds jitter_seconds Usage: Usage: importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise import from import 3 try 4 except print ""got preempted"" # Handle interrupt raise Copy Copy    Copy Seehttps://modal.com/docs/guide/preemptionfor more details on preemption
handling. https://modal.com/docs/guide/preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exception modal.exception.AuthError modal.exception.ConnectionError modal.exception.DeprecationError modal.exception.ExecutionError modal.exception.FunctionTimeoutError modal.exception.InvalidError modal.exception.MountUploadTimeoutError modal.exception.NotFoundError modal.exception.PendingDeprecationError modal.exception.RemoteError modal.exception.SandboxTerminatedError modal.exception.SandboxTimeoutError modal.exception.TimeoutError modal.exception.VersionError modal.exception.deprecation_error modal.exception.deprecation_warning modal.exception.simulate_preemption CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The first interrupt simulates SIGINT/SIGTERM signal 
6,What should you do to add additional waiting time before the first interrupt?,modalexception modalexceptionsimulatepreemption,"defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): def simulate_preemption wait_seconds:int, jitter_seconds:int=0 int int 0 Copy Copy    Copy Utility for simulating a preemption interrupt afterwait_secondsseconds.
The first interrupt is the SIGINT/SIGTERM signal. After 30 seconds a second
interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught.
Optionally add between zero andjitter_secondsseconds of additional waiting before first interrupt. wait_seconds jitter_seconds Usage: Usage: importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise import from import 3 try 4 except print ""got preempted"" # Handle interrupt raise Copy Copy    Copy Seehttps://modal.com/docs/guide/preemptionfor more details on preemption
handling. https://modal.com/docs/guide/preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exception modal.exception.AuthError modal.exception.ConnectionError modal.exception.DeprecationError modal.exception.ExecutionError modal.exception.FunctionTimeoutError modal.exception.InvalidError modal.exception.MountUploadTimeoutError modal.exception.NotFoundError modal.exception.PendingDeprecationError modal.exception.RemoteError modal.exception.SandboxTerminatedError modal.exception.SandboxTimeoutError modal.exception.TimeoutError modal.exception.VersionError modal.exception.deprecation_error modal.exception.deprecation_warning modal.exception.simulate_preemption CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",You can add between zero and jitter_seconds of additional waiting before the first interrupt.
0,What does simulate_preemption do in the context of the Modal Exceptions?,modalexception modalexceptionsimulatepreemption,"defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): def simulate_preemption wait_seconds:int, jitter_seconds:int=0 int int 0 Copy Copy    Copy Utility for simulating a preemption interrupt afterwait_secondsseconds.
The first interrupt is the SIGINT/SIGTERM signal. After 30 seconds a second
interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught.
Optionally add between zero andjitter_secondsseconds of additional waiting before first interrupt. wait_seconds jitter_seconds Usage: Usage: importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise import from import 3 try 4 except print ""got preempted"" # Handle interrupt raise Copy Copy    Copy Seehttps://modal.com/docs/guide/preemptionfor more details on preemption
handling. https://modal.com/docs/guide/preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exception modal.exception.AuthError modal.exception.ConnectionError modal.exception.DeprecationError modal.exception.ExecutionError modal.exception.FunctionTimeoutError modal.exception.InvalidError modal.exception.MountUploadTimeoutError modal.exception.NotFoundError modal.exception.PendingDeprecationError modal.exception.RemoteError modal.exception.SandboxTerminatedError modal.exception.SandboxTimeoutError modal.exception.TimeoutError modal.exception.VersionError modal.exception.deprecation_error modal.exception.deprecation_warning modal.exception.simulate_preemption CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","It's a utility for simulating a preemption interrupt after a specified number of seconds. It first triggers the SIGINT/SIGTERM signal, then after 30 seconds a second interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught."
3,"What happens after the code `simulate_preemption(3) try: time.sleep(4) except KeyboardInterrupt:print(""got preempted"")` is executed?",modalexception modalexceptionsimulatepreemption,"defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): def simulate_preemption wait_seconds:int, jitter_seconds:int=0 int int 0 Copy Copy    Copy Utility for simulating a preemption interrupt afterwait_secondsseconds.
The first interrupt is the SIGINT/SIGTERM signal. After 30 seconds a second
interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught.
Optionally add between zero andjitter_secondsseconds of additional waiting before first interrupt. wait_seconds jitter_seconds Usage: Usage: importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise import from import 3 try 4 except print ""got preempted"" # Handle interrupt raise Copy Copy    Copy Seehttps://modal.com/docs/guide/preemptionfor more details on preemption
handling. https://modal.com/docs/guide/preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exception modal.exception.AuthError modal.exception.ConnectionError modal.exception.DeprecationError modal.exception.ExecutionError modal.exception.FunctionTimeoutError modal.exception.InvalidError modal.exception.MountUploadTimeoutError modal.exception.NotFoundError modal.exception.PendingDeprecationError modal.exception.RemoteError modal.exception.SandboxTerminatedError modal.exception.SandboxTimeoutError modal.exception.TimeoutError modal.exception.VersionError modal.exception.deprecation_error modal.exception.deprecation_warning modal.exception.simulate_preemption CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","After the execution, the SIGINT/SIGTERM signal is triggered and if the process is not completed within the given time then a KeyboardInterrupt is raised and it prints ""got preempted""."
6,"Who owns Modal Labs, Inc.?",modalexception modalexceptionsimulatepreemption,"defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0):Copy defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): defsimulate_preemption(wait_seconds:int, jitter_seconds:int=0): def simulate_preemption wait_seconds:int, jitter_seconds:int=0 int int 0 Copy Copy    Copy Utility for simulating a preemption interrupt afterwait_secondsseconds.
The first interrupt is the SIGINT/SIGTERM signal. After 30 seconds a second
interrupt will trigger. This second interrupt simulates SIGKILL, and should not be caught.
Optionally add between zero andjitter_secondsseconds of additional waiting before first interrupt. wait_seconds jitter_seconds Usage: Usage: importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraiseCopy importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise importtimefrommodal.exceptionimportsimulate_preemption

simulate_preemption(3)try:
    time.sleep(4)exceptKeyboardInterrupt:print(""got preempted"")# Handle interruptraise import from import 3 try 4 except print ""got preempted"" # Handle interrupt raise Copy Copy    Copy Seehttps://modal.com/docs/guide/preemptionfor more details on preemption
handling. https://modal.com/docs/guide/preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exceptionmodal.exception.AuthErrormodal.exception.ConnectionErrormodal.exception.DeprecationErrormodal.exception.ExecutionErrormodal.exception.FunctionTimeoutErrormodal.exception.InvalidErrormodal.exception.MountUploadTimeoutErrormodal.exception.NotFoundErrormodal.exception.PendingDeprecationErrormodal.exception.RemoteErrormodal.exception.SandboxTerminatedErrormodal.exception.SandboxTimeoutErrormodal.exception.TimeoutErrormodal.exception.VersionErrormodal.exception.deprecation_errormodal.exception.deprecation_warningmodal.exception.simulate_preemption modal.exception modal.exception.AuthError modal.exception.ConnectionError modal.exception.DeprecationError modal.exception.ExecutionError modal.exception.FunctionTimeoutError modal.exception.InvalidError modal.exception.MountUploadTimeoutError modal.exception.NotFoundError modal.exception.PendingDeprecationError modal.exception.RemoteError modal.exception.SandboxTerminatedError modal.exception.SandboxTimeoutError modal.exception.TimeoutError modal.exception.VersionError modal.exception.deprecation_error modal.exception.deprecation_warning modal.exception.simulate_preemption CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The given content does not provide information on who owns Modal Labs, Inc."
0,What is the purpose of the Secrets class in this system? ,modalsecret modalsecretSecret,"classSecret(modal.object.Object)Copy classSecret(modal.object.Object)Copy classSecret(modal.object.Object)Copy classSecret(modal.object.Object) classSecret(modal.object.Object) classSecret(modal.object.Object) class Secret object Copy Copy    Copy Secrets provide a dictionary of environment variables for images. Secrets are a secure way to add credentials and other sensitive information
to the containers your functions run in. You can create and edit secrets onthe dashboard, or programmatically from Python code. the dashboard Seethe secrets guide pagefor more information. the secrets guide page def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy from_dict @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked @staticmethod def from_dict env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only Dict str str # dict of entries to be inserted as environment variables in functions using the secret """" # internal use only Copy Copy    Copy Create a secret from a str-str dictionary. Usage: @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) {""FOO"":""bar""} ""FOO"" ""bar"" def  print os.environ[""FOO""] ""FOO"" Copy Copy    Copy from_dotenv @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None): @staticmethoddeffrom_dotenv(path=None): @staticmethoddeffrom_dotenv(path=None): @staticmethod def from_dotenv path=None None Copy Copy    Copy Create secrets from a .env file automatically. If no argument is provided, it will use the current working directory as the starting
point for finding a.envfile. Note that it does not use the location of the module
callingSecret.from_dotenv. .env Secret.from_dotenv If called with an argument, it will use that as a starting point for finding.envfiles.
In particular, you can call it like this: .env @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__)) secret=modal.Secret.from_dotenv(__file__) __file__ def run print ""USERNAME"" # Assumes USERNAME is defined in your .env file Copy Copy    Copy This will use the location of the script callingmodal.Secret.from_dotenvas a
starting point for finding the.envfile. modal.Secret.from_dotenv .env modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secret modal.secret.Secret from_id persist from_name lookup from_dict from_dotenv CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The Secrets class provides a secure way to add credentials and other sensitive information to the containers that functions run in. 
3,What are some of the methods mentioned in the classSecret code and what do they do?,modalsecret modalsecretSecret,"classSecret(modal.object.Object)Copy classSecret(modal.object.Object)Copy classSecret(modal.object.Object)Copy classSecret(modal.object.Object) classSecret(modal.object.Object) classSecret(modal.object.Object) class Secret object Copy Copy    Copy Secrets provide a dictionary of environment variables for images. Secrets are a secure way to add credentials and other sensitive information
to the containers your functions run in. You can create and edit secrets onthe dashboard, or programmatically from Python code. the dashboard Seethe secrets guide pagefor more information. the secrets guide page def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy from_dict @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked @staticmethod def from_dict env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only Dict str str # dict of entries to be inserted as environment variables in functions using the secret """" # internal use only Copy Copy    Copy Create a secret from a str-str dictionary. Usage: @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) {""FOO"":""bar""} ""FOO"" ""bar"" def  print os.environ[""FOO""] ""FOO"" Copy Copy    Copy from_dotenv @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None): @staticmethoddeffrom_dotenv(path=None): @staticmethoddeffrom_dotenv(path=None): @staticmethod def from_dotenv path=None None Copy Copy    Copy Create secrets from a .env file automatically. If no argument is provided, it will use the current working directory as the starting
point for finding a.envfile. Note that it does not use the location of the module
callingSecret.from_dotenv. .env Secret.from_dotenv If called with an argument, it will use that as a starting point for finding.envfiles.
In particular, you can call it like this: .env @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__)) secret=modal.Secret.from_dotenv(__file__) __file__ def run print ""USERNAME"" # Assumes USERNAME is defined in your .env file Copy Copy    Copy This will use the location of the script callingmodal.Secret.from_dotenvas a
starting point for finding the.envfile. modal.Secret.from_dotenv .env modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secret modal.secret.Secret from_id persist from_name lookup from_dict from_dotenv CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Some of the methods include from_id, persist, from_name, lookup, from_dict, and from_dotenv. Respectively, these methods retrieve an object from its unique ID, persist a deprecated object, retrieve an object with a given name and tag, lookup an object with a given name and tag, create a secret from a str-str dictionary, and create secrets from a .env file."
6,What does the 'from_dotenv' function do?,modalsecret modalsecretSecret,"classSecret(modal.object.Object)Copy classSecret(modal.object.Object)Copy classSecret(modal.object.Object)Copy classSecret(modal.object.Object) classSecret(modal.object.Object) classSecret(modal.object.Object) class Secret object Copy Copy    Copy Secrets provide a dictionary of environment variables for images. Secrets are a secure way to add credentials and other sensitive information
to the containers your functions run in. You can create and edit secrets onthe dashboard, or programmatically from Python code. the dashboard Seethe secrets guide pagefor more information. the secrets guide page def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy from_id @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O:Copy @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethoddeffrom_id(cls:Type[O], object_id:str, client:Optional[_Client] =None) -> O: @classmethod def from_id cls:Type[O], object_id:str, client:Optional[_Client] =None Type str Optional None Copy Copy    Copy Retrieve an object from its unique ID (accessed throughobj.object_id). obj.object_id persist defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None):Copy defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): defpersist(self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None): def persist self, label:str, namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE, environment_name:Optional[str] =None str Optional str None Copy Copy    Copy Object.persistis deprecated for generic objects. SeeNetworkFileSystem.persistedorDict.persisted. Object.persist NetworkFileSystem.persisted Dict.persisted from_name @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethoddeffrom_name(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None,) -> O: @classmethod def from_name cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    environment_name:Optional[str] =None, Type str Optional str None Optional str None Copy Copy    Copy Retrieve an object with a given name and tag. Useful for referencing secrets, as well as calling a function from a different app.
Use this when attaching the object to a stub or function. Examples Examples # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"")Copy # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secretstub.my_secret = Secret.from_name(""my-secret"")# Retrieve a function from a different appstub.other_function = Function.from_name(""other-app"",""function"")# Retrieve a persisted Volume, Queue, or Dictstub.my_volume = Volume.from_name(""my-volume"")
stub.my_queue = Queue.from_name(""my-queue"")
stub.my_dict =Dict.from_name(""my-dict"") # Retrieve a secret ""my-secret"" # Retrieve a function from a different app ""other-app"" ""function"" # Retrieve a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy lookup @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O:Copy @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethoddeflookup(cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None,) -> O: @classmethod def lookup cls:Type[O],
    app_name:str,
    tag:Optional[str] =None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client:Optional[_Client] =None,
    environment_name:Optional[str] =None, Type str Optional str None Optional None Optional str None Copy Copy    Copy Lookup an object with a given name and tag. This is a general-purpose method for objects like functions, network file systems,
and secrets. It gives a reference to the object in a running app. Examples Examples # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"")Copy # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secretmy_secret = Secret.lookup(""my-secret"")# Lookup a function from a different appother_function = Function.lookup(""other-app"",""function"")# Lookup a persisted Volume, Queue, or Dictmy_volume = Volume.lookup(""my-volume"")
my_queue = Queue.lookup(""my-queue"")
my_dict =Dict.lookup(""my-dict"") # Lookup a secret ""my-secret"" # Lookup a function from a different app ""other-app"" ""function"" # Lookup a persisted Volume, Queue, or Dict ""my-volume"" ""my-queue"" Dict ""my-dict"" Copy Copy    Copy from_dict @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only):Copy @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked@staticmethoddeffrom_dict(env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only): @typechecked @staticmethod def from_dict env_dict:Dict[str,str] = {},# dict of entries to be inserted as environment variables in functions using the secrettemplate_type="""",# internal use only Dict str str # dict of entries to be inserted as environment variables in functions using the secret """" # internal use only Copy Copy    Copy Create a secret from a str-str dictionary. Usage: @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""])Copy @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) @stub.function(secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) secret=modal.Secret.from_dict({""FOO"":""bar""})defrun():print(os.environ[""FOO""]) {""FOO"":""bar""} ""FOO"" ""bar"" def  print os.environ[""FOO""] ""FOO"" Copy Copy    Copy from_dotenv @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None):Copy @staticmethoddeffrom_dotenv(path=None): @staticmethoddeffrom_dotenv(path=None): @staticmethoddeffrom_dotenv(path=None): @staticmethod def from_dotenv path=None None Copy Copy    Copy Create secrets from a .env file automatically. If no argument is provided, it will use the current working directory as the starting
point for finding a.envfile. Note that it does not use the location of the module
callingSecret.from_dotenv. .env Secret.from_dotenv If called with an argument, it will use that as a starting point for finding.envfiles.
In particular, you can call it like this: .env @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env fileCopy @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__))defrun():print(os.environ[""USERNAME""])# Assumes USERNAME is defined in your .env file @stub.function(secret=modal.Secret.from_dotenv(__file__)) secret=modal.Secret.from_dotenv(__file__) __file__ def run print ""USERNAME"" # Assumes USERNAME is defined in your .env file Copy Copy    Copy This will use the location of the script callingmodal.Secret.from_dotenvas a
starting point for finding the.envfile. modal.Secret.from_dotenv .env modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secretmodal.secret.Secretfrom_idpersistfrom_namelookupfrom_dictfrom_dotenv modal.secret modal.secret.Secret from_id persist from_name lookup from_dict from_dotenv CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'from_dotenv' function creates secrets from a .env file automatically. The function will use the current working directory to look for a .env file if no path is provided.
0,What are Environments in this context?,modal environment,"modal environment Create and interact with Environments Environments are sub-divisons of workspaces, allowing you to deploy the same app
in different namespaces. Each environment has their own set of Secrets and any
lookups performed from an app in an environment will by default look for entities
in the same environment. Typical use cases for environments include having one for development and one for
production, to prevent overwriting production apps when developing new features
while still being able to deploy changes to a live environment. Usage: Usage modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]... modal environment [OPTIONS] COMMAND [ARGS]... modal environment [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a new environment in the current workspacedelete: Delete an environment in the current workspacelist: List all environments in the current workspaceupdate: Update the name or web suffix of an environment create: Create a new environment in the current workspace create delete: Delete an environment in the current workspace delete list: List all environments in the current workspace list update: Update the name or web suffix of an environment update ","Environments are sub-divisions of workspaces, allowing the deployment of the same app in different namespaces each with their own secrets."
3,What does the create command in modal environment do?,modal environment,"modal environment Create and interact with Environments Environments are sub-divisons of workspaces, allowing you to deploy the same app
in different namespaces. Each environment has their own set of Secrets and any
lookups performed from an app in an environment will by default look for entities
in the same environment. Typical use cases for environments include having one for development and one for
production, to prevent overwriting production apps when developing new features
while still being able to deploy changes to a live environment. Usage: Usage modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]... modal environment [OPTIONS] COMMAND [ARGS]... modal environment [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a new environment in the current workspacedelete: Delete an environment in the current workspacelist: List all environments in the current workspaceupdate: Update the name or web suffix of an environment create: Create a new environment in the current workspace create delete: Delete an environment in the current workspace delete list: List all environments in the current workspace list update: Update the name or web suffix of an environment update ",The create command creates a new environment in the current workspace.
6,What is the use of update command in modal environment?,modal environment,"modal environment Create and interact with Environments Environments are sub-divisons of workspaces, allowing you to deploy the same app
in different namespaces. Each environment has their own set of Secrets and any
lookups performed from an app in an environment will by default look for entities
in the same environment. Typical use cases for environments include having one for development and one for
production, to prevent overwriting production apps when developing new features
while still being able to deploy changes to a live environment. Usage: Usage modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]...Copy modal environment [OPTIONS] COMMAND [ARGS]... modal environment [OPTIONS] COMMAND [ARGS]... modal environment [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands create: Create a new environment in the current workspacedelete: Delete an environment in the current workspacelist: List all environments in the current workspaceupdate: Update the name or web suffix of an environment create: Create a new environment in the current workspace create delete: Delete an environment in the current workspace delete list: List all environments in the current workspace list update: Update the name or web suffix of an environment update ",The update command is used to update the name or web suffix of an environment.
0,"What does the ""modal environment delete"" command do?",modal environment modal environment delete,modal environment delete Delete an environment in the current workspace Deletes all apps in the selected environment and deletes the environment irrevocably. Usage: Usage modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAME modal environment delete [OPTIONS] NAME modal environment delete [OPTIONS] NAME Copy Copy    Copy Arguments: Arguments NAME: Name of the environment to be deleted. Case sensitive  [required] NAME: Name of the environment to be deleted. Case sensitive  [required] NAME Options: Options --confirm / --no-confirm: Set this flag to delete without prompting for confirmation  [default: no-confirm]--help: Show this message and exit. --confirm / --no-confirm: Set this flag to delete without prompting for confirmation  [default: no-confirm] --confirm / --no-confirm --help: Show this message and exit. --help ,"It deletes an environment in the current workspace, including all apps in the selected environment. "
3,Is the argument case sensitive when deleting a modal environment?,modal environment modal environment delete,modal environment delete Delete an environment in the current workspace Deletes all apps in the selected environment and deletes the environment irrevocably. Usage: Usage modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAME modal environment delete [OPTIONS] NAME modal environment delete [OPTIONS] NAME Copy Copy    Copy Arguments: Arguments NAME: Name of the environment to be deleted. Case sensitive  [required] NAME: Name of the environment to be deleted. Case sensitive  [required] NAME Options: Options --confirm / --no-confirm: Set this flag to delete without prompting for confirmation  [default: no-confirm]--help: Show this message and exit. --confirm / --no-confirm: Set this flag to delete without prompting for confirmation  [default: no-confirm] --confirm / --no-confirm --help: Show this message and exit. --help ,"Yes, the name of the environment to be deleted is case sensitive."
6,What does the --help option do?,modal environment modal environment delete,modal environment delete Delete an environment in the current workspace Deletes all apps in the selected environment and deletes the environment irrevocably. Usage: Usage modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAMECopy modal environment delete [OPTIONS] NAME modal environment delete [OPTIONS] NAME modal environment delete [OPTIONS] NAME Copy Copy    Copy Arguments: Arguments NAME: Name of the environment to be deleted. Case sensitive  [required] NAME: Name of the environment to be deleted. Case sensitive  [required] NAME Options: Options --confirm / --no-confirm: Set this flag to delete without prompting for confirmation  [default: no-confirm]--help: Show this message and exit. --confirm / --no-confirm: Set this flag to delete without prompting for confirmation  [default: no-confirm] --confirm / --no-confirm --help: Show this message and exit. --help ,The --help option provides the message and exits the command.
0,"What is the purpose of ""modal environment list""?",modal environment modal environment list,modal environment list List all environments in the current workspace Usage: Usage modal environment list [OPTIONS]Copy modal environment list [OPTIONS]Copy modal environment list [OPTIONS]Copy modal environment list [OPTIONS] modal environment list [OPTIONS] modal environment list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help ,This command is used to list all environments in the current workspace.
3,"What does the ""--json / --no-json"" option imply?",modal environment modal environment list,modal environment list List all environments in the current workspace Usage: Usage modal environment list [OPTIONS]Copy modal environment list [OPTIONS]Copy modal environment list [OPTIONS]Copy modal environment list [OPTIONS] modal environment list [OPTIONS] modal environment list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help ,"This option allows the user to decide whether or not they want the output in JSON format. By default, the output is not in JSON format."
6,"What does the ""--help"" option do?",modal environment modal environment list,modal environment list List all environments in the current workspace Usage: Usage modal environment list [OPTIONS]Copy modal environment list [OPTIONS]Copy modal environment list [OPTIONS]Copy modal environment list [OPTIONS] modal environment list [OPTIONS] modal environment list [OPTIONS] Copy Copy    Copy Options: Options --json / --no-json: [default: no-json]--help: Show this message and exit. --json / --no-json: [default: no-json] --json / --no-json --help: Show this message and exit. --help ,This option shows the user a help message and then exits the command.
0,What is the purpose of the modal environment update command?,modal environment modal environment update,"modal environment update Update the name or web suffix of an environment Usage: Usage modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME Copy Copy    Copy Arguments: Arguments CURRENT_NAME: [required] CURRENT_NAME: [required] CURRENT_NAME Options: Options --set-name TEXT: New name of the environment--set-web-suffix TEXT: New web suffix of environment (empty string is no suffix)--help: Show this message and exit. --set-name TEXT: New name of the environment --set-name TEXT --set-web-suffix TEXT: New web suffix of environment (empty string is no suffix) --set-web-suffix TEXT --help: Show this message and exit. --help modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environment modal environment create modal environment delete modal environment list modal environment update CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The purpose of the modal environment update command is to update the name or web suffix of an environment.
3,"What does the ""--set-web-suffix TEXT"" option do in the modal environment update command?",modal environment modal environment update,"modal environment update Update the name or web suffix of an environment Usage: Usage modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME Copy Copy    Copy Arguments: Arguments CURRENT_NAME: [required] CURRENT_NAME: [required] CURRENT_NAME Options: Options --set-name TEXT: New name of the environment--set-web-suffix TEXT: New web suffix of environment (empty string is no suffix)--help: Show this message and exit. --set-name TEXT: New name of the environment --set-name TEXT --set-web-suffix TEXT: New web suffix of environment (empty string is no suffix) --set-web-suffix TEXT --help: Show this message and exit. --help modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environment modal environment create modal environment delete modal environment list modal environment update CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The ""--set-web-suffix TEXT"" option allows the modification of the web suffix of an environment. If it is set to an empty string, it means no suffix."
6,What is the purpose of the --help option?,modal environment modal environment update,"modal environment update Update the name or web suffix of an environment Usage: Usage modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME Copy Copy    Copy Arguments: Arguments CURRENT_NAME: [required] CURRENT_NAME: [required] CURRENT_NAME Options: Options --set-name TEXT: New name of the environment--set-web-suffix TEXT: New web suffix of environment (empty string is no suffix)--help: Show this message and exit. --set-name TEXT: New name of the environment --set-name TEXT --set-web-suffix TEXT: New web suffix of environment (empty string is no suffix) --set-web-suffix TEXT --help: Show this message and exit. --help modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environment modal environment create modal environment delete modal environment list modal environment update CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The --help option shows the help message and exits.
0,What is the usage instruction for modal environment update in this context?,modal environment modal environment update,"modal environment update Update the name or web suffix of an environment Usage: Usage modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME Copy Copy    Copy Arguments: Arguments CURRENT_NAME: [required] CURRENT_NAME: [required] CURRENT_NAME Options: Options --set-name TEXT: New name of the environment--set-web-suffix TEXT: New web suffix of environment (empty string is no suffix)--help: Show this message and exit. --set-name TEXT: New name of the environment --set-name TEXT --set-web-suffix TEXT: New web suffix of environment (empty string is no suffix) --set-web-suffix TEXT --help: Show this message and exit. --help modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environment modal environment create modal environment delete modal environment list modal environment update CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",Usage modal environment update [OPTIONS] CURRENT_NAME
3,What does ‘--set-name TEXT’ option do?,modal environment modal environment update,"modal environment update Update the name or web suffix of an environment Usage: Usage modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME Copy Copy    Copy Arguments: Arguments CURRENT_NAME: [required] CURRENT_NAME: [required] CURRENT_NAME Options: Options --set-name TEXT: New name of the environment--set-web-suffix TEXT: New web suffix of environment (empty string is no suffix)--help: Show this message and exit. --set-name TEXT: New name of the environment --set-name TEXT --set-web-suffix TEXT: New web suffix of environment (empty string is no suffix) --set-web-suffix TEXT --help: Show this message and exit. --help modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environment modal environment create modal environment delete modal environment list modal environment update CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",It sets the new name of the environment.
6,What is the copyright year and entity for this modal environment?,modal environment modal environment update,"modal environment update Update the name or web suffix of an environment Usage: Usage modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAMECopy modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME modal environment update [OPTIONS] CURRENT_NAME Copy Copy    Copy Arguments: Arguments CURRENT_NAME: [required] CURRENT_NAME: [required] CURRENT_NAME Options: Options --set-name TEXT: New name of the environment--set-web-suffix TEXT: New web suffix of environment (empty string is no suffix)--help: Show this message and exit. --set-name TEXT: New name of the environment --set-name TEXT --set-web-suffix TEXT: New web suffix of environment (empty string is no suffix) --set-web-suffix TEXT --help: Show this message and exit. --help modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environmentmodal environment createmodal environment deletemodal environment listmodal environment update modal environment modal environment create modal environment delete modal environment list modal environment update CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","© 2023 Modal Labs, Inc."
0,What kind of environments can the Modal client library be used in? ,Jupyter notebooks,"You can use the Modal client library in notebook environments like Jupyter! Just
import it and use as normal. However, there are some limitations to this. ",It can be used in notebook environments like Jupyter.
3,What should one do to use the Modal client library in Jupyter notebooks? ,Jupyter notebooks,"You can use the Modal client library in notebook environments like Jupyter! Just
import it and use as normal. However, there are some limitations to this. ",You should import it.
6,What should you do if you want to use the Modal client library in Jupyter notebooks? ,Jupyter notebooks,"You can use the Modal client library in notebook environments like Jupyter! Just
import it and use as normal. However, there are some limitations to this. ",Just import it and use as normal.
0,Where can Jupyter be run from?,Jupyter notebooks Jupyter inside Modal,"You can also run Jupyter from inside a Modal function. This gives you a
serverless Jupyter environment with flexible CPU, GPU, and memory resources.
It’s an interactive development session that can be allocated only when you need
it. Jupyter listens on a port in your container. We don’t have a built-in way to
expose these ports to the public Internet yet. ",Jupyter can be run from inside a Modal function.
3,What is the mode of allocation of an interactive development session in Jupyter?,Jupyter notebooks Jupyter inside Modal,"You can also run Jupyter from inside a Modal function. This gives you a
serverless Jupyter environment with flexible CPU, GPU, and memory resources.
It’s an interactive development session that can be allocated only when you need
it. Jupyter listens on a port in your container. We don’t have a built-in way to
expose these ports to the public Internet yet. ",An interactive development session can be allocated only when you need it in Jupyter.
6,Is there a built-in way to expose these ports to the public Internet in Jupyter?,Jupyter notebooks Jupyter inside Modal,"You can also run Jupyter from inside a Modal function. This gives you a
serverless Jupyter environment with flexible CPU, GPU, and memory resources.
It’s an interactive development session that can be allocated only when you need
it. Jupyter listens on a port in your container. We don’t have a built-in way to
expose these ports to the public Internet yet. ",We don’t have a built-in way to expose these ports to the public Internet in Jupyter yet.
0,What is the function of Modal in a Jupyter notebook?,Jupyter notebooks Further examples,"Basic demonstration of running Modal in a notebookRunning Jupyter server within a Modal function Basic demonstration of running Modal in a notebook Basic demonstration of running Modal in a notebook Running Jupyter server within a Modal function Running Jupyter server within a Modal function Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooks Known issues Jupyter inside Modal Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",It enables the running of Jupyter server in the notebook.
3,"What is the current year of copyright for Modal Labs, Inc.?",Jupyter notebooks Further examples,"Basic demonstration of running Modal in a notebookRunning Jupyter server within a Modal function Basic demonstration of running Modal in a notebook Basic demonstration of running Modal in a notebook Running Jupyter server within a Modal function Running Jupyter server within a Modal function Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooks Known issues Jupyter inside Modal Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The copyright year is 2023.
6,What is detailed as new URL location in the code script?,Jupyter notebooks Further examples,"Basic demonstration of running Modal in a notebookRunning Jupyter server within a Modal function Basic demonstration of running Modal in a notebook Basic demonstration of running Modal in a notebook Running Jupyter server within a Modal function Running Jupyter server within a Modal function Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooks Known issues Jupyter inside Modal Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The new URL location detailed is ""../..""."
0,What can you run in a Jupyter notebook?,Jupyter notebooks Further examples,"Basic demonstration of running Modal in a notebookRunning Jupyter server within a Modal function Basic demonstration of running Modal in a notebook Basic demonstration of running Modal in a notebook Running Jupyter server within a Modal function Running Jupyter server within a Modal function Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooks Known issues Jupyter inside Modal Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal 
3,Who owns Modal Labs?,Jupyter notebooks Further examples,"Basic demonstration of running Modal in a notebookRunning Jupyter server within a Modal function Basic demonstration of running Modal in a notebook Basic demonstration of running Modal in a notebook Running Jupyter server within a Modal function Running Jupyter server within a Modal function Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooks Known issues Jupyter inside Modal Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc. owns Modal Labs."
6,"What are some components of Modal Labs, Inc. website?",Jupyter notebooks Further examples,"Basic demonstration of running Modal in a notebookRunning Jupyter server within a Modal function Basic demonstration of running Modal in a notebook Basic demonstration of running Modal in a notebook Running Jupyter server within a Modal function Running Jupyter server within a Modal function Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooksKnown issuesJupyter inside ModalFurther examples Jupyter notebooks Known issues Jupyter inside Modal Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Examples, Documentation, Pricing, and Legal are some components of the Modal Labs, Inc. website."
0,What argument should be passed to the stub function decorator to enable GPU acceleration?,GPU acceleration,"If you have code or use libraries that are GPU accelerated, you can attach the
first available GPU to your function by passing thegpu=""any""argument to the@stub.functiondecorator: gpu=""any"" @stub.function importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... import @stub.function(gpu=""any"") gpu=""any"" ""any"" def my_function # code here will be executed on a machine with an available GPU Copy Copy    Copy ","The argument gpu=""any"" should be passed to the stub function decorator to enable GPU acceleration."
3,What is the syntax to define a function that will run on a machine with an available GPU using the modal.Stub() instance?,GPU acceleration,"If you have code or use libraries that are GPU accelerated, you can attach the
first available GPU to your function by passing thegpu=""any""argument to the@stub.functiondecorator: gpu=""any"" @stub.function importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... import @stub.function(gpu=""any"") gpu=""any"" ""any"" def my_function # code here will be executed on a machine with an available GPU Copy Copy    Copy ","The syntax is `@stub.function(gpu=""any"")def my_function(): # code here`."
6,What does the 'modal.Stub()' do in the provided code?,GPU acceleration,"If you have code or use libraries that are GPU accelerated, you can attach the
first available GPU to your function by passing thegpu=""any""argument to the@stub.functiondecorator: gpu=""any"" @stub.function importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU...Copy importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... importmodal

stub = modal.Stub()@stub.function(gpu=""any"")defmy_function():# code here will be executed on a machine with an available GPU... import @stub.function(gpu=""any"") gpu=""any"" ""any"" def my_function # code here will be executed on a machine with an available GPU Copy Copy    Copy ",'modal.Stub()' creates a stub that is used to modularly define a function that will be accelerated by the GPU.
0,How do you specify the number of GPUs to attach to your function?,GPU acceleration Specifying GPU count,"You may also specify the number of GPUs to attach to your function by using theobject formof thegpuparameter for your desired
GPU: object form gpu @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2)) gpu=modal.gpu.A10G(count=2) count=2 2 def my_a10g_function Copy Copy    Copy Currently A100, A10G and T4 instances all support up to 4 GPUs, but we are
working on supporting more options in the future. There will be increased
startup times for functions requesting more than 2 GPUs. ","You do this by using the object form of the 'gpu' parameter for your desired GPU. For example, '@stub.function(gpu=modal.gpu.A10G(count=2))def my_a10g_function()'."
3,What is the maximum number of GPUs that can be supported currently?,GPU acceleration Specifying GPU count,"You may also specify the number of GPUs to attach to your function by using theobject formof thegpuparameter for your desired
GPU: object form gpu @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2)) gpu=modal.gpu.A10G(count=2) count=2 2 def my_a10g_function Copy Copy    Copy Currently A100, A10G and T4 instances all support up to 4 GPUs, but we are
working on supporting more options in the future. There will be increased
startup times for functions requesting more than 2 GPUs. ","Currently, up to 4 GPUs can be supported."
6,Are there plans to support more GPU options in the future?,GPU acceleration Specifying GPU count,"You may also specify the number of GPUs to attach to your function by using theobject formof thegpuparameter for your desired
GPU: object form gpu @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ...Copy @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2))defmy_a10g_function():
    ... @stub.function(gpu=modal.gpu.A10G(count=2)) gpu=modal.gpu.A10G(count=2) count=2 2 def my_a10g_function Copy Copy    Copy Currently A100, A10G and T4 instances all support up to 4 GPUs, but we are
working on supporting more options in the future. There will be increased
startup times for functions requesting more than 2 GPUs. ","Yes, there are plans to work on supporting more options in the future."
0,What is the fastest GPU that Modal uses?,GPU acceleration A100 GPUs,"Modal’s fastest GPUs are theA100s, which are NVIDIA’s
flagship data center chip. They have beefier hardware and more GPU memory. A100s To request an A100 with 40 GB of GPU memory, replace thegpu=""any""argument
withgpu=""A100"": gpu=""any"" gpu=""A100"" @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"") gpu=""A100"" ""A100"" def my_a100_function Copy Copy    Copy Modal also support 80GB A100s although this is a beta feature and may have
latency issues: @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80)) gpu=modal.gpu.A100(memory=80) memory=80 80 def my_a100_80GB_function Copy Copy    Copy ",Modal's fastest GPUs are the A100s from NVIDIA.
3,How do you request an A100 with 40 GB of GPU memory in the code?,GPU acceleration A100 GPUs,"Modal’s fastest GPUs are theA100s, which are NVIDIA’s
flagship data center chip. They have beefier hardware and more GPU memory. A100s To request an A100 with 40 GB of GPU memory, replace thegpu=""any""argument
withgpu=""A100"": gpu=""any"" gpu=""A100"" @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"") gpu=""A100"" ""A100"" def my_a100_function Copy Copy    Copy Modal also support 80GB A100s although this is a beta feature and may have
latency issues: @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80)) gpu=modal.gpu.A100(memory=80) memory=80 80 def my_a100_80GB_function Copy Copy    Copy ","To request an A100 with 40 GB of GPU memory, you replace the gpu=""any"" argument with gpu=""A100""."
6,What might be a potential issue with the 80GB A100s according to the text?,GPU acceleration A100 GPUs,"Modal’s fastest GPUs are theA100s, which are NVIDIA’s
flagship data center chip. They have beefier hardware and more GPU memory. A100s To request an A100 with 40 GB of GPU memory, replace thegpu=""any""argument
withgpu=""A100"": gpu=""any"" gpu=""A100"" @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ...Copy @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"")defmy_a100_function():
    ... @stub.function(gpu=""A100"") gpu=""A100"" ""A100"" def my_a100_function Copy Copy    Copy Modal also support 80GB A100s although this is a beta feature and may have
latency issues: @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(memory=80)) gpu=modal.gpu.A100(memory=80) memory=80 80 def my_a100_80GB_function Copy Copy    Copy ",The 80GB A100s may have latency issues.
0,What does Modal support according to the given content?,GPU acceleration MultiGPU tasks,"Modal also supports multi-GPU tasks. This means each container will have access
to multiple GPUs. We support up to 4 or 6 GPUs, depending on the type. @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4)) gpu=modal.gpu.A100(count=4) count=4 4 def my_a100_80GB_function Copy Copy    Copy ",Modal supports multi-GPU tasks.
3,"What is indicated by the function ""gpu=modal.gpu.A100(count=4)""?",GPU acceleration MultiGPU tasks,"Modal also supports multi-GPU tasks. This means each container will have access
to multiple GPUs. We support up to 4 or 6 GPUs, depending on the type. @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4)) gpu=modal.gpu.A100(count=4) count=4 4 def my_a100_80GB_function Copy Copy    Copy ",It indicates that the function uses modal.gpu.A100 with a count of 4 GPUs.
6,What kind of tasks can each container have access to?,GPU acceleration MultiGPU tasks,"Modal also supports multi-GPU tasks. This means each container will have access
to multiple GPUs. We support up to 4 or 6 GPUs, depending on the type. @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ...Copy @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4))defmy_a100_80GB_function():
    ... @stub.function(gpu=modal.gpu.A100(count=4)) gpu=modal.gpu.A100(count=4) count=4 4 def my_a100_80GB_function Copy Copy    Copy ",Each container will have access to multiple GPUs.
0,What are some examples that use GPU acceleration? ,GPU acceleration Examples,"Take a look at some of our examples that use GPUs: Stable diffusion slackbotDocument OCR job queue with DonutBlender video renderer Stable diffusion slackbot Stable diffusion slackbot Document OCR job queue with Donut Document OCR job queue with Donut Blender video renderer Blender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamples GPU acceleration Specifying GPU type Specifying GPU count A100 GPUs Multi-GPU tasks Examples See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in action High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM     Stable Diffusion Slackbot Stable Diffusion Slackbot Stable Diffusion Slackbot     Blender video renderer Blender video renderer Blender video renderer     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Some examples that use GPU acceleration are Stable diffusion slackbot, Document OCR job queue with Donut and Blender video renderer."
3,What are some tasks seen in action with GPU acceleration?,GPU acceleration Examples,"Take a look at some of our examples that use GPUs: Stable diffusion slackbotDocument OCR job queue with DonutBlender video renderer Stable diffusion slackbot Stable diffusion slackbot Document OCR job queue with Donut Document OCR job queue with Donut Blender video renderer Blender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamples GPU acceleration Specifying GPU type Specifying GPU count A100 GPUs Multi-GPU tasks Examples See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in action High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM     Stable Diffusion Slackbot Stable Diffusion Slackbot Stable Diffusion Slackbot     Blender video renderer Blender video renderer Blender video renderer     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Some tasks seen in action with GPU acceleration are High-speed LLaMA inference with vLLM, Stable Diffusion Slackbot, and Blender video renderer."
6,"What year does the copyright belong to for Modal Labs, Inc?",GPU acceleration Examples,"Take a look at some of our examples that use GPUs: Stable diffusion slackbotDocument OCR job queue with DonutBlender video renderer Stable diffusion slackbot Stable diffusion slackbot Document OCR job queue with Donut Document OCR job queue with Donut Blender video renderer Blender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamples GPU acceleration Specifying GPU type Specifying GPU count A100 GPUs Multi-GPU tasks Examples See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in action High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM     Stable Diffusion Slackbot Stable Diffusion Slackbot Stable Diffusion Slackbot     Blender video renderer Blender video renderer Blender video renderer     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright belongs to the year 2023 for Modal Labs, Inc."
0,What are some examples of GPU acceleration?,GPU acceleration Examples,"Take a look at some of our examples that use GPUs: Stable diffusion slackbotDocument OCR job queue with DonutBlender video renderer Stable diffusion slackbot Stable diffusion slackbot Document OCR job queue with Donut Document OCR job queue with Donut Blender video renderer Blender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamples GPU acceleration Specifying GPU type Specifying GPU count A100 GPUs Multi-GPU tasks Examples See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in action High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM     Stable Diffusion Slackbot Stable Diffusion Slackbot Stable Diffusion Slackbot     Blender video renderer Blender video renderer Blender video renderer     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Examples include stable diffusion slackbot, document OCR job queue with Donut, and Blender video renderer."
3,What tasks does the high-speed LLaMA inference with vLLM perform?,GPU acceleration Examples,"Take a look at some of our examples that use GPUs: Stable diffusion slackbotDocument OCR job queue with DonutBlender video renderer Stable diffusion slackbot Stable diffusion slackbot Document OCR job queue with Donut Document OCR job queue with Donut Blender video renderer Blender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamples GPU acceleration Specifying GPU type Specifying GPU count A100 GPUs Multi-GPU tasks Examples See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in action High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM     Stable Diffusion Slackbot Stable Diffusion Slackbot Stable Diffusion Slackbot     Blender video renderer Blender video renderer Blender video renderer     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The high-speed LLaMA inference with vLLM performs GPU acceleration tasks.
6,What is __sveltekit_qfhbjo?,GPU acceleration Examples,"Take a look at some of our examples that use GPUs: Stable diffusion slackbotDocument OCR job queue with DonutBlender video renderer Stable diffusion slackbot Stable diffusion slackbot Document OCR job queue with Donut Document OCR job queue with Donut Blender video renderer Blender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamplesSee it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer GPU accelerationSpecifying GPU typeSpecifying GPU countA100 GPUsMulti-GPU tasksExamples GPU acceleration Specifying GPU type Specifying GPU count A100 GPUs Multi-GPU tasks Examples See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in actionHigh-speed LLaMA inference with vLLMStable Diffusion SlackbotBlender video renderer See it in action High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM High-speed LLaMA inference with vLLM     Stable Diffusion Slackbot Stable Diffusion Slackbot Stable Diffusion Slackbot     Blender video renderer Blender video renderer Blender video renderer     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",__sveltekit_qfhbjo is a base URL location used in the scripting for this content.
0,What is the source of the data used in the Datasette application on Modal?,Publish interactive datasets with Datasette,"  This example shows how to serve a Datasette application on Modal. The published dataset
is COVID-19 case data from Johns Hopkins University which is refreshed daily.
Try it out for yourself atmodal-labs-example-covid-datasette-app.modal.run/covid-19. modal-labs-example-covid-datasette-app.modal.run/covid-19 Some Modal features it uses: Volumes: a persisted volume lets us store and grow the published dataset over time.Scheduled functions: the underlying dataset is refreshed daily, so we schedule a function to run daily.Web endpoints: exposes the Datasette application for web browser interaction and API requests. Volumes: a persisted volume lets us store and grow the published dataset over time. Scheduled functions: the underlying dataset is refreshed daily, so we schedule a function to run daily. Web endpoints: exposes the Datasette application for web browser interaction and API requests. ",The source of data is COVID-19 case data from Johns Hopkins University.
3,How often is the underlying dataset refreshed in the Datasette application?,Publish interactive datasets with Datasette,"  This example shows how to serve a Datasette application on Modal. The published dataset
is COVID-19 case data from Johns Hopkins University which is refreshed daily.
Try it out for yourself atmodal-labs-example-covid-datasette-app.modal.run/covid-19. modal-labs-example-covid-datasette-app.modal.run/covid-19 Some Modal features it uses: Volumes: a persisted volume lets us store and grow the published dataset over time.Scheduled functions: the underlying dataset is refreshed daily, so we schedule a function to run daily.Web endpoints: exposes the Datasette application for web browser interaction and API requests. Volumes: a persisted volume lets us store and grow the published dataset over time. Scheduled functions: the underlying dataset is refreshed daily, so we schedule a function to run daily. Web endpoints: exposes the Datasette application for web browser interaction and API requests. ",The underlying dataset is refreshed daily.
6,What is the link to try out the Datasette application on Modal?,Publish interactive datasets with Datasette,"  This example shows how to serve a Datasette application on Modal. The published dataset
is COVID-19 case data from Johns Hopkins University which is refreshed daily.
Try it out for yourself atmodal-labs-example-covid-datasette-app.modal.run/covid-19. modal-labs-example-covid-datasette-app.modal.run/covid-19 Some Modal features it uses: Volumes: a persisted volume lets us store and grow the published dataset over time.Scheduled functions: the underlying dataset is refreshed daily, so we schedule a function to run daily.Web endpoints: exposes the Datasette application for web browser interaction and API requests. Volumes: a persisted volume lets us store and grow the published dataset over time. Scheduled functions: the underlying dataset is refreshed daily, so we schedule a function to run daily. Web endpoints: exposes the Datasette application for web browser interaction and API requests. ",You can try it out at modal-labs-example-covid-datasette-app.modal.run/covid-19.
0,What is used for persistent dataset storage in this case?,Publish interactive datasets with Datasette Persistent dataset storage,"To separate database creation and maintenance from serving, we’ll need the underlying
database file to be stored persistently. To achieve this we use aVolume. Volume Volume stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") ""example-covid-datasette-cache-vol"" ""/cache-vol"" ""COVID-19"" ""covid-19.db"" Copy Copy    Copy ",A Volume is used for persistent dataset storage.
3,What is the VOLUME_DIR in this case?,Publish interactive datasets with Datasette Persistent dataset storage,"To separate database creation and maintenance from serving, we’ll need the underlying
database file to be stored persistently. To achieve this we use aVolume. Volume Volume stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") ""example-covid-datasette-cache-vol"" ""/cache-vol"" ""COVID-19"" ""covid-19.db"" Copy Copy    Copy ","The VOLUME_DIR is ""/cache-vol""."
6,What is defined by DB_PATH in this instance?,Publish interactive datasets with Datasette Persistent dataset storage,"To separate database creation and maintenance from serving, we’ll need the underlying
database file to be stored persistently. To achieve this we use aVolume. Volume Volume stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"")Copy stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") stub.volume = Volume.persisted(""example-covid-datasette-cache-vol"")

VOLUME_DIR =""/cache-vol""REPORTS_DIR = pathlib.Path(VOLUME_DIR,""COVID-19"")
DB_PATH = pathlib.Path(VOLUME_DIR,""covid-19.db"") ""example-covid-datasette-cache-vol"" ""/cache-vol"" ""COVID-19"" ""covid-19.db"" Copy Copy    Copy ","DB_PATH defines the path to the ""covid-19.db"" database file in the volume directory."
0,What dataset is being used in this example?,Publish interactive datasets with Datasette Getting a dataset,"Johns Hopkins has been publishing up-to-date COVID-19 pandemic data on GitHub since early February 2020, and
as of late September 2022 daily reporting is still rolling in. Their dataset is what this example will use to
show off Modal and Datasette’s capabilities. The full git repository size for the dataset is over 6GB, but we only need to shallow clone around 300MB. @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2, 2 def download_dataset cache=True True if and print f""Dataset already present and{cache=}. Skipping download."" {cache=} return elif print ""Cleaning dataset before re-downloading..."" print ""Downloading dataset..."" ""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"" ""/tmp/covid-19.zip"" print ""Unpacking archive..."" ""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports"" f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"" {prefix} {REPORTS_DIR} True f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"" {REPORTS_DIR / prefix} {REPORTS_DIR} True print ""Committing the volume..."" print ""Finished downloading dataset."" Copy Copy    Copy ",The dataset used in this example is the COVID-19 pandemic data published by Johns Hopkins on GitHub.
3,What is being done if the dataset already exists and cache is on?,Publish interactive datasets with Datasette Getting a dataset,"Johns Hopkins has been publishing up-to-date COVID-19 pandemic data on GitHub since early February 2020, and
as of late September 2022 daily reporting is still rolling in. Their dataset is what this example will use to
show off Modal and Datasette’s capabilities. The full git repository size for the dataset is over 6GB, but we only need to shallow clone around 300MB. @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2, 2 def download_dataset cache=True True if and print f""Dataset already present and{cache=}. Skipping download."" {cache=} return elif print ""Cleaning dataset before re-downloading..."" print ""Downloading dataset..."" ""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"" ""/tmp/covid-19.zip"" print ""Unpacking archive..."" ""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports"" f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"" {prefix} {REPORTS_DIR} True f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"" {REPORTS_DIR / prefix} {REPORTS_DIR} True print ""Committing the volume..."" print ""Finished downloading dataset."" Copy Copy    Copy ","If the dataset already exists and cache is on, the dataset download is skipped."
6,What action is taken after downloading and unpacking the dataset?,Publish interactive datasets with Datasette Getting a dataset,"Johns Hopkins has been publishing up-to-date COVID-19 pandemic data on GitHub since early February 2020, and
as of late September 2022 daily reporting is still rolling in. Their dataset is what this example will use to
show off Modal and Datasette’s capabilities. The full git repository size for the dataset is over 6GB, but we only need to shallow clone around 300MB. @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."")Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,)defdownload_dataset(cache=True):ifREPORTS_DIR.exists()andcache:print(f""Dataset already present and{cache=}. Skipping download."")returnelifREPORTS_DIR.exists():print(""Cleaning dataset before re-downloading..."")
        shutil.rmtree(REPORTS_DIR)print(""Downloading dataset..."")
    urlretrieve(""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"",""/tmp/covid-19.zip"",
    )print(""Unpacking archive..."")
    prefix =""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports""subprocess.run(f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"", shell=True)
    subprocess.run(f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"", shell=True)print(""Committing the volume..."")
    stub.volume.commit()print(""Finished downloading dataset."") @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2,) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    retries=2, 2 def download_dataset cache=True True if and print f""Dataset already present and{cache=}. Skipping download."" {cache=} return elif print ""Cleaning dataset before re-downloading..."" print ""Downloading dataset..."" ""https://github.com/CSSEGISandData/COVID-19/archive/refs/heads/master.zip"" ""/tmp/covid-19.zip"" print ""Unpacking archive..."" ""COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports"" f""unzip /tmp/covid-19.zip{prefix}/* -d{REPORTS_DIR}"" {prefix} {REPORTS_DIR} True f""mv{REPORTS_DIR / prefix}/*{REPORTS_DIR}"" {REPORTS_DIR / prefix} {REPORTS_DIR} True print ""Committing the volume..."" print ""Finished downloading dataset."" Copy Copy    Copy ","After downloading and unpacking the dataset, the volume is committed."
0,"What does the function ""load_daily_reports"" do?",Publish interactive datasets with Datasette Data munging,"This dataset is no swamp, but a bit of data cleaning is still in order. The following two
functions read a handful of.csvfiles and clean the data, before inserting it into
SQLite. .csv defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } def load_daily_reports list ""*.csv"" if not raise f""Could not find any daily reports in{REPORTS_DIR}."" {REPORTS_DIR} for in yield from def load_report filepath import ""-"" with open as for in ""\ufeffProvince/State"" or ""Province/State"" or ""Province_State"" or None ""Country_Region"" or ""Country/Region"" yield ""day"" f""{yyyy}-{mm}-{dd}"" {yyyy} {mm} {dd} ""country_or_region"" if else None ""province_or_state"" if else None ""confirmed"" int float ""Confirmed"" or 0 ""deaths"" int float ""Deaths"" or 0 ""recovered"" int float ""Recovered"" or 0 ""active"" int ""Active"" if ""Active"" else None ""last_update"" ""Last Update"" or ""Last_Update"" or None Copy Copy    Copy ","The function ""load_daily_reports"" reloads stub volume, reads and cleans data from .csv files located in a directory named REPORTS_DIR, and yields cleaned data from each report."
3,"What is the purpose of the function ""load_report""?",Publish interactive datasets with Datasette Data munging,"This dataset is no swamp, but a bit of data cleaning is still in order. The following two
functions read a handful of.csvfiles and clean the data, before inserting it into
SQLite. .csv defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } def load_daily_reports list ""*.csv"" if not raise f""Could not find any daily reports in{REPORTS_DIR}."" {REPORTS_DIR} for in yield from def load_report filepath import ""-"" with open as for in ""\ufeffProvince/State"" or ""Province/State"" or ""Province_State"" or None ""Country_Region"" or ""Country/Region"" yield ""day"" f""{yyyy}-{mm}-{dd}"" {yyyy} {mm} {dd} ""country_or_region"" if else None ""province_or_state"" if else None ""confirmed"" int float ""Confirmed"" or 0 ""deaths"" int float ""Deaths"" or 0 ""recovered"" int float ""Recovered"" or 0 ""active"" int ""Active"" if ""Active"" else None ""last_update"" ""Last Update"" or ""Last_Update"" or None Copy Copy    Copy ","The function ""load_report"" reads a single .csv file, cleans the data and generates (yields) a dictionary for each row of the dataset, containing keys such as ""day"", ""country_or_region"", ""province_or_state"", ""confirmed"", ""deaths"", ""recovered"", ""active"", and ""last_update""."
6,"How does the function handle the fields 'Province/State', 'Country/Region', 'Active', and 'Last Update' from .csv files?",Publish interactive datasets with Datasette Data munging,"This dataset is no swamp, but a bit of data cleaning is still in order. The following two
functions read a handful of.csvfiles and clean the data, before inserting it into
SQLite. .csv defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            }Copy defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } defload_daily_reports():
    stub.volume.reload()
    daily_reports =list(REPORTS_DIR.glob(""*.csv""))ifnotdaily_reports:raiseRuntimeError(f""Could not find any daily reports in{REPORTS_DIR}."")forfilepathindaily_reports:yieldfromload_report(filepath)defload_report(filepath):importcsv

    mm, dd, yyyy = filepath.stem.split(""-"")withfilepath.open()asfp:forrowincsv.DictReader(fp):
            province_or_state = (
                row.get(""\ufeffProvince/State"")orrow.get(""Province/State"")orrow.get(""Province_State"")orNone)
            country_or_region = row.get(""Country_Region"")orrow.get(""Country/Region"")yield{""day"":f""{yyyy}-{mm}-{dd}"",""country_or_region"": country_or_region.strip()ifcountry_or_regionelseNone,""province_or_state"": province_or_state.strip()ifprovince_or_stateelseNone,""confirmed"":int(float(row[""Confirmed""]or0)),""deaths"":int(float(row[""Deaths""]or0)),""recovered"":int(float(row[""Recovered""]or0)),""active"":int(row[""Active""])ifrow.get(""Active"")elseNone,""last_update"": row.get(""Last Update"")orrow.get(""Last_Update"")orNone,
            } def load_daily_reports list ""*.csv"" if not raise f""Could not find any daily reports in{REPORTS_DIR}."" {REPORTS_DIR} for in yield from def load_report filepath import ""-"" with open as for in ""\ufeffProvince/State"" or ""Province/State"" or ""Province_State"" or None ""Country_Region"" or ""Country/Region"" yield ""day"" f""{yyyy}-{mm}-{dd}"" {yyyy} {mm} {dd} ""country_or_region"" if else None ""province_or_state"" if else None ""confirmed"" int float ""Confirmed"" or 0 ""deaths"" int float ""Deaths"" or 0 ""recovered"" int float ""Recovered"" or 0 ""active"" int ""Active"" if ""Active"" else None ""last_update"" ""Last Update"" or ""Last_Update"" or None Copy Copy    Copy ","The function handles these fields by fetching their values from each .csv file and storing them in corresponding keys in the generated dictionary. If there is no value for 'Province/State', 'Country/Region', 'Active', or 'Last Update' in the file, ""None"" will be stored as the value for those keys in the dictionary."
0,What function is used to create an SQLite Database?,Publish interactive datasets with Datasette Inserting into SQLite,"With the CSV processing out of the way, we’re ready to create an SQLite DB and feed data into it.
Importantly, theprep_dbfunction mounts the same volume used bydownload_dataset(), and
rows are batch inserted with progress logged after each batch, as the full COVID-19 has millions
of rows and does take some time to be fully inserted. prep_db download_dataset() A more sophisticated implementation would only load new data instead of performing a full refresh,
but we’re keeping things simple for this example! defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() def chunks it, size import return iter lambda tuple @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900, 900 def prep_db import print ""Loading daily reports..."" True True ""johns_hopkins_csse_daily_reports"" 100_000 for in enumerate True if 0 else False print f""Inserted{len(batch)}rows into DB."" {len(batch)} len ""day"" True ""province_or_state"" True ""country_or_region"" True print ""Syncing DB with volume."" Copy Copy    Copy ",The function used is sqlite_utils.Database(DB_PATH).
3,What does the truncate parameter do in the table.insert_all function?,Publish interactive datasets with Datasette Inserting into SQLite,"With the CSV processing out of the way, we’re ready to create an SQLite DB and feed data into it.
Importantly, theprep_dbfunction mounts the same volume used bydownload_dataset(), and
rows are batch inserted with progress logged after each batch, as the full COVID-19 has millions
of rows and does take some time to be fully inserted. prep_db download_dataset() A more sophisticated implementation would only load new data instead of performing a full refresh,
but we’re keeping things simple for this example! defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() def chunks it, size import return iter lambda tuple @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900, 900 def prep_db import print ""Loading daily reports..."" True True ""johns_hopkins_csse_daily_reports"" 100_000 for in enumerate True if 0 else False print f""Inserted{len(batch)}rows into DB."" {len(batch)} len ""day"" True ""province_or_state"" True ""country_or_region"" True print ""Syncing DB with volume."" Copy Copy    Copy ","In the table.insert_all function, the truncate parameter decides if the existing table should be truncated before inserting new data. It is set to True for the first batch."
6,Why are records inserted in chunks?,Publish interactive datasets with Datasette Inserting into SQLite,"With the CSV processing out of the way, we’re ready to create an SQLite DB and feed data into it.
Importantly, theprep_dbfunction mounts the same volume used bydownload_dataset(), and
rows are batch inserted with progress logged after each batch, as the full COVID-19 has millions
of rows and does take some time to be fully inserted. prep_db download_dataset() A more sophisticated implementation would only load new data instead of performing a full refresh,
but we’re keeping things simple for this example! defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit()Copy defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() defchunks(it, size):importitertoolsreturniter(lambda:tuple(itertools.islice(it, size)), ())@stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,)defprep_db():importsqlite_utilsprint(""Loading daily reports..."")
    records = load_daily_reports()

    DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    db = sqlite_utils.Database(DB_PATH)
    table = db[""johns_hopkins_csse_daily_reports""]

    batch_size =100_000fori, batchinenumerate(chunks(records, size=batch_size)):
        truncate =Trueifi ==0elseFalsetable.insert_all(batch, batch_size=batch_size, truncate=truncate)print(f""Inserted{len(batch)}rows into DB."")

    table.create_index([""day""], if_not_exists=True)
    table.create_index([""province_or_state""], if_not_exists=True)
    table.create_index([""country_or_region""], if_not_exists=True)

    db.close()print(""Syncing DB with volume."")
    stub.volume.commit() def chunks it, size import return iter lambda tuple @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900,) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},
    timeout=900, 900 def prep_db import print ""Loading daily reports..."" True True ""johns_hopkins_csse_daily_reports"" 100_000 for in enumerate True if 0 else False print f""Inserted{len(batch)}rows into DB."" {len(batch)} len ""day"" True ""province_or_state"" True ""country_or_region"" True print ""Syncing DB with volume."" Copy Copy    Copy ","Records are inserted in chunks to manage the large amounts of data, as the full COVID-19 dataset has millions of rows and does take some time to be fully inserted."
0,What is the function of 'refresh_db' in the code?,Publish interactive datasets with Datasette Keep it fresh,"Johns Hopkins commits new data to the dataset repository every day, so we set up
ascheduledfunction to automatically refresh the database
every 24 hours. scheduled @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000) schedule=Period(hours=24), timeout=1000 hours=24 24 1000 def refresh_db print f""Running scheduled refresh at{datetime.now()}"" {datetime.now()} False Copy Copy    Copy ",The 'refresh_db' function is used to automatically refresh the database every 24 hours.
3,What does the 'download_dataset.remote(cache=False)' command do in the presented code?,Publish interactive datasets with Datasette Keep it fresh,"Johns Hopkins commits new data to the dataset repository every day, so we set up
ascheduledfunction to automatically refresh the database
every 24 hours. scheduled @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000) schedule=Period(hours=24), timeout=1000 hours=24 24 1000 def refresh_db print f""Running scheduled refresh at{datetime.now()}"" {datetime.now()} False Copy Copy    Copy ","The 'download_dataset.remote(cache=False)' command is used to download the dataset remotely, without using cache."
6,What's the purpose of 'prep_db.remote()' in the given code snippet?,Publish interactive datasets with Datasette Keep it fresh,"Johns Hopkins commits new data to the dataset repository every day, so we set up
ascheduledfunction to automatically refresh the database
every 24 hours. scheduled @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote()Copy @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000)defrefresh_db():print(f""Running scheduled refresh at{datetime.now()}"")
    download_dataset.remote(cache=False)
    prep_db.remote() @stub.function(schedule=Period(hours=24), timeout=1000) schedule=Period(hours=24), timeout=1000 hours=24 24 1000 def refresh_db print f""Running scheduled refresh at{datetime.now()}"" {datetime.now()} False Copy Copy    Copy ",The 'prep_db.remote()' in the given code snippet is a command that prepares the database remotely.
0,What is being imported from Datasette in the provided function?,Publish interactive datasets with Datasette Web endpoint,"Hooking up the SQLite database to a Modal webhook is as simple as it gets.
The Modal@asgi_appdecorator wraps a few lines of code: oneimportand a few
lines to instantiate theDatasetteinstance and return its app server. @asgi_app import Datasette @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume}, @asgi_app() def app from import ""sql_time_limit_ms"" 10000 return Copy Copy    Copy ",The Datasette app is being imported.
3,Who is the decorator @asgi_app provided by?,Publish interactive datasets with Datasette Web endpoint,"Hooking up the SQLite database to a Modal webhook is as simple as it gets.
The Modal@asgi_appdecorator wraps a few lines of code: oneimportand a few
lines to instantiate theDatasetteinstance and return its app server. @asgi_app import Datasette @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume}, @asgi_app() def app from import ""sql_time_limit_ms"" 10000 return Copy Copy    Copy ",The decorator @asgi_app is provided by Modal.
6,What function is being decorated by @asgi_app?,Publish interactive datasets with Datasette Web endpoint,"Hooking up the SQLite database to a Modal webhook is as simple as it gets.
The Modal@asgi_appdecorator wraps a few lines of code: oneimportand a few
lines to instantiate theDatasetteinstance and return its app server. @asgi_app import Datasette @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app()Copy @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},)@asgi_app()defapp():fromdatasette.appimportDatasette

    ds = Datasette(files=[DB_PATH], settings={""sql_time_limit_ms"":10000})
    asyncio.run(ds.invoke_startup())returnds.app() @stub.function(image=datasette_image,
    volumes={VOLUME_DIR: stub.volume},) image=datasette_image,
    volumes={VOLUME_DIR: stub.volume}, @asgi_app() def app from import ""sql_time_limit_ms"" 10000 return Copy Copy    Copy ","The function ""app"" is being decorated by @asgi_app."
0,What command is used to create a database with the Datasette script?,Publish interactive datasets with Datasette Publishing to the web,"Run this script usingmodal run covid_datasette.pyand it will create the database. modal run covid_datasette.py You can then usemodal serve covid_datasette.pyto create a short-lived web URL
that exists until you terminate the script. modal serve covid_datasette.py When publishing the interactive Datasette app you’ll want to create a persistent URL.
Just runmodal deploy covid_datasette.py. modal deploy covid_datasette.py @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint() def run print ""Downloading COVID-19 dataset..."" print ""Prepping SQLite DB..."" Copy Copy    Copy You can explore the data at thedeployed web endpoint. deployed web endpoint Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the web Publish interactive datasets with Datasette Basic setup Persistent dataset storage Getting a dataset Data munging Inserting into SQLite Keep it fresh Web endpoint Publishing to the web Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy ","The command is ""modal run covid_datasette.py""."
3,How do you create a persistent URL with the Datasette script?,Publish interactive datasets with Datasette Publishing to the web,"Run this script usingmodal run covid_datasette.pyand it will create the database. modal run covid_datasette.py You can then usemodal serve covid_datasette.pyto create a short-lived web URL
that exists until you terminate the script. modal serve covid_datasette.py When publishing the interactive Datasette app you’ll want to create a persistent URL.
Just runmodal deploy covid_datasette.py. modal deploy covid_datasette.py @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint() def run print ""Downloading COVID-19 dataset..."" print ""Prepping SQLite DB..."" Copy Copy    Copy You can explore the data at thedeployed web endpoint. deployed web endpoint Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the web Publish interactive datasets with Datasette Basic setup Persistent dataset storage Getting a dataset Data munging Inserting into SQLite Keep it fresh Web endpoint Publishing to the web Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy ","You can create a persistent URL by running ""modal deploy covid_datasette.py""."
6,What should you do to run the example on Modal?,Publish interactive datasets with Datasette Publishing to the web,"Run this script usingmodal run covid_datasette.pyand it will create the database. modal run covid_datasette.py You can then usemodal serve covid_datasette.pyto create a short-lived web URL
that exists until you terminate the script. modal serve covid_datasette.py When publishing the interactive Datasette app you’ll want to create a persistent URL.
Just runmodal deploy covid_datasette.py. modal deploy covid_datasette.py @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint() def run print ""Downloading COVID-19 dataset..."" print ""Prepping SQLite DB..."" Copy Copy    Copy You can explore the data at thedeployed web endpoint. deployed web endpoint Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the web Publish interactive datasets with Datasette Basic setup Persistent dataset storage Getting a dataset Data munging Inserting into SQLite Keep it fresh Web endpoint Publishing to the web Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy ","You should create a free account, install the Modal Python package, create an API token, clone the modal-examples repository and run the command ""modal run 10_integrations/covid_datasette.py""."
0,What command is used to create a database for Datasette Publishing?,Publish interactive datasets with Datasette Publishing to the web,"Run this script usingmodal run covid_datasette.pyand it will create the database. modal run covid_datasette.py You can then usemodal serve covid_datasette.pyto create a short-lived web URL
that exists until you terminate the script. modal serve covid_datasette.py When publishing the interactive Datasette app you’ll want to create a persistent URL.
Just runmodal deploy covid_datasette.py. modal deploy covid_datasette.py @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint() def run print ""Downloading COVID-19 dataset..."" print ""Prepping SQLite DB..."" Copy Copy    Copy You can explore the data at thedeployed web endpoint. deployed web endpoint Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the web Publish interactive datasets with Datasette Basic setup Persistent dataset storage Getting a dataset Data munging Inserting into SQLite Keep it fresh Web endpoint Publishing to the web Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/covid_datasette.py $ modal run 10_integrations/covid_datasette.py modal run 10_integrations/covid_datasette.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","You run the script using ""modal run covid_datasette.py""."
3,What is the command to create a persistent URL when publishing the interactive Datasette app?,Publish interactive datasets with Datasette Publishing to the web,"Run this script usingmodal run covid_datasette.pyand it will create the database. modal run covid_datasette.py You can then usemodal serve covid_datasette.pyto create a short-lived web URL
that exists until you terminate the script. modal serve covid_datasette.py When publishing the interactive Datasette app you’ll want to create a persistent URL.
Just runmodal deploy covid_datasette.py. modal deploy covid_datasette.py @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint() def run print ""Downloading COVID-19 dataset..."" print ""Prepping SQLite DB..."" Copy Copy    Copy You can explore the data at thedeployed web endpoint. deployed web endpoint Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the web Publish interactive datasets with Datasette Basic setup Persistent dataset storage Getting a dataset Data munging Inserting into SQLite Keep it fresh Web endpoint Publishing to the web Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/covid_datasette.py $ modal run 10_integrations/covid_datasette.py modal run 10_integrations/covid_datasette.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","Just run ""modal deploy covid_datasette.py""."
6,How can you run an example on Modal?,Publish interactive datasets with Datasette Publishing to the web,"Run this script usingmodal run covid_datasette.pyand it will create the database. modal run covid_datasette.py You can then usemodal serve covid_datasette.pyto create a short-lived web URL
that exists until you terminate the script. modal serve covid_datasette.py When publishing the interactive Datasette app you’ll want to create a persistent URL.
Just runmodal deploy covid_datasette.py. modal deploy covid_datasette.py @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote()Copy @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint()defrun():print(""Downloading COVID-19 dataset..."")
    download_dataset.remote()print(""Prepping SQLite DB..."")
    prep_db.remote() @stub.local_entrypoint() def run print ""Downloading COVID-19 dataset..."" print ""Prepping SQLite DB..."" Copy Copy    Copy You can explore the data at thedeployed web endpoint. deployed web endpoint Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the webTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Publish interactive datasets with DatasetteBasic setupPersistent dataset storageGetting a datasetData mungingInserting into SQLiteKeep it freshWeb endpointPublishing to the web Publish interactive datasets with Datasette Basic setup Persistent dataset storage Getting a dataset Data munging Inserting into SQLite Keep it fresh Web endpoint Publishing to the web Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 10_integrations/covid_datasette.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 10_integrations/covid_datasette.py $ modal run 10_integrations/covid_datasette.py modal run 10_integrations/covid_datasette.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ","After setting up an account and installing the Modal Python package, you run an example by cloning the modal-examples repository and running the desired example script, for example ""modal run 10_integrations/covid_datasette.py""."
0,What does Modal allow you to create for multiple functions?,Network file systems,"Modal lets you createwriteable volumesthat can be
simultaneously attached to multiple Modal functions. These are helpful for use
cases such as: writeable volumes Storing datasetsKeeping a shared cache for expensive computationsLeveraging POSIX filesystem APIs for both local and remote data storage Storing datasets Keeping a shared cache for expensive computations Leveraging POSIX filesystem APIs for both local and remote data storage ",Modal lets you create writeable volumes that can be simultaneously attached to multiple functions.
3,How can Modal help with data storage?,Network file systems,"Modal lets you createwriteable volumesthat can be
simultaneously attached to multiple Modal functions. These are helpful for use
cases such as: writeable volumes Storing datasetsKeeping a shared cache for expensive computationsLeveraging POSIX filesystem APIs for both local and remote data storage Storing datasets Keeping a shared cache for expensive computations Leveraging POSIX filesystem APIs for both local and remote data storage ",Modal can help with data storage by creating writeable volumes that can store datasets and keep a shared cache for expensive computations.
6,What is the benefit of using Modal writeable volumes in case of expensive computations?,Network file systems,"Modal lets you createwriteable volumesthat can be
simultaneously attached to multiple Modal functions. These are helpful for use
cases such as: writeable volumes Storing datasetsKeeping a shared cache for expensive computationsLeveraging POSIX filesystem APIs for both local and remote data storage Storing datasets Keeping a shared cache for expensive computations Leveraging POSIX filesystem APIs for both local and remote data storage ","Modal writeable volumes can be used to keep a shared cache for expensive computations, reducing the cost and time of computation."
0,What is the default lifespan of a NetworkFileSystem object in Modal?,Network file systems Persisting volumes,"By default, amodal.NetworkFileSystemlives as long as the app it’s defined in, just like any other Modal object.
However in many situations you might want to persist file data between runs of
the app. To do this, you can use thepersistedmethod on theNetworkFileSystemobject. For example, to durably store trained model
checkpoints when running a model training job: modal.NetworkFileSystem persisted NetworkFileSystem importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) import ""job-storage-vol"" ""/models"" @stub.function(network_file_systems={MODEL_DIR: volume},) network_file_systems={MODEL_DIR: volume}, def run_training Copy Copy    Copy ",The default lifespan of a NetworkFileSystem object in Modal is as long as the app it's defined in.
3,Can you provide an example of how to durably store trained model checkpoints in NetworkFileSystem?,Network file systems Persisting volumes,"By default, amodal.NetworkFileSystemlives as long as the app it’s defined in, just like any other Modal object.
However in many situations you might want to persist file data between runs of
the app. To do this, you can use thepersistedmethod on theNetworkFileSystemobject. For example, to durably store trained model
checkpoints when running a model training job: modal.NetworkFileSystem persisted NetworkFileSystem importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) import ""job-storage-vol"" ""/models"" @stub.function(network_file_systems={MODEL_DIR: volume},) network_file_systems={MODEL_DIR: volume}, def run_training Copy Copy    Copy ","Yes, you can durably store trained model checkpoints in NetworkFileSystem by using the persisted method on the NetworkFileSystem object like so: "
5,stub = modal.Stub(),Network file systems Persisting volumes,"By default, amodal.NetworkFileSystemlives as long as the app it’s defined in, just like any other Modal object.
However in many situations you might want to persist file data between runs of
the app. To do this, you can use thepersistedmethod on theNetworkFileSystemobject. For example, to durably store trained model
checkpoints when running a model training job: modal.NetworkFileSystem persisted NetworkFileSystem importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) import ""job-storage-vol"" ""/models"" @stub.function(network_file_systems={MODEL_DIR: volume},) network_file_systems={MODEL_DIR: volume}, def run_training Copy Copy    Copy ","MODEL_DIR =""/models"""
6,"@stub.function(network_file_systems={MODEL_DIR: volume},)",Network file systems Persisting volumes,"By default, amodal.NetworkFileSystemlives as long as the app it’s defined in, just like any other Modal object.
However in many situations you might want to persist file data between runs of
the app. To do this, you can use thepersistedmethod on theNetworkFileSystemobject. For example, to durably store trained model
checkpoints when running a model training job: modal.NetworkFileSystem persisted NetworkFileSystem importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) import ""job-storage-vol"" ""/models"" @stub.function(network_file_systems={MODEL_DIR: volume},) network_file_systems={MODEL_DIR: volume}, def run_training Copy Copy    Copy ",def run_training():
7,    ...,Network file systems Persisting volumes,"By default, amodal.NetworkFileSystemlives as long as the app it’s defined in, just like any other Modal object.
However in many situations you might want to persist file data between runs of
the app. To do this, you can use thepersistedmethod on theNetworkFileSystemobject. For example, to durably store trained model
checkpoints when running a model training job: modal.NetworkFileSystem persisted NetworkFileSystem importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) import ""job-storage-vol"" ""/models"" @stub.function(network_file_systems={MODEL_DIR: volume},) network_file_systems={MODEL_DIR: volume}, def run_training Copy Copy    Copy ",    ...
9,What is the purpose of using the modal.Stub() in the NetworkFileSystem example?,Network file systems Persisting volumes,"By default, amodal.NetworkFileSystemlives as long as the app it’s defined in, just like any other Modal object.
However in many situations you might want to persist file data between runs of
the app. To do this, you can use thepersistedmethod on theNetworkFileSystemobject. For example, to durably store trained model
checkpoints when running a model training job: modal.NetworkFileSystem persisted NetworkFileSystem importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR)Copy importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) importmodal

volume = modal.NetworkFileSystem.persisted(""job-storage-vol"")

stub = modal.Stub()

MODEL_DIR =""/models""@stub.function(network_file_systems={MODEL_DIR: volume},)defrun_training():
    ...
    ...
    trainer.save(MODEL_DIR) import ""job-storage-vol"" ""/models"" @stub.function(network_file_systems={MODEL_DIR: volume},) network_file_systems={MODEL_DIR: volume}, def run_training Copy Copy    Copy ",The modal.Stub() is used to create a stub or a simple object for testing.
0,How do you remove a persisted network file system and delete all its data?,Network file systems Deleting volumes,"To remove a persisted network file system, deleting all its data, you must
“stop” it. This can be done via the network file system’s dashboard app page or
the CLI. For example, a file system with the namemy-volthat lives in thee-corpworkspace could be stopped (i.e. deleted) by going to its dashboard page athttps://modal.com/apps/e-corp/my-voland clicking the trash icon. Alternatively,
you can use the file system’s app ID withmodal app stop. my-vol e-corp https://modal.com/apps/e-corp/my-vol modal app stop modal app stop (Network File Systems are currently a specialized app type within Modal, which
is why deleting one is done by stopping an app.) ",You must “stop” it either via the network file system’s dashboard app page or the CLI.
3,What is the action performed on the dashboard page to delete a file system?,Network file systems Deleting volumes,"To remove a persisted network file system, deleting all its data, you must
“stop” it. This can be done via the network file system’s dashboard app page or
the CLI. For example, a file system with the namemy-volthat lives in thee-corpworkspace could be stopped (i.e. deleted) by going to its dashboard page athttps://modal.com/apps/e-corp/my-voland clicking the trash icon. Alternatively,
you can use the file system’s app ID withmodal app stop. my-vol e-corp https://modal.com/apps/e-corp/my-vol modal app stop modal app stop (Network File Systems are currently a specialized app type within Modal, which
is why deleting one is done by stopping an app.) ",You should navigate to the file system's dashboard page and click on the trash icon to delete it.
6,What would be the URL to access the dashboard of a file system named 'my-vol' in 'e-corp' workspace?,Network file systems Deleting volumes,"To remove a persisted network file system, deleting all its data, you must
“stop” it. This can be done via the network file system’s dashboard app page or
the CLI. For example, a file system with the namemy-volthat lives in thee-corpworkspace could be stopped (i.e. deleted) by going to its dashboard page athttps://modal.com/apps/e-corp/my-voland clicking the trash icon. Alternatively,
you can use the file system’s app ID withmodal app stop. my-vol e-corp https://modal.com/apps/e-corp/my-vol modal app stop modal app stop (Network File Systems are currently a specialized app type within Modal, which
is why deleting one is done by stopping an app.) ",The URL would be https://modal.com/apps/e-corp/my-vol.
0,"What does the Modal Podcast Transcriber use to store raw audio, metadata, and finished transcriptions?",Network file systems Further examples,"TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. Modal Podcast Transcriber Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systems Basic example Persisting volumes Deleting volumes Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",It uses a persisted network file system.
3,"What does the company Modal Labs, Inc offer?",Network file systems Further examples,"TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. Modal Podcast Transcriber Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systems Basic example Persisting volumes Deleting volumes Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs, Inc offers examples, documentation, pricing and legal information."
6,What happens after importing files in the code snippet?,Network file systems Further examples,"TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. Modal Podcast Transcriber Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systems Basic example Persisting volumes Deleting volumes Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","After importing files, the 'start' function of 'kit' is called with 'app', 'element', and an object as arguments."
0,What does TheModal Podcast Transcriber use a network file system for?,Network file systems Further examples,"TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. Modal Podcast Transcriber Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systems Basic example Persisting volumes Deleting volumes Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","It uses a network file system to durably store raw audio, metadata, and finished transcriptions."
3,What is the basic function of network file systems as showcased in the provided script?,Network file systems Further examples,"TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. Modal Podcast Transcriber Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systems Basic example Persisting volumes Deleting volumes Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The basic functions of network file systems showcased here are persisting volumes and deleting volumes.
6,What file types are referenced in the code snippet?,Network file systems Further examples,"TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. TheModal Podcast Transcriberuses a
persisted network file system to durably store raw audio, metadata, and
finished transcriptions. Modal Podcast Transcriber Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systemsBasic examplePersisting volumesDeleting volumesFurther examples Network file systems Basic example Persisting volumes Deleting volumes Further examples CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The file types referenced in the code includes "".js"" or JavaScript file."
0,What does Modal provide for the enhancement of your applications' performance? ,Scaling out,"Modal has a few different tools that helps with increasing performance of your
applications. ",Modal provides a few different tools that help with increasing performance of your applications.
3,What can be achieved with the tools Modal provides?,Scaling out,"Modal has a few different tools that helps with increasing performance of your
applications. ",Increased performance of applications can be achieved with the tools Modal provides.
6,"In terms of application performance, what does Modal assist with? ",Scaling out,"Modal has a few different tools that helps with increasing performance of your
applications. ",Modal assists with scaling out to increase the performance of applications.
0,What are the two types of Modal APIs available?,Scaling out Asynchronous usage,"All Modal APIs are available in both blocking and asynchronous variants. If you
are comfortable with asynchronous programming, you can use it to create
arbitrary parallel execution patterns, with the added benefit that any Modal
functions will be executed remotely. See theasync guideor
the examples for more information about asynchronous usage. async guide ",Both blocking and asynchronous variants of Modal APIs are available.
3,Where can more information about asynchronous usage be found?,Scaling out Asynchronous usage,"All Modal APIs are available in both blocking and asynchronous variants. If you
are comfortable with asynchronous programming, you can use it to create
arbitrary parallel execution patterns, with the added benefit that any Modal
functions will be executed remotely. See theasync guideor
the examples for more information about asynchronous usage. async guide ",More information about asynchronous usage can be found in the async guide and the examples.
6,What happens when Modal functions are used in asynchronous programming?,Scaling out Asynchronous usage,"All Modal APIs are available in both blocking and asynchronous variants. If you
are comfortable with asynchronous programming, you can use it to create
arbitrary parallel execution patterns, with the added benefit that any Modal
functions will be executed remotely. See theasync guideor
the examples for more information about asynchronous usage. async guide ","When used in asynchronous programming, any Modal functions will be executed remotely."
0,What does scaling out GPU acceleration imply?,Scaling out GPU acceleration,"Sometimes you can speed up your applications by utilizing GPU acceleration. See
thegpu sectionfor more information. gpu section ",It implies that you can speed up your applications by utilizing GPU acceleration.
3,What can be potentially improved by scaling out GPU acceleration?,Scaling out GPU acceleration,"Sometimes you can speed up your applications by utilizing GPU acceleration. See
thegpu sectionfor more information. gpu section ",Your applications' speed can be potentially improved by scaling out GPU acceleration.
6,Is there a recourse if one needs to understand GPU acceleration better?,Scaling out GPU acceleration,"Sometimes you can speed up your applications by utilizing GPU acceleration. See
thegpu sectionfor more information. gpu section ","Yes, the GPU section provides a resource for better understanding of GPU acceleration."
0,What is the purpose of the 'concurrency_limit' argument in 'stub.function'?,Scaling out Limiting concurrency,"If you want to limit concurrency, you can use theconcurrency_limitargument
tostub.function. For instance: concurrency_limit stub.function stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) @stub.function(concurrency_limit=5) concurrency_limit=5 5 def f x print Copy Copy    Copy With this, Modal will run at most 5 concurrent functions at any point. Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrency Scaling out Parallel execution of inputs Out of order results and flatmap Exceptions Starmap Gotchas Asynchronous usage GPU acceleration Limiting concurrency See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in action Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints     Job queue for OCR Job queue for OCR Job queue for OCR     Parallel web scraping Parallel web scraping Parallel web scraping     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The 'concurrency_limit' argument in 'stub.function' is used to limit concurrency. 
3,What functionalities does Modal provide aside from limiting concurrency?,Scaling out Limiting concurrency,"If you want to limit concurrency, you can use theconcurrency_limitargument
tostub.function. For instance: concurrency_limit stub.function stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) @stub.function(concurrency_limit=5) concurrency_limit=5 5 def f x print Copy Copy    Copy With this, Modal will run at most 5 concurrent functions at any point. Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrency Scaling out Parallel execution of inputs Out of order results and flatmap Exceptions Starmap Gotchas Asynchronous usage GPU acceleration Limiting concurrency See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in action Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints     Job queue for OCR Job queue for OCR Job queue for OCR     Parallel web scraping Parallel web scraping Parallel web scraping     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal provides functionalities such as parallel execution of inputs, handling out of order results and flatmap exceptions, star mapping, asynchronous usage and GPU acceleration."
6,"What is the name of the company that developed Modal, according to the content?",Scaling out Limiting concurrency,"If you want to limit concurrency, you can use theconcurrency_limitargument
tostub.function. For instance: concurrency_limit stub.function stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) @stub.function(concurrency_limit=5) concurrency_limit=5 5 def f x print Copy Copy    Copy With this, Modal will run at most 5 concurrent functions at any point. Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrency Scaling out Parallel execution of inputs Out of order results and flatmap Exceptions Starmap Gotchas Asynchronous usage GPU acceleration Limiting concurrency See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in action Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints     Job queue for OCR Job queue for OCR Job queue for OCR     Parallel web scraping Parallel web scraping Parallel web scraping     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The name of the company that developed Modal is Modal Labs, Inc."
0,What function can be used to limit concurrency?,Scaling out Limiting concurrency,"If you want to limit concurrency, you can use theconcurrency_limitargument
tostub.function. For instance: concurrency_limit stub.function stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) @stub.function(concurrency_limit=5) concurrency_limit=5 5 def f x print Copy Copy    Copy With this, Modal will run at most 5 concurrent functions at any point. Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrency Scaling out Parallel execution of inputs Out of order results and flatmap Exceptions Starmap Gotchas Asynchronous usage GPU acceleration Limiting concurrency See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in action Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints     Job queue for OCR Job queue for OCR Job queue for OCR     Parallel web scraping Parallel web scraping Parallel web scraping     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The concurrency_limit argument to stub.function can be used to limit concurrency.
3,What other features are associated with Modal apart from limiting concurrency?,Scaling out Limiting concurrency,"If you want to limit concurrency, you can use theconcurrency_limitargument
tostub.function. For instance: concurrency_limit stub.function stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) @stub.function(concurrency_limit=5) concurrency_limit=5 5 def f x print Copy Copy    Copy With this, Modal will run at most 5 concurrent functions at any point. Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrency Scaling out Parallel execution of inputs Out of order results and flatmap Exceptions Starmap Gotchas Asynchronous usage GPU acceleration Limiting concurrency See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in action Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints     Job queue for OCR Job queue for OCR Job queue for OCR     Parallel web scraping Parallel web scraping Parallel web scraping     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Other features associated with Modal are Parallel execution of inputs, out of order results and flatmap, Exceptions, Starmap, Gotchas, Asynchronous usage, GPU acceleration, Auto-scaling LLM inference endpoints, Job queue for OCR, and Parallel web scraping."
6,What does the code import in the example?,Scaling out Limiting concurrency,"If you want to limit concurrency, you can use theconcurrency_limitargument
tostub.function. For instance: concurrency_limit stub.function stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x)Copy stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) stub = modal.Stub()@stub.function(concurrency_limit=5)deff(x):print(x) @stub.function(concurrency_limit=5) concurrency_limit=5 5 def f x print Copy Copy    Copy With this, Modal will run at most 5 concurrent functions at any point. Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrencySee it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping Scaling outParallel execution of inputsOut of order results and flatmapExceptionsStarmapGotchasAsynchronous usageGPU accelerationLimiting concurrency Scaling out Parallel execution of inputs Out of order results and flatmap Exceptions Starmap Gotchas Asynchronous usage GPU acceleration Limiting concurrency See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in actionAuto-scaling LLM inference endpointsJob queue for OCRParallel web scraping See it in action Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints Auto-scaling LLM inference endpoints     Job queue for OCR Job queue for OCR Job queue for OCR     Parallel web scraping Parallel web scraping Parallel web scraping     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The code imports ""../../_app/immutable/entry/start.be12ce5d.js"" and ""../../_app/immutable/entry/app.917210b3.js""."
0,What does Modal allow one to do? ,Introduction to Modal,"Modal lets you run code in the cloud without having to think about
infrastructure. ",Modal allows you to run code in the cloud.
3,Is there a need to consider infrastructure when using Modal?,Introduction to Modal,"Modal lets you run code in the cloud without having to think about
infrastructure. ","No, there is no need to consider infrastructure when using Modal."
6,What aspect does Modal eliminate from the user's worry when running code?,Introduction to Modal,"Modal lets you run code in the cloud without having to think about
infrastructure. ",Modal eliminates the worry about infrastructure when running code.
0,What is the initial setup required to use Modal?,Introduction to Modal Getting started,"The nicest thing about all of this is thatyou don’t have to set up any
infrastructure.Just: you don’t have to set up any
infrastructure. Create an account atmodal.comInstall themodalPython packageSet up a token Create an account atmodal.com modal.com Install themodalPython package modal Set up a token …and you can start running jobs right away. Modal is currently Python-only, but we may support other languages in the
future. ","The initial setup requires creating an account at modal.com, installing the modal Python package, and setting up a token."
3,Which programming language is currently supported by Modal? ,Introduction to Modal Getting started,"The nicest thing about all of this is thatyou don’t have to set up any
infrastructure.Just: you don’t have to set up any
infrastructure. Create an account atmodal.comInstall themodalPython packageSet up a token Create an account atmodal.com modal.com Install themodalPython package modal Set up a token …and you can start running jobs right away. Modal is currently Python-only, but we may support other languages in the
future. ",Modal currently only supports Python.
6,What should you do to start running jobs immediately after setting up Modal? ,Introduction to Modal Getting started,"The nicest thing about all of this is thatyou don’t have to set up any
infrastructure.Just: you don’t have to set up any
infrastructure. Create an account atmodal.comInstall themodalPython packageSet up a token Create an account atmodal.com modal.com Install themodalPython package modal Set up a token …and you can start running jobs right away. Modal is currently Python-only, but we may support other languages in the
future. ","After setting up Modal, just create a token and you can start running jobs right away."
0,What does Modal do with your code?,Introduction to Modal How does it work,"Modal takes your code, puts it in a container, and executes it in the cloud. Where does it run? Modal runs it in its own cloud environment. The benefit is
that we solve all the hard infrastructure problems for you, so you don’t have to
do anything. You don’t need to mess with Kubernetes, Docker or even an AWS
account. Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work? Introduction to Modal Features Getting started How does it work? See it in actionHello, world!A simple web scraper See it in actionHello, world!A simple web scraper See it in action Hello, world! Hello, world! Hello, world!     A simple web scraper A simple web scraper A simple web scraper     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL("".."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../_app/immutable/entry/start.be12ce5d.js""),
						import(""../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal takes your code, puts it in a container, and executes it in the cloud."
3,What are the benefits of using Modal?,Introduction to Modal How does it work,"Modal takes your code, puts it in a container, and executes it in the cloud. Where does it run? Modal runs it in its own cloud environment. The benefit is
that we solve all the hard infrastructure problems for you, so you don’t have to
do anything. You don’t need to mess with Kubernetes, Docker or even an AWS
account. Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work? Introduction to Modal Features Getting started How does it work? See it in actionHello, world!A simple web scraper See it in actionHello, world!A simple web scraper See it in action Hello, world! Hello, world! Hello, world!     A simple web scraper A simple web scraper A simple web scraper     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL("".."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../_app/immutable/entry/start.be12ce5d.js""),
						import(""../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The benefit of using Modal is that it solves all the hard infrastructure problems for you, so you don’t have to do anything with Kubernetes, Docker or an AWS account."
6,Who owns Modal?,Introduction to Modal How does it work,"Modal takes your code, puts it in a container, and executes it in the cloud. Where does it run? Modal runs it in its own cloud environment. The benefit is
that we solve all the hard infrastructure problems for you, so you don’t have to
do anything. You don’t need to mess with Kubernetes, Docker or even an AWS
account. Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work? Introduction to Modal Features Getting started How does it work? See it in actionHello, world!A simple web scraper See it in actionHello, world!A simple web scraper See it in action Hello, world! Hello, world! Hello, world!     A simple web scraper A simple web scraper A simple web scraper     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL("".."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../_app/immutable/entry/start.be12ce5d.js""),
						import(""../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal is owned by Modal Labs, Inc."
0,What does Modal do with your code?,Introduction to Modal How does it work,"Modal takes your code, puts it in a container, and executes it in the cloud. Where does it run? Modal runs it in its own cloud environment. The benefit is
that we solve all the hard infrastructure problems for you, so you don’t have to
do anything. You don’t need to mess with Kubernetes, Docker or even an AWS
account. Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work? Introduction to Modal Features Getting started How does it work? See it in actionHello, world!A simple web scraper See it in actionHello, world!A simple web scraper See it in action Hello, world! Hello, world! Hello, world!     A simple web scraper A simple web scraper A simple web scraper     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL("".."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../_app/immutable/entry/start.be12ce5d.js""),
						import(""../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal takes your code, puts it in a container, and executes it in the cloud. "
3,What is the main benefit of using Modal?,Introduction to Modal How does it work,"Modal takes your code, puts it in a container, and executes it in the cloud. Where does it run? Modal runs it in its own cloud environment. The benefit is
that we solve all the hard infrastructure problems for you, so you don’t have to
do anything. You don’t need to mess with Kubernetes, Docker or even an AWS
account. Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work? Introduction to Modal Features Getting started How does it work? See it in actionHello, world!A simple web scraper See it in actionHello, world!A simple web scraper See it in action Hello, world! Hello, world! Hello, world!     A simple web scraper A simple web scraper A simple web scraper     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL("".."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../_app/immutable/entry/start.be12ce5d.js""),
						import(""../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal solves all the hard infrastructure problems for you, so you don’t have to do anything. You don’t need to mess with Kubernetes, Docker or even an AWS account."
6,What are some of the features offered by Modal?,Introduction to Modal How does it work,"Modal takes your code, puts it in a container, and executes it in the cloud. Where does it run? Modal runs it in its own cloud environment. The benefit is
that we solve all the hard infrastructure problems for you, so you don’t have to
do anything. You don’t need to mess with Kubernetes, Docker or even an AWS
account. Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work?See it in actionHello, world!A simple web scraper Introduction to ModalFeaturesGetting startedHow does it work? Introduction to Modal Features Getting started How does it work? See it in actionHello, world!A simple web scraper See it in actionHello, world!A simple web scraper See it in action Hello, world! Hello, world! Hello, world!     A simple web scraper A simple web scraper A simple web scraper     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL("".."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../_app/immutable/entry/start.be12ce5d.js""),
						import(""../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","There's no specific details in the content but references are made to containerization, execution in the cloud, and infrastructure problem-solving."
0,What is the main configuration options in Modal? ,modalconfig,"Modal intentionally keeps configurability to a minimum. The main configuration options are the API tokens: the token id and the token secret.
These can be configured in two ways: By running themodal token setcommand.
This writes the tokens to.modal.tomlfile in your home directory.By setting the environment variablesMODAL_TOKEN_IDandMODAL_TOKEN_SECRET.
This takes precedence over the previous method. By running themodal token setcommand.
This writes the tokens to.modal.tomlfile in your home directory. modal token set .modal.toml By setting the environment variablesMODAL_TOKEN_IDandMODAL_TOKEN_SECRET.
This takes precedence over the previous method. MODAL_TOKEN_ID MODAL_TOKEN_SECRET ",The main configuration options are the API tokens: the token id and the token secret.
3,"What does the command ""modal token set"" do? ",modalconfig,"Modal intentionally keeps configurability to a minimum. The main configuration options are the API tokens: the token id and the token secret.
These can be configured in two ways: By running themodal token setcommand.
This writes the tokens to.modal.tomlfile in your home directory.By setting the environment variablesMODAL_TOKEN_IDandMODAL_TOKEN_SECRET.
This takes precedence over the previous method. By running themodal token setcommand.
This writes the tokens to.modal.tomlfile in your home directory. modal token set .modal.toml By setting the environment variablesMODAL_TOKEN_IDandMODAL_TOKEN_SECRET.
This takes precedence over the previous method. MODAL_TOKEN_ID MODAL_TOKEN_SECRET ",This command writes the tokens to a .modal.toml file in your home directory.
6,When would setting the environment variables MODAL_TOKEN_ID and MODAL_TOKEN_SECRET take precedence? ,modalconfig,"Modal intentionally keeps configurability to a minimum. The main configuration options are the API tokens: the token id and the token secret.
These can be configured in two ways: By running themodal token setcommand.
This writes the tokens to.modal.tomlfile in your home directory.By setting the environment variablesMODAL_TOKEN_IDandMODAL_TOKEN_SECRET.
This takes precedence over the previous method. By running themodal token setcommand.
This writes the tokens to.modal.tomlfile in your home directory. modal token set .modal.toml By setting the environment variablesMODAL_TOKEN_IDandMODAL_TOKEN_SECRET.
This takes precedence over the previous method. MODAL_TOKEN_ID MODAL_TOKEN_SECRET ",Setting the environment variables MODAL_TOKEN_ID and MODAL_TOKEN_SECRET will take precedence over running the modal token set command.
0,How can a token be set using the CLI?,modalconfig Setting tokens using the CLI,"You can set a token by running the command:: modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> set id Copy Copy    Copy This will write the token id and secret to.modal.toml. .modal.toml If the token id or secret is provided as the string-(a single dash),
then it will be read in a secret way from stdin instead. - ",A token can be set by running the command: modal tokenset\
1,  --token-id <tokenid> \,modalconfig Setting tokens using the CLI,"You can set a token by running the command:: modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> set id Copy Copy    Copy This will write the token id and secret to.modal.toml. .modal.toml If the token id or secret is provided as the string-(a single dash),
then it will be read in a secret way from stdin instead. - ",  --token-secret <token secret>. 
3,The command that writes the token id and secret to .modal.toml is : modal tokenset\,modalconfig Setting tokens using the CLI,"You can set a token by running the command:: modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> set id Copy Copy    Copy This will write the token id and secret to.modal.toml. .modal.toml If the token id or secret is provided as the string-(a single dash),
then it will be read in a secret way from stdin instead. - ",  --token-id <tokenid> \
5,What happens if the token id or secret is provided as the string -(a single dash)?,modalconfig Setting tokens using the CLI,"You can set a token by running the command:: modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> set id Copy Copy    Copy This will write the token id and secret to.modal.toml. .modal.toml If the token id or secret is provided as the string-(a single dash),
then it will be read in a secret way from stdin instead. - ","If the token id or secret is provided as the string -(a single dash), then it will be read in a secret way from stdin instead."
8,Where will the token id and secret be written to?,modalconfig Setting tokens using the CLI,"You can set a token by running the command:: modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret>Copy modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> modal tokenset\
  --token-id <tokenid> \
  --token-secret <token secret> set id Copy Copy    Copy This will write the token id and secret to.modal.toml. .modal.toml If the token id or secret is provided as the string-(a single dash),
then it will be read in a secret way from stdin instead. - ",The token id and secret will be written to .modal.toml.
0,What is the default setting for loglevel in the .toml file or as a MODAL_LOGLEVEL environment variable?,modalconfig Other configuration options,"Other possible configuration options are: loglevel(in the .toml file) /MODAL_LOGLEVEL(as an env var).
Defaults toWARNING.
Set this toDEBUGto see a bunch of internal output.logs_timeout(in the .toml file) /MODAL_LOGS_TIMEOUT(as an env var).
Defaults to 10.
Number of seconds to wait for logs to drain when closing the session,
before giving up.automount(in the .toml file) /MODAL_AUTOMOUNT(as an env var).
Defaults to True.
By default, Modal automatically mounts modules imported in the current scope, that
are deemed to be “local”. This can be turned off by setting this to False.server_url(in the .toml file) /MODAL_SERVER_URL(as an env var).
Defaults tohttps://api.modal.com.
Not typically meant to be used. loglevel(in the .toml file) /MODAL_LOGLEVEL(as an env var).
Defaults toWARNING.
Set this toDEBUGto see a bunch of internal output. loglevel MODAL_LOGLEVEL WARNING DEBUG logs_timeout(in the .toml file) /MODAL_LOGS_TIMEOUT(as an env var).
Defaults to 10.
Number of seconds to wait for logs to drain when closing the session,
before giving up. logs_timeout MODAL_LOGS_TIMEOUT automount(in the .toml file) /MODAL_AUTOMOUNT(as an env var).
Defaults to True.
By default, Modal automatically mounts modules imported in the current scope, that
are deemed to be “local”. This can be turned off by setting this to False. automount MODAL_AUTOMOUNT server_url(in the .toml file) /MODAL_SERVER_URL(as an env var).
Defaults tohttps://api.modal.com.
Not typically meant to be used. server_url MODAL_SERVER_URL https://api.modal.com ",The default setting is WARNING.
3,What is the default setting for server_url in the .toml file or as a MODAL_SERVER_URL environment variable?,modalconfig Other configuration options,"Other possible configuration options are: loglevel(in the .toml file) /MODAL_LOGLEVEL(as an env var).
Defaults toWARNING.
Set this toDEBUGto see a bunch of internal output.logs_timeout(in the .toml file) /MODAL_LOGS_TIMEOUT(as an env var).
Defaults to 10.
Number of seconds to wait for logs to drain when closing the session,
before giving up.automount(in the .toml file) /MODAL_AUTOMOUNT(as an env var).
Defaults to True.
By default, Modal automatically mounts modules imported in the current scope, that
are deemed to be “local”. This can be turned off by setting this to False.server_url(in the .toml file) /MODAL_SERVER_URL(as an env var).
Defaults tohttps://api.modal.com.
Not typically meant to be used. loglevel(in the .toml file) /MODAL_LOGLEVEL(as an env var).
Defaults toWARNING.
Set this toDEBUGto see a bunch of internal output. loglevel MODAL_LOGLEVEL WARNING DEBUG logs_timeout(in the .toml file) /MODAL_LOGS_TIMEOUT(as an env var).
Defaults to 10.
Number of seconds to wait for logs to drain when closing the session,
before giving up. logs_timeout MODAL_LOGS_TIMEOUT automount(in the .toml file) /MODAL_AUTOMOUNT(as an env var).
Defaults to True.
By default, Modal automatically mounts modules imported in the current scope, that
are deemed to be “local”. This can be turned off by setting this to False. automount MODAL_AUTOMOUNT server_url(in the .toml file) /MODAL_SERVER_URL(as an env var).
Defaults tohttps://api.modal.com.
Not typically meant to be used. server_url MODAL_SERVER_URL https://api.modal.com ",The default is https://api.modal.com.
6,What happens if I set the loglevel/MODAL_LOGLEVEL to DEBUG?,modalconfig Other configuration options,"Other possible configuration options are: loglevel(in the .toml file) /MODAL_LOGLEVEL(as an env var).
Defaults toWARNING.
Set this toDEBUGto see a bunch of internal output.logs_timeout(in the .toml file) /MODAL_LOGS_TIMEOUT(as an env var).
Defaults to 10.
Number of seconds to wait for logs to drain when closing the session,
before giving up.automount(in the .toml file) /MODAL_AUTOMOUNT(as an env var).
Defaults to True.
By default, Modal automatically mounts modules imported in the current scope, that
are deemed to be “local”. This can be turned off by setting this to False.server_url(in the .toml file) /MODAL_SERVER_URL(as an env var).
Defaults tohttps://api.modal.com.
Not typically meant to be used. loglevel(in the .toml file) /MODAL_LOGLEVEL(as an env var).
Defaults toWARNING.
Set this toDEBUGto see a bunch of internal output. loglevel MODAL_LOGLEVEL WARNING DEBUG logs_timeout(in the .toml file) /MODAL_LOGS_TIMEOUT(as an env var).
Defaults to 10.
Number of seconds to wait for logs to drain when closing the session,
before giving up. logs_timeout MODAL_LOGS_TIMEOUT automount(in the .toml file) /MODAL_AUTOMOUNT(as an env var).
Defaults to True.
By default, Modal automatically mounts modules imported in the current scope, that
are deemed to be “local”. This can be turned off by setting this to False. automount MODAL_AUTOMOUNT server_url(in the .toml file) /MODAL_SERVER_URL(as an env var).
Defaults tohttps://api.modal.com.
Not typically meant to be used. server_url MODAL_SERVER_URL https://api.modal.com ",Setting this to DEBUG will allow you to see a bunch of internal output.
0,What does the environment variable MODAL_CONFIG_PATH do?,modalconfig Metaconfiguration,"Some “meta-options” are set using environment variables only: MODAL_CONFIG_PATHlets you override the location of the .toml file,
by default~/.modal.toml.MODAL_PROFILElets you use multiple sections in the .toml file
and switch between them. It defaults to “default”. MODAL_CONFIG_PATHlets you override the location of the .toml file,
by default~/.modal.toml. MODAL_CONFIG_PATH ~/.modal.toml MODAL_PROFILElets you use multiple sections in the .toml file
and switch between them. It defaults to “default”. MODAL_PROFILE ",It lets you override the location of the .toml file.
3,What is the function of the MODAL_PROFILE environment variable?,modalconfig Metaconfiguration,"Some “meta-options” are set using environment variables only: MODAL_CONFIG_PATHlets you override the location of the .toml file,
by default~/.modal.toml.MODAL_PROFILElets you use multiple sections in the .toml file
and switch between them. It defaults to “default”. MODAL_CONFIG_PATHlets you override the location of the .toml file,
by default~/.modal.toml. MODAL_CONFIG_PATH ~/.modal.toml MODAL_PROFILElets you use multiple sections in the .toml file
and switch between them. It defaults to “default”. MODAL_PROFILE ",MODAL_PROFILE lets you use multiple sections in the .toml file and switch between them.
6,Can you use multiple sections in the .toml file?,modalconfig Metaconfiguration,"Some “meta-options” are set using environment variables only: MODAL_CONFIG_PATHlets you override the location of the .toml file,
by default~/.modal.toml.MODAL_PROFILElets you use multiple sections in the .toml file
and switch between them. It defaults to “default”. MODAL_CONFIG_PATHlets you override the location of the .toml file,
by default~/.modal.toml. MODAL_CONFIG_PATH ~/.modal.toml MODAL_PROFILElets you use multiple sections in the .toml file
and switch between them. It defaults to “default”. MODAL_PROFILE ","Yes, you can use multiple sections in the .toml file and switch between them using the MODAL_PROFILE environment variable."
0,What is the purpose of the Config object in Modal configuration?,modalconfig modalconfigConfig,"classConfig(object)Copy classConfig(object)Copy classConfig(object)Copy classConfig(object) classConfig(object) classConfig(object) class Config object Copy Copy    Copy Singleton that holds configuration used by Modal internally. def__init__(self):Copy def__init__(self):Copy def__init__(self):Copy def__init__(self): def__init__(self): def__init__(self): def __init__ self Copy Copy    Copy get defget(self, key, profile=None):Copy defget(self, key, profile=None):Copy defget(self, key, profile=None):Copy defget(self, key, profile=None): defget(self, key, profile=None): defget(self, key, profile=None): def get self, key, profile=None None Copy Copy    Copy Looks up a configuration value. Will check (in decreasing order of priority): Any environment variable of the form MODAL_FOO_BARSettings in the user’s .toml configuration fileThe default value of the setting Any environment variable of the form MODAL_FOO_BAR Settings in the user’s .toml configuration file The default value of the setting override_locally defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. def override_locally self, key:str, value:str str str # Override setting in this process by overriding environment variable for the setting # # Does NOT write back to settings file etc. Copy Copy    Copy to_dict defto_dict(self):Copy defto_dict(self):Copy defto_dict(self):Copy defto_dict(self): defto_dict(self): defto_dict(self): def to_dict self Copy Copy    Copy ",The Config object holds configurations used by Modal internally.
3,What is the purpose of the 'override_locally' function in Modal's Config class?,modalconfig modalconfigConfig,"classConfig(object)Copy classConfig(object)Copy classConfig(object)Copy classConfig(object) classConfig(object) classConfig(object) class Config object Copy Copy    Copy Singleton that holds configuration used by Modal internally. def__init__(self):Copy def__init__(self):Copy def__init__(self):Copy def__init__(self): def__init__(self): def__init__(self): def __init__ self Copy Copy    Copy get defget(self, key, profile=None):Copy defget(self, key, profile=None):Copy defget(self, key, profile=None):Copy defget(self, key, profile=None): defget(self, key, profile=None): defget(self, key, profile=None): def get self, key, profile=None None Copy Copy    Copy Looks up a configuration value. Will check (in decreasing order of priority): Any environment variable of the form MODAL_FOO_BARSettings in the user’s .toml configuration fileThe default value of the setting Any environment variable of the form MODAL_FOO_BAR Settings in the user’s .toml configuration file The default value of the setting override_locally defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. def override_locally self, key:str, value:str str str # Override setting in this process by overriding environment variable for the setting # # Does NOT write back to settings file etc. Copy Copy    Copy to_dict defto_dict(self):Copy defto_dict(self):Copy defto_dict(self):Copy defto_dict(self): defto_dict(self): defto_dict(self): def to_dict self Copy Copy    Copy ",The 'override_locally' function is used to override a setting in the current process by overriding the environment variable for the setting. It does not write back to the settings file.
6,What is the function of 'to_dict' method in Modal's Config class?,modalconfig modalconfigConfig,"classConfig(object)Copy classConfig(object)Copy classConfig(object)Copy classConfig(object) classConfig(object) classConfig(object) class Config object Copy Copy    Copy Singleton that holds configuration used by Modal internally. def__init__(self):Copy def__init__(self):Copy def__init__(self):Copy def__init__(self): def__init__(self): def__init__(self): def __init__ self Copy Copy    Copy get defget(self, key, profile=None):Copy defget(self, key, profile=None):Copy defget(self, key, profile=None):Copy defget(self, key, profile=None): defget(self, key, profile=None): defget(self, key, profile=None): def get self, key, profile=None None Copy Copy    Copy Looks up a configuration value. Will check (in decreasing order of priority): Any environment variable of the form MODAL_FOO_BARSettings in the user’s .toml configuration fileThe default value of the setting Any environment variable of the form MODAL_FOO_BAR Settings in the user’s .toml configuration file The default value of the setting override_locally defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc.Copy defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. defoverride_locally(self, key:str, value:str):# Override setting in this process by overriding environment variable for the setting## Does NOT write back to settings file etc. def override_locally self, key:str, value:str str str # Override setting in this process by overriding environment variable for the setting # # Does NOT write back to settings file etc. Copy Copy    Copy to_dict defto_dict(self):Copy defto_dict(self):Copy defto_dict(self):Copy defto_dict(self): defto_dict(self): defto_dict(self): def to_dict self Copy Copy    Copy ",The 'to_dict' method in Modal's Config class is used to transform the configuration settings into a dictionary format.
0,What is the purpose of the function defconfig_profiles()? ,modalconfig modalconfigconfigprofiles,defconfig_profiles():Copy defconfig_profiles():Copy defconfig_profiles():Copy defconfig_profiles(): defconfig_profiles(): defconfig_profiles(): def config_profiles Copy Copy    Copy List the available modal profiles in the .modal.toml file. ,The purpose is to copy the configuration profiles. 
3,What type of file are the modal profiles listed in? ,modalconfig modalconfigconfigprofiles,defconfig_profiles():Copy defconfig_profiles():Copy defconfig_profiles():Copy defconfig_profiles(): defconfig_profiles(): defconfig_profiles(): def config_profiles Copy Copy    Copy List the available modal profiles in the .modal.toml file. ,They are listed in a .modal.toml file. 
6,What is the .modal.toml file used for? ,modalconfig modalconfigconfigprofiles,defconfig_profiles():Copy defconfig_profiles():Copy defconfig_profiles():Copy defconfig_profiles(): defconfig_profiles(): defconfig_profiles(): def config_profiles Copy Copy    Copy List the available modal profiles in the .modal.toml file. ,It is used to list the available modal profiles.
0,What is the function of config_set_active_profile in modal.config?,modalconfig modalconfigconfigsetactiveprofile,"defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): def config_set_active_profile env:str str Copy Copy    Copy Set the user’s active modal profile by writing it to the.modal.tomlfile. .modal.toml modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config .modal.toml Setting tokens using the CLI Other configuration options Meta-configuration modal.config.Config get override_locally to_dict modal.config.config_profiles modal.config.config_set_active_profile CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The function config_set_active_profile in modal.config sets the user’s active modal profile by writing it to the .modal.toml file.
3,What does modal.config.Configgetoverride_locallyto_dict do in modal.config?,modalconfig modalconfigconfigsetactiveprofile,"defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): def config_set_active_profile env:str str Copy Copy    Copy Set the user’s active modal profile by writing it to the.modal.tomlfile. .modal.toml modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config .modal.toml Setting tokens using the CLI Other configuration options Meta-configuration modal.config.Config get override_locally to_dict modal.config.config_profiles modal.config.config_set_active_profile CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",The modal.config.Configgetoverride_locallyto_dict gets the locally overridden configurations and converts them into a dictionary in modal.config.
6,What is the base URL used in __sveltekit_qfhbjo object?,modalconfig modalconfigconfigsetactiveprofile,"defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): def config_set_active_profile env:str str Copy Copy    Copy Set the user’s active modal profile by writing it to the.modal.tomlfile. .modal.toml modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config .modal.toml Setting tokens using the CLI Other configuration options Meta-configuration modal.config.Config get override_locally to_dict modal.config.config_profiles modal.config.config_set_active_profile CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The base URL used in __sveltekit_qfhbjo object is ""../..""."
0,What is the function of defconfig_set_active_profile(env:str) in Modal?,modalconfig modalconfigconfigsetactiveprofile,"defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): def config_set_active_profile env:str str Copy Copy    Copy Set the user’s active modal profile by writing it to the.modal.tomlfile. .modal.toml modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config .modal.toml Setting tokens using the CLI Other configuration options Meta-configuration modal.config.Config get override_locally to_dict modal.config.config_profiles modal.config.config_set_active_profile CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",To set the user’s active modal profile by writing it to the .modal.toml file.
3,What configuration options are available in the modal.config?,modalconfig modalconfigconfigsetactiveprofile,"defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): def config_set_active_profile env:str str Copy Copy    Copy Set the user’s active modal profile by writing it to the.modal.tomlfile. .modal.toml modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config .modal.toml Setting tokens using the CLI Other configuration options Meta-configuration modal.config.Config get override_locally to_dict modal.config.config_profiles modal.config.config_set_active_profile CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The configuration options available in the modal.config include: Config, get, override_locally, to_dict, config_profiles, and config_set_active_profile."
6,What is the purpose of the import statements in the provided script?,modalconfig modalconfigconfigsetactiveprofile,"defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str):Copy defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): defconfig_set_active_profile(env:str): def config_set_active_profile env:str str Copy Copy    Copy Set the user’s active modal profile by writing it to the.modal.tomlfile. .modal.toml modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config.modal.tomlSetting tokens using the CLIOther configuration optionsMeta-configurationmodal.config.Configgetoverride_locallyto_dictmodal.config.config_profilesmodal.config.config_set_active_profile modal.config .modal.toml Setting tokens using the CLI Other configuration options Meta-configuration modal.config.Config get override_locally to_dict modal.config.config_profiles modal.config.config_set_active_profile CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The import statements in the script are used to import necessary modules or components, such as kit and app, in this case, which are then used to start the application."
0,What does CI/CD stand for in application development?,Continuous deployment,"It’s a common pattern to auto-deploy your Modal app as part of a CI/CD pipeline.
To get you started, below is a guide to doing continuous deployment of a Modal
app in GitHub. ",Continuous Integration/Continuous Deployment.
3,With which platform does the guide provide help for the continuous deployment of a Modal app?,Continuous deployment,"It’s a common pattern to auto-deploy your Modal app as part of a CI/CD pipeline.
To get you started, below is a guide to doing continuous deployment of a Modal
app in GitHub. ",The guide provides help for continuous deployment of a Modal app in GitHub.
6,What does auto-deploy mean in the context of continuous deployment?,Continuous deployment,"It’s a common pattern to auto-deploy your Modal app as part of a CI/CD pipeline.
To get you started, below is a guide to doing continuous deployment of a Modal
app in GitHub. ","In the context of continuous deployment, auto-deploy means the automatic deployment of an app as changes are made, typically as part of a CI/CD pipeline."
0,What is the purpose of the sample GitHub Actions workflow given in the content?,Continuous deployment GitHub Actions,"Here’s a sample GitHub Actions workflow that deploys your app on every push to
themainbranch. main This requires you to create aModal tokenand add it as asecret for your Github Actions workflow. Modal token secret for your Github Actions workflow After setting up secrets, create a new workflow file in your repository at.github/workflows/ci-cd.ymlwith the following contents: .github/workflows/ci-cd.yml name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name: CI/CD on: push: branches: - main jobs: deploy: name: Deploy runs-on: ubuntu-latest env: MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }} MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }} steps: - name: Checkout Repository uses: actions/checkout@v2 - name: Install Python uses: actions/setup-python@v2 with: python-version: ""3.10"" - name: Install Modal run: |
          python -m pip install --upgrade pip
          pip install modal - name: Deploy job run: | modal deploy my_package.my_file Copy Copy    Copy Be sure to replacemy_package.my_filewith your actual entrypoint. my_package.my_file If you use multiple ModalEnvironments, you can
additionally specify the target environment in the YAML usingMODAL_ENVIRONMENT=xyz. Environments MODAL_ENVIRONMENT=xyz Continuous deploymentGitHub Actions Continuous deploymentGitHub Actions Continuous deploymentGitHub Actions Continuous deployment GitHub Actions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The sample GitHub Actions workflow deploys an app on every push to the main branch.
3,What is necessary for setting up this GitHub Actions workflow?,Continuous deployment GitHub Actions,"Here’s a sample GitHub Actions workflow that deploys your app on every push to
themainbranch. main This requires you to create aModal tokenand add it as asecret for your Github Actions workflow. Modal token secret for your Github Actions workflow After setting up secrets, create a new workflow file in your repository at.github/workflows/ci-cd.ymlwith the following contents: .github/workflows/ci-cd.yml name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name: CI/CD on: push: branches: - main jobs: deploy: name: Deploy runs-on: ubuntu-latest env: MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }} MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }} steps: - name: Checkout Repository uses: actions/checkout@v2 - name: Install Python uses: actions/setup-python@v2 with: python-version: ""3.10"" - name: Install Modal run: |
          python -m pip install --upgrade pip
          pip install modal - name: Deploy job run: | modal deploy my_package.my_file Copy Copy    Copy Be sure to replacemy_package.my_filewith your actual entrypoint. my_package.my_file If you use multiple ModalEnvironments, you can
additionally specify the target environment in the YAML usingMODAL_ENVIRONMENT=xyz. Environments MODAL_ENVIRONMENT=xyz Continuous deploymentGitHub Actions Continuous deploymentGitHub Actions Continuous deploymentGitHub Actions Continuous deployment GitHub Actions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You need to create a Modal token and add it as a secret for your Github Actions workflow.
6,What should you replace 'my_package.my_file' with in the workflow file for GitHub Actions?,Continuous deployment GitHub Actions,"Here’s a sample GitHub Actions workflow that deploys your app on every push to
themainbranch. main This requires you to create aModal tokenand add it as asecret for your Github Actions workflow. Modal token secret for your Github Actions workflow After setting up secrets, create a new workflow file in your repository at.github/workflows/ci-cd.ymlwith the following contents: .github/workflows/ci-cd.yml name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_fileCopy name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name:CI/CDon:push:branches:-mainjobs:deploy:name:Deployruns-on:ubuntu-latestenv:MODAL_TOKEN_ID:${{secrets.MODAL_TOKEN_ID}}MODAL_TOKEN_SECRET:${{secrets.MODAL_TOKEN_SECRET}}steps:-name:CheckoutRepositoryuses:actions/checkout@v2-name:InstallPythonuses:actions/setup-python@v2with:python-version:""3.10""-name:InstallModalrun:|
          python -m pip install --upgrade pip
          pip install modal-name:Deployjobrun:|modaldeploymy_package.my_file name: CI/CD on: push: branches: - main jobs: deploy: name: Deploy runs-on: ubuntu-latest env: MODAL_TOKEN_ID: ${{ secrets.MODAL_TOKEN_ID }} MODAL_TOKEN_SECRET: ${{ secrets.MODAL_TOKEN_SECRET }} steps: - name: Checkout Repository uses: actions/checkout@v2 - name: Install Python uses: actions/setup-python@v2 with: python-version: ""3.10"" - name: Install Modal run: |
          python -m pip install --upgrade pip
          pip install modal - name: Deploy job run: | modal deploy my_package.my_file Copy Copy    Copy Be sure to replacemy_package.my_filewith your actual entrypoint. my_package.my_file If you use multiple ModalEnvironments, you can
additionally specify the target environment in the YAML usingMODAL_ENVIRONMENT=xyz. Environments MODAL_ENVIRONMENT=xyz Continuous deploymentGitHub Actions Continuous deploymentGitHub Actions Continuous deploymentGitHub Actions Continuous deployment GitHub Actions CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You should replace 'my_package.my_file' with your actual entrypoint.
0,What is the name of the puppy used in the Stable Diffusion v1.5 model?,Pet Art Dreambooth with Hugging Face and Gradio,"This example finetunes theStable Diffusion v1.5 modelon images of a pet (by default, a puppy named Qwerty)
using a technique called textual inversion fromthe “Dreambooth” paper.
Effectively, it teaches a general image generation model a new “proper noun”,
allowing for the personalized generation of art and photos.
It then makes the model shareable with others using theGradio.appweb interface framework. Stable Diffusion v1.5 model the “Dreambooth” paper Gradio.app It demonstrates a simple, productive, and cost-effective pathway
to building on large pretrained models
by using Modal’s building blocks, likeGPU-acceleratedModal Functions,volumesfor caching, andModal webhooks. GPU-accelerated volumes Modal webhooks And with some light customization, you can use it to generate images of your pet!   ",Qwerty
3,What framework is used to make the model shareable?,Pet Art Dreambooth with Hugging Face and Gradio,"This example finetunes theStable Diffusion v1.5 modelon images of a pet (by default, a puppy named Qwerty)
using a technique called textual inversion fromthe “Dreambooth” paper.
Effectively, it teaches a general image generation model a new “proper noun”,
allowing for the personalized generation of art and photos.
It then makes the model shareable with others using theGradio.appweb interface framework. Stable Diffusion v1.5 model the “Dreambooth” paper Gradio.app It demonstrates a simple, productive, and cost-effective pathway
to building on large pretrained models
by using Modal’s building blocks, likeGPU-acceleratedModal Functions,volumesfor caching, andModal webhooks. GPU-accelerated volumes Modal webhooks And with some light customization, you can use it to generate images of your pet!   ",Gradio.app web interface framework
6,What can be done with light customization of the example?,Pet Art Dreambooth with Hugging Face and Gradio,"This example finetunes theStable Diffusion v1.5 modelon images of a pet (by default, a puppy named Qwerty)
using a technique called textual inversion fromthe “Dreambooth” paper.
Effectively, it teaches a general image generation model a new “proper noun”,
allowing for the personalized generation of art and photos.
It then makes the model shareable with others using theGradio.appweb interface framework. Stable Diffusion v1.5 model the “Dreambooth” paper Gradio.app It demonstrates a simple, productive, and cost-effective pathway
to building on large pretrained models
by using Modal’s building blocks, likeGPU-acceleratedModal Functions,volumesfor caching, andModal webhooks. GPU-accelerated volumes Modal webhooks And with some light customization, you can use it to generate images of your pet!   ",It can be used to generate images of your own pet.
0,What is the instance name in SharedConfig?,Pet Art Dreambooth with Hugging Face and Gradio Config,"All configs get their own dataclasses to avoid scattering special/magic values throughout code.
You can read more about how the values inTrainConfigare chosen and adjustedin this blog post on Hugging Face.
To run training on images of your own pet, upload the images to separate URLs and edit the contents of the file atTrainConfig.instance_example_urls_fileto point to them. TrainConfig in this blog post on Hugging Face TrainConfig.instance_example_urls_file @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclass class SharedConfig """"""Configuration information shared across project components."""""" # The instance name is the ""proper noun"" we're teaching the model str ""Qwerty"" # That proper noun is usually a member of some class (person, bird), # and sharing that information with the model helps it generalize better. str ""Golden Retriever"" @dataclass class TrainConfig SharedConfig """"""Configuration for the finetuning step."""""" # training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}` str ""a photo of"" str """" # locator for plaintext file with urls for images of target instance str str ""instance_example_urls.txt"" # identifier for pretrained model on Hugging Face str ""runwayml/stable-diffusion-v1-5"" # Hyperparameters/constants from the huggingface training example int 512 int 1 int 1 float 2e-6 str ""constant"" int 0 int 600 int 1000 @dataclass class AppConfig SharedConfig """"""Configuration information for inference."""""" int 50 float 7.5 Copy Copy    Copy ","The instance name in SharedConfig is ""Qwerty""."
3,What is the pretrained model's identifier on Hugging Face used in the TrainConfig?,Pet Art Dreambooth with Hugging Face and Gradio Config,"All configs get their own dataclasses to avoid scattering special/magic values throughout code.
You can read more about how the values inTrainConfigare chosen and adjustedin this blog post on Hugging Face.
To run training on images of your own pet, upload the images to separate URLs and edit the contents of the file atTrainConfig.instance_example_urls_fileto point to them. TrainConfig in this blog post on Hugging Face TrainConfig.instance_example_urls_file @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclass class SharedConfig """"""Configuration information shared across project components."""""" # The instance name is the ""proper noun"" we're teaching the model str ""Qwerty"" # That proper noun is usually a member of some class (person, bird), # and sharing that information with the model helps it generalize better. str ""Golden Retriever"" @dataclass class TrainConfig SharedConfig """"""Configuration for the finetuning step."""""" # training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}` str ""a photo of"" str """" # locator for plaintext file with urls for images of target instance str str ""instance_example_urls.txt"" # identifier for pretrained model on Hugging Face str ""runwayml/stable-diffusion-v1-5"" # Hyperparameters/constants from the huggingface training example int 512 int 1 int 1 float 2e-6 str ""constant"" int 0 int 600 int 1000 @dataclass class AppConfig SharedConfig """"""Configuration information for inference."""""" int 50 float 7.5 Copy Copy    Copy ","The pretrained model's identifier on Hugging Face used in the TrainConfig is ""runwayml/stable-diffusion-v1-5""."
6,What are the number of inference steps in AppConfig?,Pet Art Dreambooth with Hugging Face and Gradio Config,"All configs get their own dataclasses to avoid scattering special/magic values throughout code.
You can read more about how the values inTrainConfigare chosen and adjustedin this blog post on Hugging Face.
To run training on images of your own pet, upload the images to separate URLs and edit the contents of the file atTrainConfig.instance_example_urls_fileto point to them. TrainConfig in this blog post on Hugging Face TrainConfig.instance_example_urls_file @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5Copy @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclassclassSharedConfig:""""""Configuration information shared across project components.""""""# The instance name is the ""proper noun"" we're teaching the modelinstance_name:str=""Qwerty""# That proper noun is usually a member of some class (person, bird),# and sharing that information with the model helps it generalize better.class_name:str=""Golden Retriever""@dataclassclassTrainConfig(SharedConfig):""""""Configuration for the finetuning step.""""""# training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}`prefix:str=""a photo of""postfix:str=""""# locator for plaintext file with urls for images of target instanceinstance_example_urls_file:str=str(
        Path(__file__).parent /""instance_example_urls.txt"")# identifier for pretrained model on Hugging Facemodel_name:str=""runwayml/stable-diffusion-v1-5""# Hyperparameters/constants from the huggingface training exampleresolution:int=512train_batch_size:int=1gradient_accumulation_steps:int=1learning_rate:float=2e-6lr_scheduler:str=""constant""lr_warmup_steps:int=0max_train_steps:int=600checkpointing_steps:int=1000@dataclassclassAppConfig(SharedConfig):""""""Configuration information for inference.""""""num_inference_steps:int=50guidance_scale:float=7.5 @dataclass class SharedConfig """"""Configuration information shared across project components."""""" # The instance name is the ""proper noun"" we're teaching the model str ""Qwerty"" # That proper noun is usually a member of some class (person, bird), # and sharing that information with the model helps it generalize better. str ""Golden Retriever"" @dataclass class TrainConfig SharedConfig """"""Configuration for the finetuning step."""""" # training prompt looks like `{PREFIX} {INSTANCE_NAME} the {CLASS_NAME} {POSTFIX}` str ""a photo of"" str """" # locator for plaintext file with urls for images of target instance str str ""instance_example_urls.txt"" # identifier for pretrained model on Hugging Face str ""runwayml/stable-diffusion-v1-5"" # Hyperparameters/constants from the huggingface training example int 512 int 1 int 1 float 2e-6 str ""constant"" int 0 int 600 int 1000 @dataclass class AppConfig SharedConfig """"""Configuration information for inference."""""" int 50 float 7.5 Copy Copy    Copy ",The number of inference steps in AppConfig is 50.
0,What is the magic of Dreambooth?,Pet Art Dreambooth with Hugging Face and Gradio Get finetuning dataset,"Part of the magic of Dreambooth is that we only need 4-10 images for finetuning.
So we can fetch just a few images, stored on consumer platforms like Imgur or Google Drive
— no need for expensive data collection or data engineering. IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH ""/img"" def load_images image_urls import from import open True for in enumerate with open ""rb"" as open f""{ii}.png"" {ii} print ""Images loaded."" return Copy Copy    Copy ",Part of the magic of Dreambooth is that it only needs 4-10 images for finetuning.
3,Is there a need for expensive data collection or data engineering for Dreambooth?,Pet Art Dreambooth with Hugging Face and Gradio Get finetuning dataset,"Part of the magic of Dreambooth is that we only need 4-10 images for finetuning.
So we can fetch just a few images, stored on consumer platforms like Imgur or Google Drive
— no need for expensive data collection or data engineering. IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH ""/img"" def load_images image_urls import from import open True for in enumerate with open ""rb"" as open f""{ii}.png"" {ii} print ""Images loaded."" return Copy Copy    Copy ","No, there is no need for expensive data collection or data engineering for Dreambooth."
6,What does the indicated 'IMG_PATH' refer to in the code?,Pet Art Dreambooth with Hugging Face and Gradio Get finetuning dataset,"Part of the magic of Dreambooth is that we only need 4-10 images for finetuning.
So we can fetch just a few images, stored on consumer platforms like Imgur or Google Drive
— no need for expensive data collection or data engineering. IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATHCopy IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH IMG_PATH = Path(""/img"")defload_images(image_urls):importPIL.Imagefromsmart_openimportopenos.makedirs(IMG_PATH, exist_ok=True)forii, urlinenumerate(image_urls):withopen(url,""rb"")asf:
            image = PIL.Image.open(f)
            image.save(IMG_PATH /f""{ii}.png"")print(""Images loaded."")returnIMG_PATH ""/img"" def load_images image_urls import from import open True for in enumerate with open ""rb"" as open f""{ii}.png"" {ii} print ""Images loaded."" return Copy Copy    Copy ","The 'IMG_PATH' refers to the path (""/img"") where the images are to be stored."
0,What function is used to generate images from prompts using the fine-tuned model?,Pet Art Dreambooth with Hugging Face and Gradio The inference function,"To generate images from prompts using our fine-tuned model, we define a function calledinference.
In order to initialize the model just once on container startup, we use Modal’scontainer
lifecyclefeature, which requires the function to be part
of a class.  Themodal.Volumeis mounted atMODEL_DIR, so that the fine-tuned model created  bytrainis then available toinference. inference container
lifecycle modal.Volume MODEL_DIR train inference @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},) image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume}, ""A100"" str MODEL_DIR class Model def __enter__ self import from import # Reload the modal.Volume to ensure the latest state is accessible. # set up a hugging face inference pipeline using our model ""scheduler"" None ""cuda"" @method() def inference self, text, config 0 return Copy Copy    Copy ",The 'inference' function is used to generate images from prompts using the fine-tuned model.
3,What type of scheduler is used for setting up the Hugging Face inference pipeline?,Pet Art Dreambooth with Hugging Face and Gradio The inference function,"To generate images from prompts using our fine-tuned model, we define a function calledinference.
In order to initialize the model just once on container startup, we use Modal’scontainer
lifecyclefeature, which requires the function to be part
of a class.  Themodal.Volumeis mounted atMODEL_DIR, so that the fine-tuned model created  bytrainis then available toinference. inference container
lifecycle modal.Volume MODEL_DIR train inference @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},) image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume}, ""A100"" str MODEL_DIR class Model def __enter__ self import from import # Reload the modal.Volume to ensure the latest state is accessible. # set up a hugging face inference pipeline using our model ""scheduler"" None ""cuda"" @method() def inference self, text, config 0 return Copy Copy    Copy ",DDIMScheduler is used for setting up the Hugging Face inference pipeline.
6,"What is the purpose of the ""inference"" function contained within the ""Model"" class?",Pet Art Dreambooth with Hugging Face and Gradio The inference function,"To generate images from prompts using our fine-tuned model, we define a function calledinference.
In order to initialize the model just once on container startup, we use Modal’scontainer
lifecyclefeature, which requires the function to be part
of a class.  Themodal.Volumeis mounted atMODEL_DIR, so that the fine-tuned model created  bytrainis then available toinference. inference container
lifecycle modal.Volume MODEL_DIR train inference @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimageCopy @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},)classModel:def__enter__(self):importtorchfromdiffusersimportDDIMScheduler, StableDiffusionPipeline# Reload the modal.Volume to ensure the latest state is accessible.stub.volume.reload()# set up a hugging face inference pipeline using our modelddim = DDIMScheduler.from_pretrained(MODEL_DIR, subfolder=""scheduler"")
        pipe = StableDiffusionPipeline.from_pretrained(
            MODEL_DIR,
            scheduler=ddim,
            torch_dtype=torch.float16,
            safety_checker=None,
        ).to(""cuda"")
        pipe.enable_xformers_memory_efficient_attention()
        self.pipe = pipe@method()definference(self, text, config):
        image = self.pipe(
            text,
            num_inference_steps=config.num_inference_steps,
            guidance_scale=config.guidance_scale,
        ).images[0]returnimage @stub.cls(image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume},) image=image,
    gpu=""A100"",
    volumes={str(MODEL_DIR): volume}, ""A100"" str MODEL_DIR class Model def __enter__ self import from import # Reload the modal.Volume to ensure the latest state is accessible. # set up a hugging face inference pipeline using our model ""scheduler"" None ""cuda"" @method() def inference self, text, config 0 return Copy Copy    Copy ","The ""inference"" function contained within the ""Model"" class generates an image based on the text and configuration parameters."
0,What is the functionality of the gradio web UI?,Pet Art Dreambooth with Hugging Face and Gradio Wrap the trained model in Gradios web UI,"Gradio.app makes it super easy to expose a model’s functionality
in an easy-to-use, responsive web interface. This model is a text-to-image generator,
so we set up an interface that includes a user-entry text box
and a frame for displaying images. We also provide some example text inputs to help
guide users and to kick-start their creative juices. You can deploy the app on Modal forever with the commandmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],) image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")], 3 assets_path, remote_path=""/assets"" ""/assets"" @asgi_app() def fastapi_app import as from import # Call to the GPU inference function on Modal. def go text return # set up AppConfig f""{config.instance_name}the{config.class_name}"" {config.instance_name} {config.class_name} f""{instance_phrase}"" {instance_phrase} f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"" {instance_phrase.title()} f""oil painting of{instance_phrase}flying through space as an astronaut"" {instance_phrase} f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"" {instance_phrase} f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"" {instance_phrase} ""https://modal.com/docs/guide"" f""{modal_docs_url}/ex/dreambooth_app"" {modal_docs_url} f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """""" {modal_example_url} # add a gradio UI around inference ""text"" 512 512 f""Generate images of{instance_phrase}."" {instance_phrase} ""/assets/index.css"" ""never"" # mount for execution on Modal return ""/"" Copy Copy    Copy ","The gradio web UI makes it easy to expose a model's functionality in an easy-to-use, responsive web interface."
3,What command is used to deploy the app on Modal forever?,Pet Art Dreambooth with Hugging Face and Gradio Wrap the trained model in Gradios web UI,"Gradio.app makes it super easy to expose a model’s functionality
in an easy-to-use, responsive web interface. This model is a text-to-image generator,
so we set up an interface that includes a user-entry text box
and a frame for displaying images. We also provide some example text inputs to help
guide users and to kick-start their creative juices. You can deploy the app on Modal forever with the commandmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],) image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")], 3 assets_path, remote_path=""/assets"" ""/assets"" @asgi_app() def fastapi_app import as from import # Call to the GPU inference function on Modal. def go text return # set up AppConfig f""{config.instance_name}the{config.class_name}"" {config.instance_name} {config.class_name} f""{instance_phrase}"" {instance_phrase} f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"" {instance_phrase.title()} f""oil painting of{instance_phrase}flying through space as an astronaut"" {instance_phrase} f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"" {instance_phrase} f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"" {instance_phrase} ""https://modal.com/docs/guide"" f""{modal_docs_url}/ex/dreambooth_app"" {modal_docs_url} f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """""" {modal_example_url} # add a gradio UI around inference ""text"" 512 512 f""Generate images of{instance_phrase}."" {instance_phrase} ""/assets/index.css"" ""never"" # mount for execution on Modal return ""/"" Copy Copy    Copy ","The command ""modal deploy dreambooth_app.py"" is used to deploy the app on Modal."
6,What are examples of prompts provided to help guide users?,Pet Art Dreambooth with Hugging Face and Gradio Wrap the trained model in Gradios web UI,"Gradio.app makes it super easy to expose a model’s functionality
in an easy-to-use, responsive web interface. This model is a text-to-image generator,
so we set up an interface that includes a user-entry text box
and a frame for displaying images. We also provide some example text inputs to help
guide users and to kick-start their creative juices. You can deploy the app on Modal forever with the commandmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    )Copy @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],)@asgi_app()deffastapi_app():importgradioasgrfromgradio.routesimportmount_gradio_app# Call to the GPU inference function on Modal.defgo(text):returnModel().inference.remote(text, config)# set up AppConfigconfig = AppConfig()

    instance_phrase =f""{config.instance_name}the{config.class_name}""example_prompts = [f""{instance_phrase}"",f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"",f""oil painting of{instance_phrase}flying through space as an astronaut"",f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"",f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"",
    ]

    modal_docs_url =""https://modal.com/docs/guide""modal_example_url =f""{modal_docs_url}/ex/dreambooth_app""description =f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """"""# add a gradio UI around inferenceinterface = gr.Interface(
        fn=go,
        inputs=""text"",
        outputs=gr.Image(shape=(512,512)),
        title=f""Generate images of{instance_phrase}."",
        description=description,
        examples=example_prompts,
        css=""/assets/index.css"",
        allow_flagging=""never"",
    )# mount for execution on Modalreturnmount_gradio_app(
        app=web_app,
        blocks=interface,
        path=""/"",
    ) @stub.function(image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")],) image=image,
    concurrency_limit=3,
    mounts=[Mount.from_local_dir(assets_path, remote_path=""/assets"")], 3 assets_path, remote_path=""/assets"" ""/assets"" @asgi_app() def fastapi_app import as from import # Call to the GPU inference function on Modal. def go text return # set up AppConfig f""{config.instance_name}the{config.class_name}"" {config.instance_name} {config.class_name} f""{instance_phrase}"" {instance_phrase} f""a painting of{instance_phrase.title()}With A Pearl Earring, by Vermeer"" {instance_phrase.title()} f""oil painting of{instance_phrase}flying through space as an astronaut"" {instance_phrase} f""a painting of{instance_phrase}in cyberpunk city. character design by cory loftis. volumetric light, detailed, rendered in octane"" {instance_phrase} f""drawing of{instance_phrase}high quality, cartoon, path traced, by studio ghibli and don bluth"" {instance_phrase} ""https://modal.com/docs/guide"" f""{modal_docs_url}/ex/dreambooth_app"" {modal_docs_url} f""""""Describe what they are doing or how a particular artist or style would depict them. Be fantastical! Try the examples below for inspiration.

### Learn how to make your own [here]({modal_example_url}).
    """""" {modal_example_url} # add a gradio UI around inference ""text"" 512 512 f""Generate images of{instance_phrase}."" {instance_phrase} ""/assets/index.css"" ""never"" # mount for execution on Modal return ""/"" Copy Copy    Copy ","Examples of prompts provided include a painting of the instance_phrase with a pearl earring by Vermeer, an oil painting of the instance_phrase flying through space as an astronaut, and a drawing of the instance_phrase in high quality, cartoon, path traced, by Studio Ghibli and Don Bluth, among others."
0,"What is the purpose of the command ""modal run dreambooth_app.py""?",Pet Art Dreambooth with Hugging Face and Gradio Running this on the command line,"You can use themodalcommand-line interface to interact with this code,
in particular training the model and running the interactive Gradio service modal modal run dreambooth_app.pywill train the modelmodal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location.modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal run dreambooth_app.pywill train the model modal run dreambooth_app.py modal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location. modal serve dreambooth_app.py serve modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal shell dreambooth_app.py shell Remember, once you’ve trained your own fine-tuned model, you can deploy it usingmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py This app is already deployed on Modal and you can try it out athttps://modal-labs-example-dreambooth-app-fastapi-app.modal.run https://modal-labs-example-dreambooth-app-fastapi-app.modal.run @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint() def run with open as for in Copy Copy    Copy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command line Pet Art Dreambooth with Hugging Face and Gradio Setting up the dependencies Config Get finetuning dataset Finetuning a text-to-image model Finetuning with Hugging Face 🧨 Diffusers and Accelerate The inference function. Wrap the trained model in Gradio’s web UI Running this on the command line Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy ","The command ""modal run dreambooth_app.py"" is used to train the model."
3,"What is the role of the ""modal shell dreambooth_app.py"" command?",Pet Art Dreambooth with Hugging Face and Gradio Running this on the command line,"You can use themodalcommand-line interface to interact with this code,
in particular training the model and running the interactive Gradio service modal modal run dreambooth_app.pywill train the modelmodal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location.modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal run dreambooth_app.pywill train the model modal run dreambooth_app.py modal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location. modal serve dreambooth_app.py serve modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal shell dreambooth_app.py shell Remember, once you’ve trained your own fine-tuned model, you can deploy it usingmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py This app is already deployed on Modal and you can try it out athttps://modal-labs-example-dreambooth-app-fastapi-app.modal.run https://modal-labs-example-dreambooth-app-fastapi-app.modal.run @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint() def run with open as for in Copy Copy    Copy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command line Pet Art Dreambooth with Hugging Face and Gradio Setting up the dependencies Config Get finetuning dataset Finetuning a text-to-image model Finetuning with Hugging Face 🧨 Diffusers and Accelerate The inference function. Wrap the trained model in Gradio’s web UI Running this on the command line Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy ","The ""modal shell dreambooth_app.py"" command is a convenient helper to open a bash shell in the image for debugging purposes."
6,How can the Pet Art Dreambooth with Hugging Face and Gradio be utilized?,Pet Art Dreambooth with Hugging Face and Gradio Running this on the command line,"You can use themodalcommand-line interface to interact with this code,
in particular training the model and running the interactive Gradio service modal modal run dreambooth_app.pywill train the modelmodal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location.modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal run dreambooth_app.pywill train the model modal run dreambooth_app.py modal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location. modal serve dreambooth_app.py serve modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal shell dreambooth_app.py shell Remember, once you’ve trained your own fine-tuned model, you can deploy it usingmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py This app is already deployed on Modal and you can try it out athttps://modal-labs-example-dreambooth-app-fastapi-app.modal.run https://modal-labs-example-dreambooth-app-fastapi-app.modal.run @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint() def run with open as for in Copy Copy    Copy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command line Pet Art Dreambooth with Hugging Face and Gradio Setting up the dependencies Config Get finetuning dataset Finetuning a text-to-image model Finetuning with Hugging Face 🧨 Diffusers and Accelerate The inference function. Wrap the trained model in Gradio’s web UI Running this on the command line Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy ","You can use the Pet Art Dreambooth with Hugging Face and Gradio to set up the dependencies, get the fine tuning dataset, fine tune a text-to-image model, and wrap the trained model in Gradio's web UI."
0,What command line interface can you use to interact with the code of Dreambooth app?,Pet Art Dreambooth with Hugging Face and Gradio Running this on the command line,"You can use themodalcommand-line interface to interact with this code,
in particular training the model and running the interactive Gradio service modal modal run dreambooth_app.pywill train the modelmodal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location.modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal run dreambooth_app.pywill train the model modal run dreambooth_app.py modal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location. modal serve dreambooth_app.py serve modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal shell dreambooth_app.py shell Remember, once you’ve trained your own fine-tuned model, you can deploy it usingmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py This app is already deployed on Modal and you can try it out athttps://modal-labs-example-dreambooth-app-fastapi-app.modal.run https://modal-labs-example-dreambooth-app-fastapi-app.modal.run @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint() def run with open as for in Copy Copy    Copy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command line Pet Art Dreambooth with Hugging Face and Gradio Setting up the dependencies Config Get finetuning dataset Finetuning a text-to-image model Finetuning with Hugging Face 🧨 Diffusers and Accelerate The inference function. Wrap the trained model in Gradio’s web UI Running this on the command line Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py $ modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal command-line interface.
3,What does the command 'modal serve dreambooth_app.py' do?,Pet Art Dreambooth with Hugging Face and Gradio Running this on the command line,"You can use themodalcommand-line interface to interact with this code,
in particular training the model and running the interactive Gradio service modal modal run dreambooth_app.pywill train the modelmodal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location.modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal run dreambooth_app.pywill train the model modal run dreambooth_app.py modal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location. modal serve dreambooth_app.py serve modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal shell dreambooth_app.py shell Remember, once you’ve trained your own fine-tuned model, you can deploy it usingmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py This app is already deployed on Modal and you can try it out athttps://modal-labs-example-dreambooth-app-fastapi-app.modal.run https://modal-labs-example-dreambooth-app-fastapi-app.modal.run @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint() def run with open as for in Copy Copy    Copy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command line Pet Art Dreambooth with Hugging Face and Gradio Setting up the dependencies Config Get finetuning dataset Finetuning a text-to-image model Finetuning with Hugging Face 🧨 Diffusers and Accelerate The inference function. Wrap the trained model in Gradio’s web UI Running this on the command line Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py $ modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",It serves the Gradio interface at a temporarily location.
6,How can you deploy the model once it's fine-tuned?,Pet Art Dreambooth with Hugging Face and Gradio Running this on the command line,"You can use themodalcommand-line interface to interact with this code,
in particular training the model and running the interactive Gradio service modal modal run dreambooth_app.pywill train the modelmodal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location.modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal run dreambooth_app.pywill train the model modal run dreambooth_app.py modal serve dreambooth_app.pywillservethe Gradio interface at a temporarily location. modal serve dreambooth_app.py serve modal shell dreambooth_app.pyis a convenient helper to open a bashshellin our image (for debugging) modal shell dreambooth_app.py shell Remember, once you’ve trained your own fine-tuned model, you can deploy it usingmodal deploy dreambooth_app.py. modal deploy dreambooth_app.py This app is already deployed on Modal and you can try it out athttps://modal-labs-example-dreambooth-app-fastapi-app.modal.run https://modal-labs-example-dreambooth-app-fastapi-app.modal.run @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls)Copy @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint()defrun():withopen(TrainConfig().instance_example_urls_file)asf:
        instance_example_urls = [line.strip()forlineinf.readlines()]
    train.remote(instance_example_urls) @stub.local_entrypoint() def run with open as for in Copy Copy    Copy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command lineTry this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Pet Art Dreambooth with Hugging Face and GradioSetting up the dependenciesConfigGet finetuning datasetFinetuning a text-to-image modelFinetuning with Hugging Face 🧨 Diffusers and AccelerateThe inference function.Wrap the trained model in Gradio’s web UIRunning this on the command line Pet Art Dreambooth with Hugging Face and Gradio Setting up the dependencies Config Get finetuning dataset Finetuning a text-to-image model Finetuning with Hugging Face 🧨 Diffusers and Accelerate The inference function. Wrap the trained model in Gradio’s web UI Running this on the command line Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal!You can run this example on Modal in 60 seconds.Create account to runAfter creating a free account, install the Modal Python package, and
      create an API token.$pip install modal$modal setupCopyClone themodal-examplesrepository and run:$gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy Try this on Modal! You can run this example on Modal in 60 seconds. Create account to run Create account to run After creating a free account, install the Modal Python package, and
      create an API token. $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal$modal setupCopy $pip install modal $ pip install modal pip install modal $modal setup $ modal setup modal setup Copy Copy    Copy Clone themodal-examplesrepository and run: modal-examples $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples$cdmodal-examples$modal run 06_gpu_and_ml/dreambooth/dreambooth_app.pyCopy $gitclonehttps://github.com/modal-labs/modal-examples $ gitclonehttps://github.com/modal-labs/modal-examples gitclonehttps://github.com/modal-labs/modal-examples clone $cdmodal-examples $ cdmodal-examples cdmodal-examples cd $modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py $ modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py modal run 06_gpu_and_ml/dreambooth/dreambooth_app.py Copy Copy    Copy CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 27],
							data,
							form: null,
							error: null
						});
					});
				} ",You can deploy it using the 'modal deploy dreambooth_app.py' command.
0,What can you do if a function needs access to data not present in your Python files?,Passing local data,"If you have a function that needs access to some data not present in your Python
files themselves you have a few options for bundling that data with your Modal
app. ",You have a few options for bundling that data with your Modal app.
3,What's the solution for a function that can't access data within the current Python files?,Passing local data,"If you have a function that needs access to some data not present in your Python
files themselves you have a few options for bundling that data with your Modal
app. ",The solution is to bundle the data with your Modal app.
6,What can you do when your Python function needs access to data not included in the files?,Passing local data,"If you have a function that needs access to some data not present in your Python
files themselves you have a few options for bundling that data with your Modal
app. ",You can use few available options for bundling that data with your Modal app.
0,What is the purpose of the modal.Mount objects in this context?,Passing local data Mounting directories,"If you want to forwardfilesfrom your local system, you can do that throughmodal.Mountobjects and themountsfunction
decorator option: files modal.Mount modal.Mount mounts @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")]) mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")] ""/user/john/.aws"", remote_path=""/root/.aws"" ""/user/john/.aws"" ""/root/.aws"" def aws_stuff Copy Copy    Copy Note: the mounted directory will not be shared between worker instances, so
modifying files or writing new files to a mount will not be reflected in other
functions calls with the same mount. For this reason, you should typically treat
theMountas read-only. Mount Mounting local packages For the special case of mounting a local package so it’s also available within
your Python environment inside the container, Modal provides acreate_package_mountshelper
function: create_package_mounts create_package_mounts importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() import import @stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""])) mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]) [""my_local_module"",""my_other_module""] ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local data Passing function arguments Mounting directories Mounting local packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal.Mount objects are used to forward files from your local system.
3,"In this script, is the mounted directory shared between worker instances?",Passing local data Mounting directories,"If you want to forwardfilesfrom your local system, you can do that throughmodal.Mountobjects and themountsfunction
decorator option: files modal.Mount modal.Mount mounts @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")]) mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")] ""/user/john/.aws"", remote_path=""/root/.aws"" ""/user/john/.aws"" ""/root/.aws"" def aws_stuff Copy Copy    Copy Note: the mounted directory will not be shared between worker instances, so
modifying files or writing new files to a mount will not be reflected in other
functions calls with the same mount. For this reason, you should typically treat
theMountas read-only. Mount Mounting local packages For the special case of mounting a local package so it’s also available within
your Python environment inside the container, Modal provides acreate_package_mountshelper
function: create_package_mounts create_package_mounts importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() import import @stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""])) mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]) [""my_local_module"",""my_other_module""] ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local data Passing function arguments Mounting directories Mounting local packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","No, the mounted directory is not shared between worker instances. "
6,What does the function create_package_mounts do?,Passing local data Mounting directories,"If you want to forwardfilesfrom your local system, you can do that throughmodal.Mountobjects and themountsfunction
decorator option: files modal.Mount modal.Mount mounts @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")]) mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")] ""/user/john/.aws"", remote_path=""/root/.aws"" ""/user/john/.aws"" ""/root/.aws"" def aws_stuff Copy Copy    Copy Note: the mounted directory will not be shared between worker instances, so
modifying files or writing new files to a mount will not be reflected in other
functions calls with the same mount. For this reason, you should typically treat
theMountas read-only. Mount Mounting local packages For the special case of mounting a local package so it’s also available within
your Python environment inside the container, Modal provides acreate_package_mountshelper
function: create_package_mounts create_package_mounts importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() import import @stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""])) mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]) [""my_local_module"",""my_other_module""] ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local data Passing function arguments Mounting directories Mounting local packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Create_package_mounts function helps in mounting a local package to make it available within your Python environment inside the container.
0,What is the way to forward files from your local system?,Passing local data Mounting directories,"If you want to forwardfilesfrom your local system, you can do that throughmodal.Mountobjects and themountsfunction
decorator option: files modal.Mount modal.Mount mounts @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")]) mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")] ""/user/john/.aws"", remote_path=""/root/.aws"" ""/user/john/.aws"" ""/root/.aws"" def aws_stuff Copy Copy    Copy Note: the mounted directory will not be shared between worker instances, so
modifying files or writing new files to a mount will not be reflected in other
functions calls with the same mount. For this reason, you should typically treat
theMountas read-only. Mount Mounting local packages For the special case of mounting a local package so it’s also available within
your Python environment inside the container, Modal provides acreate_package_mountshelper
function: create_package_mounts create_package_mounts importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() import import @stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""])) mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]) [""my_local_module"",""my_other_module""] ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local data Passing function arguments Mounting directories Mounting local packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You can forward files from your local system through modal.Mount objects and the mounts decorator option.
3,How should you treat the Mount when using Modal?,Passing local data Mounting directories,"If you want to forwardfilesfrom your local system, you can do that throughmodal.Mountobjects and themountsfunction
decorator option: files modal.Mount modal.Mount mounts @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")]) mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")] ""/user/john/.aws"", remote_path=""/root/.aws"" ""/user/john/.aws"" ""/root/.aws"" def aws_stuff Copy Copy    Copy Note: the mounted directory will not be shared between worker instances, so
modifying files or writing new files to a mount will not be reflected in other
functions calls with the same mount. For this reason, you should typically treat
theMountas read-only. Mount Mounting local packages For the special case of mounting a local package so it’s also available within
your Python environment inside the container, Modal provides acreate_package_mountshelper
function: create_package_mounts create_package_mounts importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() import import @stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""])) mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]) [""my_local_module"",""my_other_module""] ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local data Passing function arguments Mounting directories Mounting local packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",You should typically treat the Mount as read-only.
6,What helper function does Modal provide for mounting a local package?,Passing local data Mounting directories,"If you want to forwardfilesfrom your local system, you can do that throughmodal.Mountobjects and themountsfunction
decorator option: files modal.Mount modal.Mount mounts @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ...Copy @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")])defaws_stuff():
    ... @stub.function(mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")]) mounts=[modal.Mount.from_local_dir(""/user/john/.aws"", remote_path=""/root/.aws"")] ""/user/john/.aws"", remote_path=""/root/.aws"" ""/user/john/.aws"" ""/root/.aws"" def aws_stuff Copy Copy    Copy Note: the mounted directory will not be shared between worker instances, so
modifying files or writing new files to a mount will not be reflected in other
functions calls with the same mount. For this reason, you should typically treat
theMountas read-only. Mount Mounting local packages For the special case of mounting a local package so it’s also available within
your Python environment inside the container, Modal provides acreate_package_mountshelper
function: create_package_mounts create_package_mounts importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff()Copy importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() importmodalimportmy_local_module

stub = modal.Stub()@stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]))deff():
    my_local_module.do_stuff() import import @stub.function(mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""])) mounts=modal.create_package_mounts([""my_local_module"",""my_other_module""]) [""my_local_module"",""my_other_module""] ""my_local_module"" ""my_other_module"" def f Copy Copy    Copy Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local dataPassing function argumentsMounting directoriesMounting local packages Passing local data Passing function arguments Mounting directories Mounting local packages CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Modal provides a create_package_mounts helper function to mount a local package.
0,What is a unique feature of web endpoint URLs on the modal.run domain?,Web endpoint URLs Autogenerated URLs,"If alabelis not specified, web endpoints receive a generated URL under themodal.rundomain. These generated URLs contain a subdomain label that is
unique to the running endpoint. label modal.run Deployed apps Web endpoints served by a deployed application have subdomains composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app The deployed web endpoint URL for this example ishttps://ecorp--text-to-speech-flask-app.modal.run. https://ecorp--text-to-speech-flask-app.modal.run This URL is reserved for the deployed application’s web endpoint. Running the
application during development will not replace the deployed application’s
association with the deployed URL. Ephemeral apps Web endpoints run in ephemeral apps have predictable, unique subdomains,
distinct from the subdomain of any associated deployment. The subdomain of a web endpoint running in an ephemeral app is composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app[Optional]Member name slug, in cases where app runs in a shared workspace:erikbern[Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcdA-devsuffix, calling out that this web endpoint is not deployed. Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app [Optional]Member name slug, in cases where app runs in a shared workspace:erikbern Member name slug erikbern [Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcd instance identifier 1234abcd A-devsuffix, calling out that this web endpoint is not deployed. -dev Combining the example parts, the ephemeral web endpoint’s URL could behttps://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run. https://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run The components of an ephemeral web endpoint subdomain ensure URL predictability
during development and testing, in both personal and shared workspaces. Multiple
copies of a web endpoint can be active when a Modal app is run in two or more
terminal windows, or when multiple developers are iterating on the same
application codebase. Every copy will be uniquely addressable while running. Stealing If an emphemeral web endpoint is running and another ephemeral web endpoint is
created seeking the same web endpoint label, the new web endpoint function willstealthe running web endpoint’s label. steal This ensures the latest iteration of an ephemeral web endpoint function is
serving requests, while older ones stop recieving web traffic. (Previously concurrently running ephemeral app web endpoints would include
conflict-avoiding hashes.) Truncation If a generated subdomain label is longer than 63 characters, it will be
truncated. For example, the following subdomain label is too long, 67 characters:ecorp--text-to-speech-really-really-long-function-name-erikbern-dev. ecorp--text-to-speech-really-really-long-function-name-erikbern-dev The truncation happens by calculating a SHA-256 hash of the overlong label, then
taking the first 6 characters of this hash. The overlong subdomain label is
truncated to 56 characters, and then joined by a dash to the hash prefix. The combination of the label hashing and truncation provides a unique list of 63
characters, complying with both DNS system limits and uniqueness requirements. Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncation Web endpoint URLs User-specified URLs Auto-generated URLs Deployed apps Ephemeral apps Stealing Truncation See it in actionCustom URL for LLM frontend See it in actionCustom URL for LLM frontend See it in action Custom URL for LLM frontend Custom URL for LLM frontend Custom URL for LLM frontend     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",They receive an auto-generated URL containing a subdomain label unique to the running endpoint.
3,What components ensure the uniqueness of endpoints running on ephemeral apps?,Web endpoint URLs Autogenerated URLs,"If alabelis not specified, web endpoints receive a generated URL under themodal.rundomain. These generated URLs contain a subdomain label that is
unique to the running endpoint. label modal.run Deployed apps Web endpoints served by a deployed application have subdomains composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app The deployed web endpoint URL for this example ishttps://ecorp--text-to-speech-flask-app.modal.run. https://ecorp--text-to-speech-flask-app.modal.run This URL is reserved for the deployed application’s web endpoint. Running the
application during development will not replace the deployed application’s
association with the deployed URL. Ephemeral apps Web endpoints run in ephemeral apps have predictable, unique subdomains,
distinct from the subdomain of any associated deployment. The subdomain of a web endpoint running in an ephemeral app is composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app[Optional]Member name slug, in cases where app runs in a shared workspace:erikbern[Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcdA-devsuffix, calling out that this web endpoint is not deployed. Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app [Optional]Member name slug, in cases where app runs in a shared workspace:erikbern Member name slug erikbern [Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcd instance identifier 1234abcd A-devsuffix, calling out that this web endpoint is not deployed. -dev Combining the example parts, the ephemeral web endpoint’s URL could behttps://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run. https://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run The components of an ephemeral web endpoint subdomain ensure URL predictability
during development and testing, in both personal and shared workspaces. Multiple
copies of a web endpoint can be active when a Modal app is run in two or more
terminal windows, or when multiple developers are iterating on the same
application codebase. Every copy will be uniquely addressable while running. Stealing If an emphemeral web endpoint is running and another ephemeral web endpoint is
created seeking the same web endpoint label, the new web endpoint function willstealthe running web endpoint’s label. steal This ensures the latest iteration of an ephemeral web endpoint function is
serving requests, while older ones stop recieving web traffic. (Previously concurrently running ephemeral app web endpoints would include
conflict-avoiding hashes.) Truncation If a generated subdomain label is longer than 63 characters, it will be
truncated. For example, the following subdomain label is too long, 67 characters:ecorp--text-to-speech-really-really-long-function-name-erikbern-dev. ecorp--text-to-speech-really-really-long-function-name-erikbern-dev The truncation happens by calculating a SHA-256 hash of the overlong label, then
taking the first 6 characters of this hash. The overlong subdomain label is
truncated to 56 characters, and then joined by a dash to the hash prefix. The combination of the label hashing and truncation provides a unique list of 63
characters, complying with both DNS system limits and uniqueness requirements. Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncation Web endpoint URLs User-specified URLs Auto-generated URLs Deployed apps Ephemeral apps Stealing Truncation See it in actionCustom URL for LLM frontend See it in actionCustom URL for LLM frontend See it in action Custom URL for LLM frontend Custom URL for LLM frontend Custom URL for LLM frontend     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Workspace name slug, App name slug, Function name slug, optional Member name slug, optional instance identifier, and a '-dev' suffix make the endpoints running on ephemeral apps unique."
6,What happens if a generated subdomain label is longer than 63 characters?,Web endpoint URLs Autogenerated URLs,"If alabelis not specified, web endpoints receive a generated URL under themodal.rundomain. These generated URLs contain a subdomain label that is
unique to the running endpoint. label modal.run Deployed apps Web endpoints served by a deployed application have subdomains composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app The deployed web endpoint URL for this example ishttps://ecorp--text-to-speech-flask-app.modal.run. https://ecorp--text-to-speech-flask-app.modal.run This URL is reserved for the deployed application’s web endpoint. Running the
application during development will not replace the deployed application’s
association with the deployed URL. Ephemeral apps Web endpoints run in ephemeral apps have predictable, unique subdomains,
distinct from the subdomain of any associated deployment. The subdomain of a web endpoint running in an ephemeral app is composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app[Optional]Member name slug, in cases where app runs in a shared workspace:erikbern[Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcdA-devsuffix, calling out that this web endpoint is not deployed. Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app [Optional]Member name slug, in cases where app runs in a shared workspace:erikbern Member name slug erikbern [Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcd instance identifier 1234abcd A-devsuffix, calling out that this web endpoint is not deployed. -dev Combining the example parts, the ephemeral web endpoint’s URL could behttps://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run. https://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run The components of an ephemeral web endpoint subdomain ensure URL predictability
during development and testing, in both personal and shared workspaces. Multiple
copies of a web endpoint can be active when a Modal app is run in two or more
terminal windows, or when multiple developers are iterating on the same
application codebase. Every copy will be uniquely addressable while running. Stealing If an emphemeral web endpoint is running and another ephemeral web endpoint is
created seeking the same web endpoint label, the new web endpoint function willstealthe running web endpoint’s label. steal This ensures the latest iteration of an ephemeral web endpoint function is
serving requests, while older ones stop recieving web traffic. (Previously concurrently running ephemeral app web endpoints would include
conflict-avoiding hashes.) Truncation If a generated subdomain label is longer than 63 characters, it will be
truncated. For example, the following subdomain label is too long, 67 characters:ecorp--text-to-speech-really-really-long-function-name-erikbern-dev. ecorp--text-to-speech-really-really-long-function-name-erikbern-dev The truncation happens by calculating a SHA-256 hash of the overlong label, then
taking the first 6 characters of this hash. The overlong subdomain label is
truncated to 56 characters, and then joined by a dash to the hash prefix. The combination of the label hashing and truncation provides a unique list of 63
characters, complying with both DNS system limits and uniqueness requirements. Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncation Web endpoint URLs User-specified URLs Auto-generated URLs Deployed apps Ephemeral apps Stealing Truncation See it in actionCustom URL for LLM frontend See it in actionCustom URL for LLM frontend See it in action Custom URL for LLM frontend Custom URL for LLM frontend Custom URL for LLM frontend     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If a generated subdomain label is longer than 63 characters, it will be truncated by calculating a SHA-256 hash of the overlong label, then taking the first 6 characters of this hash. The overlong subdomain label is then truncated to 56 characters, and then joined by a dash to the hash prefix, providing a unique list of 63 characters in compliance with DNS system limits and uniqueness requirements."
0,What is a unique aspect of a web endpoint URL generated under the modal.run domain when a label is not specified?,Web endpoint URLs Autogenerated URLs,"If alabelis not specified, web endpoints receive a generated URL under themodal.rundomain. These generated URLs contain a subdomain label that is
unique to the running endpoint. label modal.run Deployed apps Web endpoints served by a deployed application have subdomains composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app The deployed web endpoint URL for this example ishttps://ecorp--text-to-speech-flask-app.modal.run. https://ecorp--text-to-speech-flask-app.modal.run This URL is reserved for the deployed application’s web endpoint. Running the
application during development will not replace the deployed application’s
association with the deployed URL. Ephemeral apps Web endpoints run in ephemeral apps have predictable, unique subdomains,
distinct from the subdomain of any associated deployment. The subdomain of a web endpoint running in an ephemeral app is composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app[Optional]Member name slug, in cases where app runs in a shared workspace:erikbern[Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcdA-devsuffix, calling out that this web endpoint is not deployed. Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app [Optional]Member name slug, in cases where app runs in a shared workspace:erikbern Member name slug erikbern [Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcd instance identifier 1234abcd A-devsuffix, calling out that this web endpoint is not deployed. -dev Combining the example parts, the ephemeral web endpoint’s URL could behttps://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run. https://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run The components of an ephemeral web endpoint subdomain ensure URL predictability
during development and testing, in both personal and shared workspaces. Multiple
copies of a web endpoint can be active when a Modal app is run in two or more
terminal windows, or when multiple developers are iterating on the same
application codebase. Every copy will be uniquely addressable while running. Stealing If an emphemeral web endpoint is running and another ephemeral web endpoint is
created seeking the same web endpoint label, the new web endpoint function willstealthe running web endpoint’s label. steal This ensures the latest iteration of an ephemeral web endpoint function is
serving requests, while older ones stop recieving web traffic. (Previously concurrently running ephemeral app web endpoints would include
conflict-avoiding hashes.) Truncation If a generated subdomain label is longer than 63 characters, it will be
truncated. For example, the following subdomain label is too long, 67 characters:ecorp--text-to-speech-really-really-long-function-name-erikbern-dev. ecorp--text-to-speech-really-really-long-function-name-erikbern-dev The truncation happens by calculating a SHA-256 hash of the overlong label, then
taking the first 6 characters of this hash. The overlong subdomain label is
truncated to 56 characters, and then joined by a dash to the hash prefix. The combination of the label hashing and truncation provides a unique list of 63
characters, complying with both DNS system limits and uniqueness requirements. Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncation Web endpoint URLs User-specified URLs Auto-generated URLs Deployed apps Ephemeral apps Stealing Truncation See it in actionCustom URL for LLM frontend See it in actionCustom URL for LLM frontend See it in action Custom URL for LLM frontend Custom URL for LLM frontend Custom URL for LLM frontend     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",These URLs contain a subdomain label that is unique to the running endpoint.
3,What additional components might a web endpoint running in an ephemeral app include in its subdomain?,Web endpoint URLs Autogenerated URLs,"If alabelis not specified, web endpoints receive a generated URL under themodal.rundomain. These generated URLs contain a subdomain label that is
unique to the running endpoint. label modal.run Deployed apps Web endpoints served by a deployed application have subdomains composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app The deployed web endpoint URL for this example ishttps://ecorp--text-to-speech-flask-app.modal.run. https://ecorp--text-to-speech-flask-app.modal.run This URL is reserved for the deployed application’s web endpoint. Running the
application during development will not replace the deployed application’s
association with the deployed URL. Ephemeral apps Web endpoints run in ephemeral apps have predictable, unique subdomains,
distinct from the subdomain of any associated deployment. The subdomain of a web endpoint running in an ephemeral app is composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app[Optional]Member name slug, in cases where app runs in a shared workspace:erikbern[Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcdA-devsuffix, calling out that this web endpoint is not deployed. Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app [Optional]Member name slug, in cases where app runs in a shared workspace:erikbern Member name slug erikbern [Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcd instance identifier 1234abcd A-devsuffix, calling out that this web endpoint is not deployed. -dev Combining the example parts, the ephemeral web endpoint’s URL could behttps://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run. https://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run The components of an ephemeral web endpoint subdomain ensure URL predictability
during development and testing, in both personal and shared workspaces. Multiple
copies of a web endpoint can be active when a Modal app is run in two or more
terminal windows, or when multiple developers are iterating on the same
application codebase. Every copy will be uniquely addressable while running. Stealing If an emphemeral web endpoint is running and another ephemeral web endpoint is
created seeking the same web endpoint label, the new web endpoint function willstealthe running web endpoint’s label. steal This ensures the latest iteration of an ephemeral web endpoint function is
serving requests, while older ones stop recieving web traffic. (Previously concurrently running ephemeral app web endpoints would include
conflict-avoiding hashes.) Truncation If a generated subdomain label is longer than 63 characters, it will be
truncated. For example, the following subdomain label is too long, 67 characters:ecorp--text-to-speech-really-really-long-function-name-erikbern-dev. ecorp--text-to-speech-really-really-long-function-name-erikbern-dev The truncation happens by calculating a SHA-256 hash of the overlong label, then
taking the first 6 characters of this hash. The overlong subdomain label is
truncated to 56 characters, and then joined by a dash to the hash prefix. The combination of the label hashing and truncation provides a unique list of 63
characters, complying with both DNS system limits and uniqueness requirements. Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncation Web endpoint URLs User-specified URLs Auto-generated URLs Deployed apps Ephemeral apps Stealing Truncation See it in actionCustom URL for LLM frontend See it in actionCustom URL for LLM frontend See it in action Custom URL for LLM frontend Custom URL for LLM frontend Custom URL for LLM frontend     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In cases where the app runs in a shared workspace, a member name slug and an instance identifier may be included in the subdomain. Additionally, a ""-dev"" suffix is used to indicate that the web endpoint is not deployed."
6,How is a generated subdomain label handled if it exceeds 63 characters?,Web endpoint URLs Autogenerated URLs,"If alabelis not specified, web endpoints receive a generated URL under themodal.rundomain. These generated URLs contain a subdomain label that is
unique to the running endpoint. label modal.run Deployed apps Web endpoints served by a deployed application have subdomains composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app The deployed web endpoint URL for this example ishttps://ecorp--text-to-speech-flask-app.modal.run. https://ecorp--text-to-speech-flask-app.modal.run This URL is reserved for the deployed application’s web endpoint. Running the
application during development will not replace the deployed application’s
association with the deployed URL. Ephemeral apps Web endpoints run in ephemeral apps have predictable, unique subdomains,
distinct from the subdomain of any associated deployment. The subdomain of a web endpoint running in an ephemeral app is composed of the
following parts: Workspace name slug:ECorp→ecorpApp name slug:text_to_speech→text-to-speechFunction name slug:flask_app→flask-app[Optional]Member name slug, in cases where app runs in a shared workspace:erikbern[Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcdA-devsuffix, calling out that this web endpoint is not deployed. Workspace name slug:ECorp→ecorp Workspace name slug ECorp ecorp App name slug:text_to_speech→text-to-speech App name slug text_to_speech text-to-speech Function name slug:flask_app→flask-app Function name slug flask_app flask-app [Optional]Member name slug, in cases where app runs in a shared workspace:erikbern Member name slug erikbern [Optional] Aninstance identifier, ensuring uniqueness in the presence of
concurrent ephemeral app runs:1234abcd instance identifier 1234abcd A-devsuffix, calling out that this web endpoint is not deployed. -dev Combining the example parts, the ephemeral web endpoint’s URL could behttps://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run. https://ecorp--text-to-speech-flask-app-erikbern-1234abcd-dev.modal.run The components of an ephemeral web endpoint subdomain ensure URL predictability
during development and testing, in both personal and shared workspaces. Multiple
copies of a web endpoint can be active when a Modal app is run in two or more
terminal windows, or when multiple developers are iterating on the same
application codebase. Every copy will be uniquely addressable while running. Stealing If an emphemeral web endpoint is running and another ephemeral web endpoint is
created seeking the same web endpoint label, the new web endpoint function willstealthe running web endpoint’s label. steal This ensures the latest iteration of an ephemeral web endpoint function is
serving requests, while older ones stop recieving web traffic. (Previously concurrently running ephemeral app web endpoints would include
conflict-avoiding hashes.) Truncation If a generated subdomain label is longer than 63 characters, it will be
truncated. For example, the following subdomain label is too long, 67 characters:ecorp--text-to-speech-really-really-long-function-name-erikbern-dev. ecorp--text-to-speech-really-really-long-function-name-erikbern-dev The truncation happens by calculating a SHA-256 hash of the overlong label, then
taking the first 6 characters of this hash. The overlong subdomain label is
truncated to 56 characters, and then joined by a dash to the hash prefix. The combination of the label hashing and truncation provides a unique list of 63
characters, complying with both DNS system limits and uniqueness requirements. Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncationSee it in actionCustom URL for LLM frontend Web endpoint URLsUser-specified URLsAuto-generated URLsDeployed appsEphemeral appsStealingTruncation Web endpoint URLs User-specified URLs Auto-generated URLs Deployed apps Ephemeral apps Stealing Truncation See it in actionCustom URL for LLM frontend See it in actionCustom URL for LLM frontend See it in action Custom URL for LLM frontend Custom URL for LLM frontend Custom URL for LLM frontend     CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If a generated subdomain label is longer than 63 characters, it will be truncated. This happens by calculating a SHA-256 hash of the overlong label, taking the first 6 characters of this hash, and truncating the overlong subdomain label to 56 characters. The hash prefix is then joined to the truncated label by a dash, yielding a unique list of 63 characters that complies with both DNS system limits and uniqueness requirements."
0,What is the purpose of modal config?,modal config,"modal config Manage client configuration for the current profile. Refer tohttps://modal.com/docs/reference/modal.configfor a full explanation
of what these options mean, and how to set them. https://modal.com/docs/reference/modal.config Usage: Usage modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]... modal config [OPTIONS] COMMAND [ARGS]... modal config [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands set-environment: Set the default Modal environment for the active profileshow: Show configuration values for the current profile (debug command). set-environment: Set the default Modal environment for the active profile set-environment show: Show configuration values for the current profile (debug command). show ",Modal config is used to manage client configuration for the current profile.
3,What command can I use to set the default environment for the active profile?,modal config,"modal config Manage client configuration for the current profile. Refer tohttps://modal.com/docs/reference/modal.configfor a full explanation
of what these options mean, and how to set them. https://modal.com/docs/reference/modal.config Usage: Usage modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]... modal config [OPTIONS] COMMAND [ARGS]... modal config [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands set-environment: Set the default Modal environment for the active profileshow: Show configuration values for the current profile (debug command). set-environment: Set the default Modal environment for the active profile set-environment show: Show configuration values for the current profile (debug command). show ",You can use the set-environment command to set the default Modal environment for the active profile.
6,What does the --help option do in modal config?,modal config,"modal config Manage client configuration for the current profile. Refer tohttps://modal.com/docs/reference/modal.configfor a full explanation
of what these options mean, and how to set them. https://modal.com/docs/reference/modal.config Usage: Usage modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]...Copy modal config [OPTIONS] COMMAND [ARGS]... modal config [OPTIONS] COMMAND [ARGS]... modal config [OPTIONS] COMMAND [ARGS]... Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help Commands: Commands set-environment: Set the default Modal environment for the active profileshow: Show configuration values for the current profile (debug command). set-environment: Set the default Modal environment for the active profile set-environment show: Show configuration values for the current profile (debug command). show ",The --help option in modal config shows the help message and exits the program.
0,What is the purpose of modal config show command?,modal config modal config show,"modal config show Show configuration values for the current profile (debug command). Usage: Usage modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS] modal config show [OPTIONS] modal config show [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal config modal config set-environment modal config show CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The purpose of the modal config show command is to display configuration values for the current profile.
3,What does modal config set-environment command do?,modal config modal config show,"modal config show Show configuration values for the current profile (debug command). Usage: Usage modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS] modal config show [OPTIONS] modal config show [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal config modal config set-environment modal config show CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The text does not provide specific information about what the modal config set-environment command does.
6,Can you explain the purpose of the code snippet provided?,modal config modal config show,"modal config show Show configuration values for the current profile (debug command). Usage: Usage modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS] modal config show [OPTIONS] modal config show [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal config modal config set-environment modal config show CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ",The text does not provide specific information about the purpose of the code snippet provided.
0,"What is the purpose of the command ""modal config show""?",modal config modal config show,"modal config show Show configuration values for the current profile (debug command). Usage: Usage modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS] modal config show [OPTIONS] modal config show [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal config modal config set-environment modal config show CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The purpose of the command ""modal config show"" is to display the configuration values for the current profile."
3,What company is referenced in the content?,modal config modal config show,"modal config show Show configuration values for the current profile (debug command). Usage: Usage modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS] modal config show [OPTIONS] modal config show [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal config modal config set-environment modal config show CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The referenced company in the content is Modal Labs, Inc."
6,"What function does the command ""modal config set-environment"" serve?",modal config modal config show,"modal config show Show configuration values for the current profile (debug command). Usage: Usage modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS]Copy modal config show [OPTIONS] modal config show [OPTIONS] modal config show [OPTIONS] Copy Copy    Copy Options: Options --help: Show this message and exit. --help: Show this message and exit. --help modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal configmodal config set-environmentmodal config show modal config modal config set-environment modal config show CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 29],
							data,
							form: null,
							error: null
						});
					});
				} ","The command ""modal config set-environment"" is used to set the environment configuration for modal config."
0,What does the function map() do in the given context?,Failures and retries,"When you call a function over a sequence of inputs withFunction.map(), sometimes
errors can happen during function execution. Exceptions from within the remote
function are propagated to the caller, so you can handle them with atry-exceptstatement (refer tosection on custom typesfor more on how to catch user-defined exceptions): Function.map() try-except section on custom types @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function() def f i raise @stub.local_entrypoint() def main try for in map 1 2 3 pass except print ""Exception handled"" Copy Copy    Copy ","In this context, the function map() is called over a sequence of inputs."
3,What mechanism is provided for the handling of these exceptions?,Failures and retries,"When you call a function over a sequence of inputs withFunction.map(), sometimes
errors can happen during function execution. Exceptions from within the remote
function are propagated to the caller, so you can handle them with atry-exceptstatement (refer tosection on custom typesfor more on how to catch user-defined exceptions): Function.map() try-except section on custom types @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function() def f i raise @stub.local_entrypoint() def main try for in map 1 2 3 pass except print ""Exception handled"" Copy Copy    Copy ",These exceptions can be handled with a try-except statement.
6,How is the ValueError exception handled in the main() function?,Failures and retries,"When you call a function over a sequence of inputs withFunction.map(), sometimes
errors can happen during function execution. Exceptions from within the remote
function are propagated to the caller, so you can handle them with atry-exceptstatement (refer tosection on custom typesfor more on how to catch user-defined exceptions): Function.map() try-except section on custom types @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"")Copy @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function()deff(i):raiseValueError()@stub.local_entrypoint()defmain():try:for_inf.map([1,2,3]):passexceptValueError:print(""Exception handled"") @stub.function() def f i raise @stub.local_entrypoint() def main try for in map 1 2 3 pass except print ""Exception handled"" Copy Copy    Copy ","In the main() function, the ValueError exception is handled by being caught in a try-except block and printing ""Exception handled""."
0,What happens if a container crashes on start-up in Modal labs?,Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","If a container crashes on start-up in Modal Labs, the error is propagated to the caller immediately, since it's likely a user error."
3,"In Modal Labs, what differentiates a container crash on start-up versus one that crashes after start-up?",Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","In Modal Labs, a container crash on start-up propagates the error to the caller immediately, implying a user error. However, if a container crashes after start-up, due likely to an out-of-memory error, Modal will reschedule the container and any ongoing work, provided the crash rate doesn't exceed a specific limit."
6,Who owns Modal Labs?,Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal Labs is owned by Modal Labs, Inc."
0,What happens when a container crashes on start-up?,Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The error will be propagated to the caller immediately as it's likely a user error.
1,What happens when a container crashes after start-up?,Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Modal will reschedule the container and any work it was currently assigned, unless the crash rate of the container exceeds a certain limit."
2,Who owns the copyright to this mentioned software or procedure?,Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright belongs to Modal Labs, Inc."
3,"What is the role of ""__sveltekit_qfhbjo"" in this context?",Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",__sveltekit_qfhbjo is an object having base URL and environment information for the application.
4,What occurs in the promise given in the code snippet?,Failures and retries Container crashes,"In the case of a container crash on start-up (for example, while handling
imports in global scope before the function can be run), the error will be
propagated to the caller immediately, since it’s likely a user error. If a container crashes after start-up (for example, due to an out of memory
error), Modal will reschedule the container and any work it was currently
assigned, unless the crash rate of the container exceeds a certain limit. Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retriesFunction retriesContainer crashes Failures and retries Function retries Container crashes CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",It's importing two JavaScript modules and then starting the application with certain parameters once those modules have been successfully loaded.
0,What class is deprecated and what is suggested to use instead?,modalsharedvolume modalsharedvolumeSharedVolume,"classSharedVolume(object)Copy classSharedVolume(object)Copy classSharedVolume(object)Copy classSharedVolume(object) classSharedVolume(object) classSharedVolume(object) class SharedVolume object Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy SharedVolume(...)is deprecated. Please useNetworkFileSystem.new(...)instead. SharedVolume(...) NetworkFileSystem.new(...) new @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs): @staticmethoddefnew(*args, **kwargs): @staticmethoddefnew(*args, **kwargs): @staticmethod def new *args, **kwargs Copy Copy    Copy SharedVolume.new(...)is deprecated. Please useNetworkFileSystem.new(...)instead. SharedVolume.new(...) NetworkFileSystem.new(...) persisted @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs): @staticmethoddefpersisted(*args, **kwargs): @staticmethoddefpersisted(*args, **kwargs): @staticmethod def persisted *args, **kwargs Copy Copy    Copy SharedVolume.persisted(...)is deprecated. Please useNetworkFileSystem.persisted(...)instead. SharedVolume.persisted(...) NetworkFileSystem.persisted(...) modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volume modal.shared_volume.SharedVolume new persisted CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Class SharedVolume is deprecated, it's suggested to use NetworkFileSystem.new instead. "
3,What is suggested to use instead of SharedVolume.persisted?,modalsharedvolume modalsharedvolumeSharedVolume,"classSharedVolume(object)Copy classSharedVolume(object)Copy classSharedVolume(object)Copy classSharedVolume(object) classSharedVolume(object) classSharedVolume(object) class SharedVolume object Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy SharedVolume(...)is deprecated. Please useNetworkFileSystem.new(...)instead. SharedVolume(...) NetworkFileSystem.new(...) new @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs): @staticmethoddefnew(*args, **kwargs): @staticmethoddefnew(*args, **kwargs): @staticmethod def new *args, **kwargs Copy Copy    Copy SharedVolume.new(...)is deprecated. Please useNetworkFileSystem.new(...)instead. SharedVolume.new(...) NetworkFileSystem.new(...) persisted @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs): @staticmethoddefpersisted(*args, **kwargs): @staticmethoddefpersisted(*args, **kwargs): @staticmethod def persisted *args, **kwargs Copy Copy    Copy SharedVolume.persisted(...)is deprecated. Please useNetworkFileSystem.persisted(...)instead. SharedVolume.persisted(...) NetworkFileSystem.persisted(...) modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volume modal.shared_volume.SharedVolume new persisted CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It is suggested to use NetworkFileSystem.persisted instead of SharedVolume.persisted.
6,What is been imported in the script code?,modalsharedvolume modalsharedvolumeSharedVolume,"classSharedVolume(object)Copy classSharedVolume(object)Copy classSharedVolume(object)Copy classSharedVolume(object) classSharedVolume(object) classSharedVolume(object) class SharedVolume object Copy Copy    Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs):Copy def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def__init__(self, *args, **kwargs): def __init__ self, *args, **kwargs Copy Copy    Copy SharedVolume(...)is deprecated. Please useNetworkFileSystem.new(...)instead. SharedVolume(...) NetworkFileSystem.new(...) new @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs):Copy @staticmethoddefnew(*args, **kwargs): @staticmethoddefnew(*args, **kwargs): @staticmethoddefnew(*args, **kwargs): @staticmethod def new *args, **kwargs Copy Copy    Copy SharedVolume.new(...)is deprecated. Please useNetworkFileSystem.new(...)instead. SharedVolume.new(...) NetworkFileSystem.new(...) persisted @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs):Copy @staticmethoddefpersisted(*args, **kwargs): @staticmethoddefpersisted(*args, **kwargs): @staticmethoddefpersisted(*args, **kwargs): @staticmethod def persisted *args, **kwargs Copy Copy    Copy SharedVolume.persisted(...)is deprecated. Please useNetworkFileSystem.persisted(...)instead. SharedVolume.persisted(...) NetworkFileSystem.persisted(...) modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volumemodal.shared_volume.SharedVolumenewpersisted modal.shared_volume modal.shared_volume.SharedVolume new persisted CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","Two modules, ""../../_app/immutable/entry/start.be12ce5d.js"" and ""../../_app/immutable/entry/app.917210b3.js"" are being imported in the script code."
0,What does Modal allows you to do with a function created by a deployment?,Invoking deployed functions,"Modal lets you take a function created by adeploymentand call it from other contexts. deployment There are two ways of invoking deployed functions. If the invoking client is
running Python, then the sameModal client libraryused to write
Modal code can be used. HTTPS is used if the invoking client is not running
Python and therefore cannot import the Modal client library. Modal client library ",Modal allows you to take a function created by a deployment and call it from other contexts.
3,What should a client use to invoke deployed functions if it is running Python?,Invoking deployed functions,"Modal lets you take a function created by adeploymentand call it from other contexts. deployment There are two ways of invoking deployed functions. If the invoking client is
running Python, then the sameModal client libraryused to write
Modal code can be used. HTTPS is used if the invoking client is not running
Python and therefore cannot import the Modal client library. Modal client library ","If the invoking client is running Python, then the same Modal client library used to write Modal code can be used."
6,What can't a client do if it's not running Python?,Invoking deployed functions,"Modal lets you take a function created by adeploymentand call it from other contexts. deployment There are two ways of invoking deployed functions. If the invoking client is
running Python, then the sameModal client libraryused to write
Modal code can be used. HTTPS is used if the invoking client is not running
Python and therefore cannot import the Modal client library. Modal client library ","If the invoking client is not running Python, it cannot import the Modal client library."
0,What can interact with deployed Modal applications?,Invoking deployed functions Invoking with HTTPS,"Any non-Python application client can interact with deployed Modal applications
viaweb endpoint functions. web endpoint functions Anything able to make HTTPS requests can trigger a Modal web endpoint function.
Note that all deployed web endpoint functions havea stable HTTPS URL. a stable HTTPS URL Some use cases for HTTPS invocation include: Calling Modal functions from a web browser client running JavascriptCalling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc)Calling Modal functions using UNIX tools (curl,wget) Calling Modal functions from a web browser client running Javascript Calling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc) Calling Modal functions using UNIX tools (curl,wget) curl wget However, if the client of your Modal deployment is running Python, it’s better
to use theModal client libraryto
invoke your Modal code. Modal client library For more detail on setting up functions for invocation over HTTP see theweb endpoints guide. web endpoints guide Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functions Invoking with Python Function lookup and invocation basics Lookup of lifecycle functions Asynchronous invocation Importing a Modal function between Modal apps Comparison with HTTPS Invoking with HTTPS CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Any non-Python application client can interact with deployed Modal applications via web endpoint functions.
3,Who could possibly use HTTPS invocation?,Invoking deployed functions Invoking with HTTPS,"Any non-Python application client can interact with deployed Modal applications
viaweb endpoint functions. web endpoint functions Anything able to make HTTPS requests can trigger a Modal web endpoint function.
Note that all deployed web endpoint functions havea stable HTTPS URL. a stable HTTPS URL Some use cases for HTTPS invocation include: Calling Modal functions from a web browser client running JavascriptCalling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc)Calling Modal functions using UNIX tools (curl,wget) Calling Modal functions from a web browser client running Javascript Calling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc) Calling Modal functions using UNIX tools (curl,wget) curl wget However, if the client of your Modal deployment is running Python, it’s better
to use theModal client libraryto
invoke your Modal code. Modal client library For more detail on setting up functions for invocation over HTTP see theweb endpoints guide. web endpoints guide Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functions Invoking with Python Function lookup and invocation basics Lookup of lifecycle functions Asynchronous invocation Importing a Modal function between Modal apps Comparison with HTTPS Invoking with HTTPS CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","HTTPS Invocations can be made from a web browser client running Javascript or from non-Python backend services like Java, Go, Ruby, NodeJS, etc., and even UNIX tools like curl and wget can be used for calling Modal functions."
6,What is provided for setting up functions for invocation over HTTP?,Invoking deployed functions Invoking with HTTPS,"Any non-Python application client can interact with deployed Modal applications
viaweb endpoint functions. web endpoint functions Anything able to make HTTPS requests can trigger a Modal web endpoint function.
Note that all deployed web endpoint functions havea stable HTTPS URL. a stable HTTPS URL Some use cases for HTTPS invocation include: Calling Modal functions from a web browser client running JavascriptCalling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc)Calling Modal functions using UNIX tools (curl,wget) Calling Modal functions from a web browser client running Javascript Calling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc) Calling Modal functions using UNIX tools (curl,wget) curl wget However, if the client of your Modal deployment is running Python, it’s better
to use theModal client libraryto
invoke your Modal code. Modal client library For more detail on setting up functions for invocation over HTTP see theweb endpoints guide. web endpoints guide Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functions Invoking with Python Function lookup and invocation basics Lookup of lifecycle functions Asynchronous invocation Importing a Modal function between Modal apps Comparison with HTTPS Invoking with HTTPS CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","For more detail on setting up functions for invocation over HTTP, the web endpoints guide is available."
0,What can be used to interact with Modal applications?,Invoking deployed functions Invoking with HTTPS,"Any non-Python application client can interact with deployed Modal applications
viaweb endpoint functions. web endpoint functions Anything able to make HTTPS requests can trigger a Modal web endpoint function.
Note that all deployed web endpoint functions havea stable HTTPS URL. a stable HTTPS URL Some use cases for HTTPS invocation include: Calling Modal functions from a web browser client running JavascriptCalling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc)Calling Modal functions using UNIX tools (curl,wget) Calling Modal functions from a web browser client running Javascript Calling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc) Calling Modal functions using UNIX tools (curl,wget) curl wget However, if the client of your Modal deployment is running Python, it’s better
to use theModal client libraryto
invoke your Modal code. Modal client library For more detail on setting up functions for invocation over HTTP see theweb endpoints guide. web endpoints guide Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functions Invoking with Python Function lookup and invocation basics Lookup of lifecycle functions Asynchronous invocation Importing a Modal function between Modal apps Comparison with HTTPS Invoking with HTTPS CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Any non-Python application client can interact with deployed Modal applications via web endpoint functions.
3,What are some use cases for HTTPS invocation?,Invoking deployed functions Invoking with HTTPS,"Any non-Python application client can interact with deployed Modal applications
viaweb endpoint functions. web endpoint functions Anything able to make HTTPS requests can trigger a Modal web endpoint function.
Note that all deployed web endpoint functions havea stable HTTPS URL. a stable HTTPS URL Some use cases for HTTPS invocation include: Calling Modal functions from a web browser client running JavascriptCalling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc)Calling Modal functions using UNIX tools (curl,wget) Calling Modal functions from a web browser client running Javascript Calling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc) Calling Modal functions using UNIX tools (curl,wget) curl wget However, if the client of your Modal deployment is running Python, it’s better
to use theModal client libraryto
invoke your Modal code. Modal client library For more detail on setting up functions for invocation over HTTP see theweb endpoints guide. web endpoints guide Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functions Invoking with Python Function lookup and invocation basics Lookup of lifecycle functions Asynchronous invocation Importing a Modal function between Modal apps Comparison with HTTPS Invoking with HTTPS CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","Use cases for HTTPS invocation include Calling Modal functions from a web browser client running Javascript, from non-Python backend services (Java, Go, Ruby, NodeJS, etc), or using UNIX tools (curl,wget)."
6,What does a deployed web endpoint function have?,Invoking deployed functions Invoking with HTTPS,"Any non-Python application client can interact with deployed Modal applications
viaweb endpoint functions. web endpoint functions Anything able to make HTTPS requests can trigger a Modal web endpoint function.
Note that all deployed web endpoint functions havea stable HTTPS URL. a stable HTTPS URL Some use cases for HTTPS invocation include: Calling Modal functions from a web browser client running JavascriptCalling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc)Calling Modal functions using UNIX tools (curl,wget) Calling Modal functions from a web browser client running Javascript Calling Modal functions from non-Python backend services (Java, Go, Ruby,
NodeJS, etc) Calling Modal functions using UNIX tools (curl,wget) curl wget However, if the client of your Modal deployment is running Python, it’s better
to use theModal client libraryto
invoke your Modal code. Modal client library For more detail on setting up functions for invocation over HTTP see theweb endpoints guide. web endpoints guide Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functionsInvoking with PythonFunction lookup and invocation basicsLookup of lifecycle functionsAsynchronous invocationImporting a Modal function between Modal appsComparison with HTTPSInvoking with HTTPS Invoking deployed functions Invoking with Python Function lookup and invocation basics Lookup of lifecycle functions Asynchronous invocation Importing a Modal function between Modal apps Comparison with HTTPS Invoking with HTTPS CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",All deployed web endpoint functions have a stable HTTPS URL.
0,What is the name of the open-source chatbot being discussed?,QuilLLMan Voice Chat with LLMs,"Vicunais the latest in a series of open-source
chatbots that approach the quality of proprietary models like GPT-4, but in
addition can be self-hosted at a fraction of the cost. We’ve enjoyed playing
around with Vicuna enough at Modal HQ that we decided we wanted to have it
available at all times in the form of a voice chat app. Vicuna So, we builtQuiLLMan, a complete chat
app that transcribes audio in real-time usingWhisper, streams back a response from a
language model, and synthesizes this response as natural-sounding speech. QuiLLMan Whisper   Everything (including the React frontend and backend API) is deployed
serverlessly on Modal, and you can play around with the live demohere. This post provides a
high-level walkthrough of therepo.
We’re looking to add more models and features to this as time goes on, and
contributions are welcome! here repo ",Vicuna
3,What is Whisper used for in this context?,QuilLLMan Voice Chat with LLMs,"Vicunais the latest in a series of open-source
chatbots that approach the quality of proprietary models like GPT-4, but in
addition can be self-hosted at a fraction of the cost. We’ve enjoyed playing
around with Vicuna enough at Modal HQ that we decided we wanted to have it
available at all times in the form of a voice chat app. Vicuna So, we builtQuiLLMan, a complete chat
app that transcribes audio in real-time usingWhisper, streams back a response from a
language model, and synthesizes this response as natural-sounding speech. QuiLLMan Whisper   Everything (including the React frontend and backend API) is deployed
serverlessly on Modal, and you can play around with the live demohere. This post provides a
high-level walkthrough of therepo.
We’re looking to add more models and features to this as time goes on, and
contributions are welcome! here repo ",Whisper is used in QuiLLMan to transcribe audio in real-time.
6,What is the future plan for this project?,QuilLLMan Voice Chat with LLMs,"Vicunais the latest in a series of open-source
chatbots that approach the quality of proprietary models like GPT-4, but in
addition can be self-hosted at a fraction of the cost. We’ve enjoyed playing
around with Vicuna enough at Modal HQ that we decided we wanted to have it
available at all times in the form of a voice chat app. Vicuna So, we builtQuiLLMan, a complete chat
app that transcribes audio in real-time usingWhisper, streams back a response from a
language model, and synthesizes this response as natural-sounding speech. QuiLLMan Whisper   Everything (including the React frontend and backend API) is deployed
serverlessly on Modal, and you can play around with the live demohere. This post provides a
high-level walkthrough of therepo.
We’re looking to add more models and features to this as time goes on, and
contributions are welcome! here repo ",The future plan for this project is to add more models and features over time and contributions are welcome.
0,Where can the code for the QuilLLMan: Voice Chat with LLMs example be found?,QuilLLMan Voice Chat with LLMs Steal this example,"The code for this entire example isavailable on GitHub. Follow the
instructions in the README for how to run or deploy it yourself on Modal. available on GitHub QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMs Code overview Language model Transcription Text-to-speech FastAPI server React frontend Steal this example CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The code can be found on GitHub.
3,How can one run or deploy the QuilLLMan: Voice Chat with LLMs example?,QuilLLMan Voice Chat with LLMs Steal this example,"The code for this entire example isavailable on GitHub. Follow the
instructions in the README for how to run or deploy it yourself on Modal. available on GitHub QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMs Code overview Language model Transcription Text-to-speech FastAPI server React frontend Steal this example CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Follow the instructions in the README on GitHub.
6,"What year is given at the bottom of the document for Modal Labs, Inc.?",QuilLLMan Voice Chat with LLMs Steal this example,"The code for this entire example isavailable on GitHub. Follow the
instructions in the README for how to run or deploy it yourself on Modal. available on GitHub QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMs Code overview Language model Transcription Text-to-speech FastAPI server React frontend Steal this example CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The year given is 2023.
0,What is QuilLLMan?,QuilLLMan Voice Chat with LLMs Steal this example,"The code for this entire example isavailable on GitHub. Follow the
instructions in the README for how to run or deploy it yourself on Modal. available on GitHub QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMs Code overview Language model Transcription Text-to-speech FastAPI server React frontend Steal this example CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",QuilLLMan is a voice chat with LLMs.
3,What are the components of the QuilLLMan code overview?,QuilLLMan Voice Chat with LLMs Steal this example,"The code for this entire example isavailable on GitHub. Follow the
instructions in the README for how to run or deploy it yourself on Modal. available on GitHub QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMs Code overview Language model Transcription Text-to-speech FastAPI server React frontend Steal this example CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The QuilLLMan code overview involves a language model, transcription, text-to-speech, FastAPI server, and React frontend."
6,What happens after the import in the provided code snippet?,QuilLLMan Voice Chat with LLMs Steal this example,"The code for this entire example isavailable on GitHub. Follow the
instructions in the README for how to run or deploy it yourself on Modal. available on GitHub QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMsCode overviewLanguage modelTranscriptionText-to-speechFastAPI serverReact frontendSteal this example QuilLLMan: Voice Chat with LLMs Code overview Language model Transcription Text-to-speech FastAPI server React frontend Steal this example CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","After the import, the start function from kit is called with parameters for app, element, and an object detailing node_ids, data, form, and error."
0,What is the primary function of the deployment process as described in the content?,modalrunner modalrunnerdeploystub,"asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: async def deploy_stub stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None, str None None None True ""ap"" Optional str None Copy Copy    Copy Deploy an app and export its objects persistently. Typically, using the command-line toolmodal deploy <module or script>should be used, instead of this method. modal deploy <module or script> Usage: Usage: if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub) if__name__ ==""__main__"":
    deploy_stub(stub) if__name__ ==""__main__"":
    deploy_stub(stub) if ""__main__"" Copy Copy    Copy Deployment has two primary purposes: Persists all of the objects in the app, allowing them to live past the
current app run. For schedules this enables headless “cron”-like
functionality where scheduled functions continue to be invoked after
the client has disconnected.Allows for certain kinds of these objects,deployment objects, to be
referred to and used by other apps. Persists all of the objects in the app, allowing them to live past the
current app run. For schedules this enables headless “cron”-like
functionality where scheduled functions continue to be invoked after
the client has disconnected. Allows for certain kinds of these objects,deployment objects, to be
referred to and used by other apps. deployment objects ","The primary function of deployment is to persist all of the objects in the app, allowing them to live past the current app run and to enable headless ""cron""-like functionality where scheduled functions continue to be invoked after the client has disconnected."
3,What is achieved by deploying an app in the context of the content provided?,modalrunner modalrunnerdeploystub,"asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: async def deploy_stub stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None, str None None None True ""ap"" Optional str None Copy Copy    Copy Deploy an app and export its objects persistently. Typically, using the command-line toolmodal deploy <module or script>should be used, instead of this method. modal deploy <module or script> Usage: Usage: if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub) if__name__ ==""__main__"":
    deploy_stub(stub) if__name__ ==""__main__"":
    deploy_stub(stub) if ""__main__"" Copy Copy    Copy Deployment has two primary purposes: Persists all of the objects in the app, allowing them to live past the
current app run. For schedules this enables headless “cron”-like
functionality where scheduled functions continue to be invoked after
the client has disconnected.Allows for certain kinds of these objects,deployment objects, to be
referred to and used by other apps. Persists all of the objects in the app, allowing them to live past the
current app run. For schedules this enables headless “cron”-like
functionality where scheduled functions continue to be invoked after
the client has disconnected. Allows for certain kinds of these objects,deployment objects, to be
referred to and used by other apps. deployment objects ",Deploying an app allows for its objects to live past the current app run and continue to function even after the client has disconnected.
6,What is one scenario where the deployment of objects in an app is useful according to the content?,modalrunner modalrunnerdeploystub,"asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult:Copy asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: asyncdefdeploy_stub(stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None,) -> DeployResult: async def deploy_stub stub: _Stub,
    name:str=None,
    namespace=api_pb2.DEPLOYMENT_NAMESPACE_WORKSPACE,
    client=None,
    stdout=None,
    show_progress=True,
    object_entity=""ap"",
    environment_name:Optional[str] =None, str None None None True ""ap"" Optional str None Copy Copy    Copy Deploy an app and export its objects persistently. Typically, using the command-line toolmodal deploy <module or script>should be used, instead of this method. modal deploy <module or script> Usage: Usage: if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub)Copy if__name__ ==""__main__"":
    deploy_stub(stub) if__name__ ==""__main__"":
    deploy_stub(stub) if__name__ ==""__main__"":
    deploy_stub(stub) if ""__main__"" Copy Copy    Copy Deployment has two primary purposes: Persists all of the objects in the app, allowing them to live past the
current app run. For schedules this enables headless “cron”-like
functionality where scheduled functions continue to be invoked after
the client has disconnected.Allows for certain kinds of these objects,deployment objects, to be
referred to and used by other apps. Persists all of the objects in the app, allowing them to live past the
current app run. For schedules this enables headless “cron”-like
functionality where scheduled functions continue to be invoked after
the client has disconnected. Allows for certain kinds of these objects,deployment objects, to be
referred to and used by other apps. deployment objects ","Deployment is useful in scenarios where headless ""cron""-like functionality is needed, allowing scheduled functions to continue to be invoked after the client has disconnected."
0,What is the purpose of the interactive shell in Modal?,modalrunner modalrunnerinteractiveshell,"asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): async def interactive_shell _function: _Function, cmd:str, environment_name:str="""" str str """" Copy Copy    Copy Run an interactive shell (likebash) within the image for this app. bash This is useful for online debugging and interactive exploration of the
contents of this image. Ifcmdis optionally provided, it will be run
instead of the default shell inside this image. cmd Example Example importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) import ""vim"" Copy Copy    Copy You can now run this using modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash Copy Copy    Copy modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runner modal.runner.DeployResult modal.runner.deploy_stub modal.runner.interactive_shell CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ",It runs an interactive shell (like bash) within the image for the app which is useful for online debugging and interactive exploration of the image contents.
3,"How can one modify an image in Modal, using an example?",modalrunner modalrunnerinteractiveshell,"asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): async def interactive_shell _function: _Function, cmd:str, environment_name:str="""" str str """" Copy Copy    Copy Run an interactive shell (likebash) within the image for this app. bash This is useful for online debugging and interactive exploration of the
contents of this image. Ifcmdis optionally provided, it will be run
instead of the default shell inside this image. cmd Example Example importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) import ""vim"" Copy Copy    Copy You can now run this using modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash Copy Copy    Copy modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runner modal.runner.DeployResult modal.runner.deploy_stub modal.runner.interactive_shell CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")). This installs ""vim"" on a debian slim image."
6,What is the base URL according to the __sveltekit_qfhbjo variable?,modalrunner modalrunnerinteractiveshell,"asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): async def interactive_shell _function: _Function, cmd:str, environment_name:str="""" str str """" Copy Copy    Copy Run an interactive shell (likebash) within the image for this app. bash This is useful for online debugging and interactive exploration of the
contents of this image. Ifcmdis optionally provided, it will be run
instead of the default shell inside this image. cmd Example Example importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) import ""vim"" Copy Copy    Copy You can now run this using modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash Copy Copy    Copy modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runner modal.runner.DeployResult modal.runner.deploy_stub modal.runner.interactive_shell CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The base URL is ""../.."", based on the location, with the last character of the path sliced off."
0,What is the function of interactive_shell in modal.runner?,modalrunner modalrunnerinteractiveshell,"asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): async def interactive_shell _function: _Function, cmd:str, environment_name:str="""" str str """" Copy Copy    Copy Run an interactive shell (likebash) within the image for this app. bash This is useful for online debugging and interactive exploration of the
contents of this image. Ifcmdis optionally provided, it will be run
instead of the default shell inside this image. cmd Example Example importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) import ""vim"" Copy Copy    Copy You can now run this using modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash Copy Copy    Copy modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runner modal.runner.DeployResult modal.runner.deploy_stub modal.runner.interactive_shell CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The function 'interactive_shell' in modal.runner allows you to run an interactive shell (like bash) within the image for the app. It is useful for online debugging and interactive exploration of the contents of the image. If an optional 'cmd' is provided, it will be run instead of the default shell inside this image."
3,How can you run a specific command using modal shell?,modalrunner modalrunnerinteractiveshell,"asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): async def interactive_shell _function: _Function, cmd:str, environment_name:str="""" str str """" Copy Copy    Copy Run an interactive shell (likebash) within the image for this app. bash This is useful for online debugging and interactive exploration of the
contents of this image. Ifcmdis optionally provided, it will be run
instead of the default shell inside this image. cmd Example Example importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) import ""vim"" Copy Copy    Copy You can now run this using modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash Copy Copy    Copy modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runner modal.runner.DeployResult modal.runner.deploy_stub modal.runner.interactive_shell CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","You can run a specific command using modal shell by providing the command as an argument to the --cmd flag such as ""modal shell script.py --cmd /bin/bash""."
6,What does the copyright line say at the bottom of the documented code?,modalrunner modalrunnerinteractiveshell,"asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""):Copy asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): asyncdefinteractive_shell(_function: _Function, cmd:str, environment_name:str=""""): async def interactive_shell _function: _Function, cmd:str, environment_name:str="""" str str """" Copy Copy    Copy Run an interactive shell (likebash) within the image for this app. bash This is useful for online debugging and interactive exploration of the
contents of this image. Ifcmdis optionally provided, it will be run
instead of the default shell inside this image. cmd Example Example importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim""))Copy importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) importmodal

stub = modal.Stub(image=modal.Image.debian_slim().apt_install(""vim"")) import ""vim"" Copy Copy    Copy You can now run this using modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bashCopy modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash modal shell script.py --cmd /bin/bash Copy Copy    Copy modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runnermodal.runner.DeployResultmodal.runner.deploy_stubmodal.runner.interactive_shell modal.runner modal.runner.DeployResult modal.runner.deploy_stub modal.runner.interactive_shell CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 6, 28],
							data,
							form: null,
							error: null
						});
					});
				} ","The copyright line states ""© 2023 Modal Labs, Inc."""
0,What are environment variables in the context of a container image?,Environment variables Container image environment variables,"Container image layers used by a Modal function’smodal.Imagewill set
environment variables which will be present within your function’s runtime
environment. For example, thedebian_slimimage sets theGPG_KEYvariable. modal.Image debian_slim debian_slim GPG_KEY To override image variables or set new ones, use the.envmethod provided bymodal.Image. .env .env modal.Image Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variables Runtime environment variables Container image environment variables CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Environment variables in the context of a container image are variables that are set by the image layers used by a Modal function's modal.Image. These variables are present within the function's runtime environment. 
3,How can one override image variables or set new ones?,Environment variables Container image environment variables,"Container image layers used by a Modal function’smodal.Imagewill set
environment variables which will be present within your function’s runtime
environment. For example, thedebian_slimimage sets theGPG_KEYvariable. modal.Image debian_slim debian_slim GPG_KEY To override image variables or set new ones, use the.envmethod provided bymodal.Image. .env .env modal.Image Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variables Runtime environment variables Container image environment variables CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","To override image variables or set new ones, one can use the .env method provided by modal.Image."
6,What does the JavaScript in the script tag aim to accomplish?,Environment variables Container image environment variables,"Container image layers used by a Modal function’smodal.Imagewill set
environment variables which will be present within your function’s runtime
environment. For example, thedebian_slimimage sets theGPG_KEYvariable. modal.Image debian_slim debian_slim GPG_KEY To override image variables or set new ones, use the.envmethod provided bymodal.Image. .env .env modal.Image Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variables Runtime environment variables Container image environment variables CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","The JavaScript script tag seems to start a modular application by importing and then starting app and kit modules, after linking them to a specific location which is the parent element of the current script. The start is performed with specific parameters indicating node_ids, data, form and error."
0,What are environment variables in the context of Modal function's image?,Environment variables Container image environment variables,"Container image layers used by a Modal function’smodal.Imagewill set
environment variables which will be present within your function’s runtime
environment. For example, thedebian_slimimage sets theGPG_KEYvariable. modal.Image debian_slim debian_slim GPG_KEY To override image variables or set new ones, use the.envmethod provided bymodal.Image. .env .env modal.Image Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variables Runtime environment variables Container image environment variables CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",Environment variables are set by the container image layers used in a Modal function's image and they are present within the function's runtime.
3,How can you override image variables or set new ones in Modal?,Environment variables Container image environment variables,"Container image layers used by a Modal function’smodal.Imagewill set
environment variables which will be present within your function’s runtime
environment. For example, thedebian_slimimage sets theGPG_KEYvariable. modal.Image debian_slim debian_slim GPG_KEY To override image variables or set new ones, use the.envmethod provided bymodal.Image. .env .env modal.Image Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variables Runtime environment variables Container image environment variables CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ","To override image variables or set new ones, you can use the .env method provided by modal.Image."
6,What is the purpose of the code snippet present in this content?,Environment variables Container image environment variables,"Container image layers used by a Modal function’smodal.Imagewill set
environment variables which will be present within your function’s runtime
environment. For example, thedebian_slimimage sets theGPG_KEYvariable. modal.Image debian_slim debian_slim GPG_KEY To override image variables or set new ones, use the.envmethod provided bymodal.Image. .env .env modal.Image Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variablesRuntime environment variablesContainer image environment variables Environment variables Runtime environment variables Container image environment variables CompanyExamplesDocumentationPricingLegal© 2023 Modal Labs, Inc. CompanyExamplesDocumentationPricingLegal                 CompanyExamplesDocumentationPricingLegal Company Examples Documentation Pricing Legal Legal Legal   © 2023 Modal Labs, Inc.    {
					__sveltekit_qfhbjo = {
						base: new URL(""../.."", location).pathname.slice(0, -1),
						env: {}
					};

					const element = document.currentScript.parentElement;

					const data = [null,null,null,null];

					Promise.all([
						import(""../../_app/immutable/entry/start.be12ce5d.js""),
						import(""../../_app/immutable/entry/app.917210b3.js"")
					]).then(([kit, app]) => {
						kit.start(app, element, {
							node_ids: [0, 3, 5, 26],
							data,
							form: null,
							error: null
						});
					});
				} ",The code snippet is for importing and then starting an app using the imported 'kit' and 'app' modules within the element specified by document.currentScript.parentElement in javascript.
